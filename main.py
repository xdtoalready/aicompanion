# –§–∞–π–ª: main.py
# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π —Ñ–∞–π–ª AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞

import asyncio
import json
import logging
import os
import sys

from app.integrations.telegram_bot import TelegramCompanion
from app.core.companion import RealisticAICompanion

def load_config(config_path: str = "config/config.json") -> dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        print("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ config/config.example.json –≤ config/config.json –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        sys.exit(1)
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = [
            'ai.openrouter_api_key',
            'character.name'
        ]
        
        for field in required_fields:
            keys = field.split('.')
            value = config
            for key in keys:
                value = value.get(key)
                if value is None:
                    print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {field}")
                    sys.exit(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
        if config['ai']['openrouter_api_key'] == 'YOUR_OPENROUTER_API_KEY_HERE':
            print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à OpenRouter API –∫–ª—é—á –≤ config.json")
            print("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –Ω–∞: https://openrouter.ai")
            sys.exit(1)
        
        return config
        
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

def setup_logging(config: dict):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    log_config = config.get('logging', {})
    log_level = log_config.get('level', 'INFO')
    log_file = log_config.get('file', 'logs/companion.log')
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    os.makedirs(os.path.dirname(log_file), exist_ok=True)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=getattr(logging, log_level),
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_file, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

def create_directories(config: dict):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    
    directories = [
        'data',  # –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        'logs',  # –¥–ª—è –ª–æ–≥–æ–≤
        'config',  # –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        os.path.dirname(config['database']['path'])  # –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î
    ]
    
    for directory in directories:
        if directory:
            os.makedirs(directory, exist_ok=True)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    
    print("üöÄ –ó–∞–ø—É—Å–∫ AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞...")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories(config)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging(config)
    
    logger = logging.getLogger(__name__)
    logger.info("–ó–∞–ø—É—Å–∫ AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞")
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—É—Å–∫–∞
        telegram_enabled = config.get('integrations', {}).get('telegram', {}).get('enabled', False)
        web_enabled = config.get('integrations', {}).get('web', {}).get('enabled', False)
        
        if telegram_enabled:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω Telegram
            bot_token = config['integrations']['telegram'].get('bot_token')
            if not bot_token or bot_token == 'YOUR_TELEGRAM_BOT_TOKEN':
                print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –≤ config.json")
                print("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –º–æ–∂–Ω–æ —É @BotFather –≤ Telegram")
                return
            
            print("üì± –ó–∞–ø—É—Å–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram...")
            companion = TelegramCompanion(config)
            await companion.start_telegram_bot()
            
        elif web_enabled:
            print("üåê –ó–∞–ø—É—Å–∫ —Å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º...")
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            print("‚ö†Ô∏è  –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
            
        else:
            print("üîß –ó–∞–ø—É—Å–∫ –≤ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
            companion = RealisticAICompanion(config)
            
            # –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await run_console_mode(companion)
    
    except KeyboardInterrupt:
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
        sys.exit(1)

async def run_console_mode(companion: RealisticAICompanion):
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("\nüí¨ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞")
    print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞, 'status' –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞")
    print("-" * 40)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    await companion.start()
    
    try:
        while True:
            user_input = input("\nüë§ –í—ã: ").strip()
            
            if user_input.lower() == 'exit':
                break
            elif user_input.lower() == 'status':
                state = await companion.optimized_ai.get_simple_mood_calculation(
                    companion.psychological_core
                )
                print(f"ü§ñ –°—Ç–∞—Ç—É—Å: {state['current_mood']}, —ç–Ω–µ—Ä–≥–∏—è: {state['energy_level']}/100")
                continue
            elif not user_input:
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await companion.process_user_message(user_input)
            print(f"ü§ñ AI: {response}")
            
    except KeyboardInterrupt:
        pass
    finally:
        companion.stop()

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        sys.exit(1)

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    ü§ñ AI-–ö–û–ú–ü–ê–ù–¨–û–ù                          ‚ïë
‚ïë                                                              ‚ïë
‚ïë  –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫              ‚ïë
‚ïë  —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º        ‚ïë
‚ïë                                                              ‚ïë
‚ïë  üß† –ñ–∏–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è  üí≠ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ                ‚ïë
‚ïë  üé≠ –°–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π  üìö –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

if __name__ == "__main__":
    print_banner()
    check_python_version()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())
