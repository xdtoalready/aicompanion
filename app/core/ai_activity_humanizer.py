# AI-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π

import asyncio
import logging
import json
from typing import Dict, Any, Optional
from datetime import datetime

class AIActivityHumanizer:
    """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∂–∏–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ AI"""
    
    def __init__(self, api_manager, character_loader, config: Dict[str, Any]):
        self.api_manager = api_manager
        self.character_loader = character_loader
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ö—ç—à –¥–ª—è –ø–æ—Ö–æ–∂–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (—ç–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã)
        self.humanization_cache = {}
        self.cache_ttl = 3600  # 1 —á–∞—Å
    
    async def humanize_activity(self, 
                              activity_type: str, 
                              start_time: str = None,
                              duration: float = 1.0,
                              importance: int = 5,
                              emotional_reason: str = "",
                              current_mood: str = "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ") -> str:
        """–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –∂–∏–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cache_key = f"{activity_type}_{start_time}_{current_mood}_{importance}"
        if cache_key in self.humanization_cache:
            cached_result, timestamp = self.humanization_cache[cache_key]
            if (datetime.now().timestamp() - timestamp) < self.cache_ttl:
                self.logger.debug(f"üíæ –í–∑—è–ª–∏ –∏–∑ –∫—ç—à–∞: {activity_type} -> {cached_result}")
                return cached_result
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character = self.character_loader.get_current_character()
            character_context = self._build_character_context(character)
            
            # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏
            humanization_prompt = self._build_humanization_prompt(
                activity_type, start_time, duration, importance, 
                emotional_reason, current_mood, character_context
            )
            
            # –ó–∞–ø—Ä–æ—Å –∫ AI (–∏—Å–ø–æ–ª—å–∑—É–µ–º analytics API –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ dialogue –ª–∏–º–∏—Ç–æ–≤)
            from .multi_api_manager import APIUsageType
            
            response = await self.api_manager.make_request(
                APIUsageType.ANALYTICS,
                model=self.config.get('ai', {}).get('model', 'deepseek/deepseek-chat'),
                messages=[
                    {"role": "system", "content": humanization_prompt},
                    {"role": "user", "content": f"–ì—É–º–∞–Ω–∏–∑–∏—Ä—É–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_type}"}
                ],
                max_tokens=150,
                temperature=0.8  # –ë–æ–ª—å—à–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
            )
            
            if not response or not response.choices:
                self.logger.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI –≥—É–º–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞")
                return self._get_fallback_description(activity_type, character)
            
            humanized = response.choices[0].message.content.strip()
            
            # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–µ–≥–æ
            humanized = self._clean_ai_response(humanized)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.humanization_cache[cache_key] = (humanized, datetime.now().timestamp())
            
            self.logger.info(f"üé≠ AI –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏—è: {activity_type} -> {humanized}")
            return humanized
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ AI –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return self._get_fallback_description(activity_type, character)
    
    def _build_character_context(self, character: Dict[str, Any]) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        
        if not character:
            return "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –¥–µ–≤—É—à–∫–∞"
        
        name = character.get('name', 'AI')
        age = character.get('age', 25)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã
        key_traits = character.get('personality', {}).get('key_traits', [])
        traits_text = ", ".join(key_traits[:3]) if key_traits else "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è"
        
        # –ò–Ω—Ç–µ—Ä–µ—Å—ã
        interests = character.get('interests', [])
        interests_text = ", ".join(interests[:4]) if interests else "–æ–±—â–µ–Ω–∏–µ"
        
        # –°—Ç–∏–ª—å —Ä–µ—á–∏
        speech_style = character.get('speech', {}).get('style', '—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π')
        
        context = f"""–ü–ï–†–°–û–ù–ê–ñ: {name} ({age} –ª–µ—Ç)
–•–ê–†–ê–ö–¢–ï–†: {traits_text}
–ò–ù–¢–ï–†–ï–°–´: {interests_text}
–°–¢–ò–õ–¨ –†–ï–ß–ò: {speech_style}"""

        # –°–ø–µ—Ü–∏—Ñ–∏–∫–∞ –¥–ª—è –ú–∞—Ä–∏–Ω
        if '–º–∞—Ä–∏–Ω' in name.lower() or '–∫–∏—Ç–∞–≥–∞–≤–∞' in name.lower():
            context += "\n–°–ü–ï–¶–ò–ê–õ–¨–ù–û–°–¢–¨: –∫–æ—Å–ø–ª–µ–π, –∞–Ω–∏–º–µ, —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å—Ç—é–º–æ–≤"
        
        return context
    
    def _build_humanization_prompt(self, activity_type: str, start_time: str, 
                                 duration: float, importance: int,
                                 emotional_reason: str, current_mood: str,
                                 character_context: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        current_hour = datetime.now().hour
        time_context = f"–°–µ–π—á–∞—Å {current_hour}:00"
        
        if start_time:
            time_context += f", –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ {start_time}"
        
        prompt = f"""–¢—ã AI-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –∂–∏–≤—ã–µ, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞.

{character_context}

–ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ {time_context}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —á–∞—Å–æ–≤
‚Ä¢ –í–∞–∂–Ω–æ—Å—Ç—å: {importance}/10
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_mood}
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {emotional_reason or '–æ–±—ã—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'}

–ü–†–ê–í–ò–õ–ê –ì–£–ú–ê–ù–ò–ó–ê–¶–ò–ò:
1. –ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞ ("–¥–µ–ª–∞—é", "–∑–∞–Ω–∏–º–∞—é—Å—å", "—Ä–∞–±–æ—Ç–∞—é")
2. –£—á–∏—Ç—ã–≤–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
3. –î–æ–±–∞–≤–ª—è–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É
4. –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
5. –ö–†–ê–¢–ö–û: 3-8 —Å–ª–æ–≤ –º–∞–∫—Å–∏–º—É–º
6. –ë–ï–ó —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤

–ü–†–ò–ú–ï–†–´ –ì–£–ú–ê–ù–ò–ó–ê–¶–ò–ò:
‚Ä¢ hobby -> "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º –∫–æ—Å–ø–ª–µ–µ–º"
‚Ä¢ work -> "—Å–∏–∂—É –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º –≤ –æ—Ñ–∏—Å–µ"  
‚Ä¢ rest -> "–≤–∞–ª—è—é—Å—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º –¥–æ–º–∞"
‚Ä¢ social -> "–±–æ–ª—Ç–∞—é —Å –ø–æ–¥—Ä—É–≥–∞–º–∏ –≤ –∫–∞—Ñ–µ"
‚Ä¢ cosplay -> "—à—å—é –∫–æ—Ä—Å–µ—Ç –¥–ª—è –®–∏–∑—É–∫—É-—Ç—è–Ω"

–ü—Ä–µ–≤—Ä–∞—â–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∂–∏–≤—É—é —Ñ—Ä–∞–∑—É, —É—á–∏—Ç—ã–≤–∞—è –í–°–ï –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –≤—ã—à–µ!"""

        return prompt
    
    def _clean_ai_response(self, response: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –æ—Ç–≤–µ—Ç AI –æ—Ç –ª–∏—à–Ω–µ–≥–æ"""
        
        # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏
        response = response.strip('"\'`')
        
        # –£–±–∏—Ä–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è AI
        if ":" in response:
            response = response.split(":", 1)[-1].strip()
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Ç–∏–ø–∞ "–Ø —Å–µ–π—á–∞—Å"
        prefixes_to_remove = [
            "—è —Å–µ–π—á–∞—Å ", "—Å–µ–π—á–∞—Å —è ", "–≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç ", 
            "–≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è ", "–Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç "
        ]
        
        response_lower = response.lower()
        for prefix in prefixes_to_remove:
            if response_lower.startswith(prefix):
                response = response[len(prefix):]
                break
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(response) > 50:
            response = response[:47] + "..."
        
        return response.strip()
    
    def _get_fallback_description(self, activity_type: str, character: Dict[str, Any]) -> str:
        """Fallback –æ–ø–∏—Å–∞–Ω–∏—è –µ—Å–ª–∏ AI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"""
        
        fallbacks = {
            "hobby": "–∑–∞–Ω–∏–º–∞—é—Å—å –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º",
            "work": "—Ä–∞–±–æ—Ç–∞—é",
            "rest": "–æ—Ç–¥—ã—Ö–∞—é –¥–æ–º–∞", 
            "social": "–æ–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
            "cosplay": "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º",
            "sleep": "–≥–æ—Ç–æ–≤–ª—é—Å—å –∫–æ —Å–Ω—É",
            "eat": "–∫—É—à–∞—é",
            "study": "—É—á—É—Å—å"
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ fallback –¥–ª—è –ú–∞—Ä–∏–Ω
        if character and '–º–∞—Ä–∏–Ω' in character.get('name', '').lower():
            marin_fallbacks = {
                "hobby": "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º –∫–æ—Å–ø–ª–µ–µ–º",
                "rest": "–ª–µ–∂—É –∏ —Å–º–æ—Ç—Ä—é –∞–Ω–∏–º–µ",
                "social": "–±–æ–ª—Ç–∞—é —Å –ø–æ–¥—Ä—É–≥–∞–º–∏ –æ –∫–æ—Å–ø–ª–µ–µ"
            }
            fallbacks.update(marin_fallbacks)
        
        return fallbacks.get(activity_type, f"–∑–∞–Ω–∏–º–∞—é—Å—å –¥–µ–ª–∞–º–∏ ({activity_type})")
    
    async def humanize_multiple_activities(self, activities: List[Dict[str, Any]]) -> List[str]:
        """–ì—É–º–∞–Ω–∏–∑–∏—Ä—É–µ—Ç —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"""
        
        results = []
        
        # Batch –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        for activity in activities:
            humanized = await self.humanize_activity(
                activity_type=activity.get('activity_type', 'unknown'),
                start_time=activity.get('start_time', ''),
                duration=activity.get('duration_hours', 1.0),
                importance=activity.get('importance', 5),
                emotional_reason=activity.get('emotional_reason', ''),
                current_mood=activity.get('mood_context', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ')
            )
            
            results.append(humanized)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.1)
        
        return results
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        self.humanization_cache.clear()
        self.logger.info("üóëÔ∏è –ö—ç—à AI –≥—É–º–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –æ—á–∏—â–µ–Ω")
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞"""
        
        # –£–±–∏—Ä–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
        current_time = datetime.now().timestamp()
        expired_keys = []
        
        for key, (_, timestamp) in self.humanization_cache.items():
            if (current_time - timestamp) > self.cache_ttl:
                expired_keys.append(key)
        
        for key in expired_keys:
            del self.humanization_cache[key]
        
        return {
            "cached_humanizations": len(self.humanization_cache),
            "cache_hit_rate": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥
            "expired_cleaned": len(expired_keys)
        }

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å
class EnhancedVirtualLifeManager:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —Å AI-–≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, db_path: str, character_loader, api_manager, config):
        # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ...
        self.activity_humanizer = AIActivityHumanizer(api_manager, character_loader, config)
    
    async def get_current_context_for_ai_enhanced(self) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≥—É–º–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏"""
        
        context_parts = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–ª–∞–Ω—ã
        ai_plans = self._get_today_ai_plans()
        current_time = datetime.now()
        
        # –ò—â–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        current_plan = None
        upcoming_plans = []
        
        for plan in ai_plans:
            try:
                plan_start = datetime.fromisoformat(plan['start_time'])
                plan_end = datetime.fromisoformat(plan['end_time'])
                
                if plan_start <= current_time < plan_end:
                    current_plan = plan
                elif plan_start > current_time:
                    upcoming_plans.append(plan)
            except Exception:
                continue
        
        # –ì—É–º–∞–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if current_plan:
            try:
                humanized_activity = await self.activity_humanizer.humanize_activity(
                    activity_type=current_plan['activity_type'],
                    start_time=current_plan['start_time'].split(' ')[1][:5],  # HH:MM
                    importance=current_plan.get('importance', 5),
                    emotional_reason=current_plan.get('emotional_reason', '')
                )
                
                time_left = (datetime.fromisoformat(current_plan['end_time']) - current_time).total_seconds() / 3600
                
                context_parts.append(f"–¢–ï–ö–£–©–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨: {humanized_activity}")
                context_parts.append(f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left:.1f} —á–∞—Å–æ–≤")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                context_parts.append(f"–ê–ö–¢–ò–í–ù–û–°–¢–¨: {current_plan['description']}")
        else:
            context_parts.append("–ê–ö–¢–ò–í–ù–û–°–¢–¨: –°–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–Ω–∞")
        
        # –ì—É–º–∞–Ω–∏–∑–∏—Ä—É–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞–Ω—ã
        if upcoming_plans:
            context_parts.append(f"\n–ú–û–ò –ë–õ–ò–ñ–ê–ô–®–ò–ï –ü–õ–ê–ù–´:")
            
            for plan in upcoming_plans[:3]:
                try:
                    plan_start = datetime.fromisoformat(plan['start_time'])
                    time_str = plan_start.strftime('%H:%M')
                    
                    # –ì—É–º–∞–Ω–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    humanized = await self.activity_humanizer.humanize_activity(
                        activity_type=plan['activity_type'],
                        start_time=time_str,
                        importance=plan.get('importance', 5)
                    )
                    
                    importance_marker = "üî•" if plan.get('importance', 5) >= 8 else "üìã"
                    context_parts.append(f"‚Ä¢ {time_str} {importance_marker} {humanized}")
                    
                except Exception as e:
                    # Fallback –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞: {e}")
                    context_parts.append(f"‚Ä¢ {plan.get('description', '–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–µ–ª–æ')}")
        
        return "\n".join(context_parts)