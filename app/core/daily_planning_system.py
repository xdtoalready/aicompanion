"""
–°–∏—Å—Ç–µ–º–∞ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –¥–Ω—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)
"""

import json
import logging
import sqlite3
import re
from datetime import datetime, timedelta, date
from typing import Dict, List, Any, Optional
from dataclasses import dataclass

@dataclass
class PlannedActivity:
    """–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    activity_type: str
    description: str
    start_hour: int
    start_minute: int = 0
    duration_hours: float = 1.0
    importance: int = 5
    flexibility: int = 5
    emotional_reason: str = ""
    can_reschedule: bool = True
    weather_dependent: bool = False

class DailyPlanningSystem:
    """–°–∏—Å—Ç–µ–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
    
    def __init__(self, db_path: str, api_manager, character_loader, config: Dict[str, Any]):
        self.db_path = db_path
        self.api_manager = api_manager
        self.character_loader = character_loader
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.last_planning_date = None
        
        # –°–æ–∑–¥–∞—ë–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        self._ensure_planning_tables()
    
    def _ensure_planning_tables(self):
        """–°–æ–∑–¥–∞—ë—Ç —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ planning_sessions
                cursor.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' AND name='planning_sessions'
                """)
                
                if not cursor.fetchone():
                    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É planning_sessions
                    cursor.execute("""
                        CREATE TABLE planning_sessions (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            character_id INTEGER DEFAULT 1,
                            planning_date DATE NOT NULL,
                            planning_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                            day_of_week TEXT,
                            character_mood TEXT,
                            weather_context TEXT,
                            total_activities_planned INTEGER DEFAULT 0,
                            planning_prompt TEXT,
                            ai_response TEXT,
                            success BOOLEAN DEFAULT TRUE
                        )
                    """)
                    self.logger.info("üìã –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ planning_sessions")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ virtual_activities
                columns_to_add = [
                    ("planning_date", "DATE"),
                    ("generated_by_ai", "BOOLEAN DEFAULT FALSE"),
                    ("flexibility", "INTEGER DEFAULT 5"),
                    ("importance", "INTEGER DEFAULT 5"),
                    ("planned_by", "TEXT DEFAULT 'auto'"),
                    ("emotional_reason", "TEXT"),
                    ("can_reschedule", "BOOLEAN DEFAULT TRUE")
                ]
                
                for column_name, column_def in columns_to_add:
                    try:
                        cursor.execute(f"ALTER TABLE virtual_activities ADD COLUMN {column_name} {column_def}")
                        self.logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {column_name}")
                    except sqlite3.OperationalError as e:
                        if "duplicate column name" in str(e).lower():
                            continue  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        else:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
                
                conn.commit()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def should_plan_today(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è"""
        
        today = date.today()
        
        # –£–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?
        if self.last_planning_date == today:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î –µ—Å—Ç—å –ª–∏ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT COUNT(*) FROM virtual_activities 
                    WHERE DATE(start_time) = ? AND generated_by_ai = 1
                """, (today.isoformat(),))
                
                existing_plans = cursor.fetchone()[0]
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–µ 3 –ø–ª–∞–Ω–æ–≤, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏
                if existing_plans >= 3:
                    self.logger.info(f"–ù–∞ {today} —É–∂–µ –µ—Å—Ç—å {existing_plans} –ò–ò-–ø–ª–∞–Ω–æ–≤")
                    self.last_planning_date = today
                    return False
                
                return True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–æ–≤: {e}")
            return True
    
    async def generate_daily_plan(self) -> bool:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        
        today = date.today()
        
        if not await self.should_plan_today():
            return False
        
        self.logger.info(f"üß†üìÖ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–ª–∞–Ω –Ω–∞ {today}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            planning_context = await self._build_planning_context()
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–º–ø—Ç
            planning_prompt = self._build_planning_prompt(planning_context)
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –ò–ò —á–µ—Ä–µ–∑ PLANNING API
            from .multi_api_manager import APIUsageType
            
            response = await self.api_manager.make_request(
                APIUsageType.PLANNING,
                model=self.config.get('ai', {}).get('model', 'deepseek/deepseek-chat'),
                messages=[
                    {"role": "system", "content": planning_prompt},
                    {"role": "user", "content": f"–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π –¥–µ–Ω—å –¥–ª—è {today.strftime('%A, %d.%m.%Y')}"}
                ],
                max_tokens=800,
                temperature=0.7
            )
            
            if not response or not response.choices:
                self.logger.error("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
                return False
            
            ai_response = response.choices[0].message.content.strip()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞
            success = await self._parse_and_save_plans_fixed(ai_response, planning_context)
            
            if success:
                self.last_planning_date = today
                self.logger.info("‚úÖ –ü–ª–∞–Ω –¥–Ω—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            
            return success
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞ –¥–Ω—è: {e}")
            return False
    
    async def _parse_and_save_plans_fixed(self, ai_response: str, context: Dict[str, Any]) -> bool:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤"""
        
        try:
            self.logger.debug(f"–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –ò–ò: {ai_response[:200]}...")
            
            # 1. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ (–º–µ–∂–¥—É ``` –∏–ª–∏ –ø—Ä—è–º–æ)
            json_text = self._extract_json_from_response(ai_response)
            
            if not json_text:
                self.logger.error("JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò")
                return False
            
            # 2. –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º JSON –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
            cleaned_json = self._clean_json_response(json_text)
            
            # 3. –ü–∞—Ä—Å–∏–º JSON
            try:
                plan_data = json.loads(cleaned_json)
            except json.JSONDecodeError as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                self.logger.error(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: {cleaned_json}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π JSON —Å–ª–æ–º–∞–Ω
                activities = self._parse_activities_from_broken_json(ai_response)
                if activities:
                    plan_data = {"activities": activities, "day_mood": "–æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å"}
                else:
                    return False
            
            activities = plan_data.get('activities', [])
            day_mood = plan_data.get('day_mood', '–æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å')
            
            if not activities:
                self.logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –ø–ª–∞–Ω–µ")
                return False
            
            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            today = date.today()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                cursor.execute("""
                    INSERT INTO planning_sessions
                    (planning_date, day_of_week, character_mood, 
                     total_activities_planned, planning_prompt, ai_response, success)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    today.isoformat(),
                    context['weekday'],
                    f"{context['current_mood']} -> {day_mood}",
                    len(activities),
                    self._build_planning_prompt(context)[:1000],
                    ai_response[:2000],
                    True
                ))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                saved_count = 0
                for i, activity in enumerate(activities):
                    try:
                        saved = self._save_single_activity(cursor, activity, today)
                        if saved:
                            saved_count += 1
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {i}: {e}")
                        continue
                
                conn.commit()
                
                self.logger.info(f"üìÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count}/{len(activities)} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ {today}")
                return saved_count > 0
                
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
            return False
    
    def _extract_json_from_response(self, response: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò"""
        
        # –ò—â–µ–º JSON –º–µ–∂–¥—É ```json –∏ ```
        json_match = re.search(r'```json\s*(\{.*?\})\s*```', response, re.DOTALL)
        if json_match:
            return json_match.group(1)
        
        # –ò—â–µ–º JSON –º–µ–∂–¥—É ``` –∏ ```
        json_match = re.search(r'```\s*(\{.*?\})\s*```', response, re.DOTALL)
        if json_match:
            return json_match.group(1)
        
        # –ò—â–µ–º –ø—Ä–æ—Å—Ç–æ JSON –±–ª–æ–∫
        json_match = re.search(r'(\{[^}]*"activities"[^}]*\})', response, re.DOTALL)
        if json_match:
            return json_match.group(1)
        
        # –ò—â–µ–º –æ—Ç –ø–µ—Ä–≤–æ–π { –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π }
        start = response.find('{')
        end = response.rfind('}')
        if start != -1 and end != -1 and end > start:
            return response[start:end+1]
        
        return ""
    
    def _clean_json_response(self, json_text: str) -> str:
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ—Ç JSON –æ—Ç —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        
        # –£–±–∏—Ä–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        json_text = re.sub(r'//.*', '', json_text)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º trailing commas
        json_text = re.sub(r',\s*}', '}', json_text)
        json_text = re.sub(r',\s*]', ']', json_text)
        
        # –ó–∞–º–µ–Ω—è–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        json_text = re.sub(r"'([^']*)':", r'"\1":', json_text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
        json_text = re.sub(r',+', ',', json_text)
        
        return json_text.strip()
    
    def _parse_activities_from_broken_json(self, response: str) -> List[Dict]:
        """Fallback: –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–∑ —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ JSON"""
        
        activities = []
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        activity_pattern = r'"activity_type":\s*"([^"]+)"[^}]*"description":\s*"([^"]+)"[^}]*"start_hour":\s*(\d+)'
        
        matches = re.findall(activity_pattern, response)
        
        for match in matches:
            activity_type, description, start_hour = match
            
            activities.append({
                "activity_type": activity_type,
                "description": description,
                "start_hour": int(start_hour),
                "start_minute": 0,
                "duration_hours": 2.0,
                "importance": 5,
                "flexibility": 5,
                "emotional_reason": "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                "can_reschedule": True
            })
        
        self.logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {len(activities)} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–ª–æ–º–∞–Ω–Ω–æ–≥–æ JSON")
        return activities
    
    def _save_single_activity(self, cursor, activity: Dict, today: date) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–Ω—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ë–î"""
        
        try:
            start_hour = activity.get('start_hour', 9)
            start_minute = activity.get('start_minute', 0)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            start_time = datetime.combine(
                today,
                datetime.min.time().replace(
                    hour=max(0, min(23, start_hour)),
                    minute=max(0, min(59, start_minute))
                )
            )
            
            duration = float(activity.get('duration_hours', 1.0))
            end_time = start_time + timedelta(hours=duration)
            
            cursor.execute("""
                INSERT INTO virtual_activities
                (character_id, activity_type, description, start_time, end_time,
                 status, planned_by, flexibility, importance, emotional_reason,
                 can_reschedule, planning_date, generated_by_ai)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                1,  # character_id
                activity.get('activity_type', 'unknown'),
                activity.get('description', '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'),
                start_time.isoformat(),
                end_time.isoformat(),
                'planned',
                'ai_planner',
                activity.get('flexibility', 5),
                activity.get('importance', 5),
                activity.get('emotional_reason', ''),
                activity.get('can_reschedule', True),
                today.isoformat(),
                True
            ))
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async def _build_planning_context(self) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        today = date.today()
        weekday = today.weekday()
        is_weekend = weekday >= 5
        
        weekday_names = [
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", 
            "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
        ]
        weekday_name = weekday_names[weekday]
        
        character = self.character_loader.get_current_character()
        character_context = self.character_loader.get_character_context_for_ai() if character else ""
        
        previous_plans = await self._get_recent_plans(days=7)
        pending_desires = await self._get_pending_desires()
        
        import random
        moods = ["—ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è", "—Å–ø–æ–∫–æ–π–Ω–∞—è", "–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∞—è", "—Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω–∞—è", "–∏–≥—Ä–∏–≤–∞—è"]
        current_mood = random.choice(moods)
        
        return {
            "date": today.isoformat(),
            "weekday": weekday_name,
            "is_weekend": is_weekend,
            "character_context": character_context,
            "current_mood": current_mood,
            "previous_plans": previous_plans,
            "pending_desires": pending_desires,
            "character_name": character.get('name', 'AI') if character else 'AI'
        }
    
    def _build_planning_prompt(self, context: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        character_name = context['character_name']
        weekday = context['weekday']
        is_weekend = context['is_weekend']
        current_mood = context['current_mood']
        character_context = context['character_context']
        
        base_prompt = f"""–¢—ã ‚Äî {character_name}, –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–≤–æ–π –¥–µ–Ω—å.

–ö–û–ù–¢–ï–ö–°–¢:
‚Ä¢ –î–µ–Ω—å: {weekday} ({'–≤—ã—Ö–æ–¥–Ω–æ–π' if is_weekend else '—Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å'})
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_mood}
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂: {character_context[:200]}...

–ü–†–ê–í–ò–õ–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø:
1. üïê –ü–ª–∞–Ω–∏—Ä—É–π —Å 8:00 –¥–æ 22:00 (4-7 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π)
2. üìã –ö–∞–∂–¥–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç–∏–ø, –æ–ø–∏—Å–∞–Ω–∏–µ, –≤—Ä–µ–º—è, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
3. ‚öñÔ∏è  –í–∞–∂–Ω–æ—Å—Ç—å (1-10) –∏ –≥–∏–±–∫–æ—Å—Ç—å (1-10) –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
4. üí≠ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ ("—Ö–æ—á—É –æ—Ç–¥–æ—Ö–Ω—É—Ç—å", "–Ω—É–∂–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å")
5. üé≠ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê (—Å—Ç—Ä–æ–≥–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞):
{{
  "day_mood": "–æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ—è –¥–Ω—è",
  "activities": [
    {{
      "activity_type": "work",
      "description": "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º",
      "start_hour": 9,
      "start_minute": 0,
      "duration_hours": 3.5,
      "importance": 8,
      "flexibility": 3,
      "emotional_reason": "–Ω—É–∂–Ω–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞",
      "can_reschedule": false
    }}
  ]
}}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û JSON, –Ω–∏–∫–∞–∫–æ–≥–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!"""
        
        return base_prompt
    
    async def _get_recent_plans(self, days: int = 7) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –ø–ª–∞–Ω—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            week_ago = (date.today() - timedelta(days=days)).isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT planning_date, day_of_week, total_activities_planned
                    FROM planning_sessions
                    WHERE planning_date >= ?
                    ORDER BY planning_date DESC
                    LIMIT 5
                """, (week_ago,))
                
                plans = cursor.fetchall()
                
                if not plans:
                    return "–ü—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤ –Ω–µ—Ç"
                
                summary = []
                for plan_date, weekday, activities_count in plans:
                    summary.append(f"{weekday}: {activities_count} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
                
                return "–ù–µ–¥–∞–≤–Ω–æ: " + ", ".join(summary)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–ª–∞–Ω–æ–≤: {e}")
            return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"
    
    async def _get_pending_desires(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∂–µ–ª–∞–Ω–∏—è"""
        return "–ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∂–µ–ª–∞–Ω–∏–π"