# –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏

import asyncio
import json
import logging
import random
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from openai import AsyncOpenAI
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger 

# –ò–º–ø–æ—Ä—Ç character_loader
from .character_loader import get_character_loader
from .virtual_life import VirtualLifeManager, VirtualActivity

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
from .daily_planning_system import DailyPlanningSystem

# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –≤–Ω—É—Ç—Ä–∏ core
from .psychology import PsychologicalCore
from .memory import AdvancedMemorySystem
from .ai_client import OptimizedAI
from .typing_simulator import TypingSimulator, TypingIndicator
from .multi_api_manager import create_api_manager, APIUsageType

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
from .memory_consolidation import (
    EmotionalMemoryConsolidator,
    enhance_existing_memories_with_emotions,
)

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from ..database.memory_manager_optimized import OptimizedMemoryManager


class RealisticAICompanion:
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""

    def __init__(self, config: Dict[str, Any]):
        self.config = config

        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

        # –ü–æ–ª—É—á–∞–µ–º character_loader —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é
        self.character_loader = get_character_loader()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.psychological_core = PsychologicalCore()

        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–º—è—Ç–∏
        db_path = config.get("database", {}).get("path", "data/companion.db")
        self.enhanced_memory = OptimizedMemoryManager(db_path)

        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.memory_system = AdvancedMemorySystem()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if not self.character_loader.get_current_character():
            profile_path = config.get("character_profile_path")
            profile_data = config.get("character_profile")

            if profile_path or profile_data:
                loaded = self.character_loader.load_character(
                    profile_data.get("id") if isinstance(profile_data, dict) else None,
                    profile_path=profile_path,
                    profile_data=profile_data,
                )
                if loaded:
                    self.logger.info(
                        f"–ó–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {loaded.get('name')}"
                    )
            else:
                available_chars = self.character_loader.get_available_characters()
                if available_chars:
                    self.character_loader.load_character(available_chars[0]["id"])
                    self.logger.info(
                        f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {available_chars[0]['name']}"
                    )

        # AI –∫–ª–∏–µ–Ω—Ç
        from .multi_api_manager import create_api_manager, APIUsageType
        self.api_manager = create_api_manager(config)

        self.daily_planner = DailyPlanningSystem(
            db_path=db_path,
            api_manager=self.api_manager,
            character_loader=self.character_loader,
            config=config
        )

        self.ai_client = self.api_manager.get_client(APIUsageType.DIALOGUE)

        # –ü–µ—Ä–µ–¥–∞—ë–º character_loader –≤ AI –∫–ª–∏–µ–Ω—Ç
        self.optimized_ai = OptimizedAI(self.api_manager, config, self.character_loader)

        # –°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        typing_config = config.get("typing", {})
        self.typing_simulator = TypingSimulator(
            {
                "typing_mode": typing_config.get("mode", "fast"),
                "show_typing_indicator": typing_config.get(
                    "show_typing_indicator", True
                ),
                "natural_pauses": typing_config.get("natural_pauses", True),
            }
        )
        self.typing_indicator = TypingIndicator()

        # –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –°–ù–ê–ß–ê–õ–ê
        self.virtual_life = VirtualLifeManager(
            db_path=config.get("database", {}).get("path", "data/companion.db"),
            character_loader=self.character_loader,
            api_manager=self.api_manager,
            config=config
        )

        # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º VirtualLifeManager –ü–û–°–õ–ï –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
        self.optimized_ai.virtual_life_manager = self.virtual_life

        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = AsyncIOScheduler()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_message_time = None
        self.daily_message_count = 0
        self.conversation_history = []

        self.emotional_memory_consolidator = EmotionalMemoryConsolidator(
            db_path=db_path, api_manager=self.api_manager, config=config
        )

        self.setup_realistic_scheduler()

    def get_current_character_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        character = self.character_loader.get_current_character()
        if not character:
            return {"name": "AI", "loaded": False, "error": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"}

        return {
            "name": character.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "age": character.get("age", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
            "description": character.get("personality", {}).get("description", ""),
            "relationship_type": character.get("current_relationship", {}).get(
                "type", "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π"
            ),
            "intimacy_level": character.get("current_relationship", {}).get(
                "intimacy_level", 0
            ),
            "loaded": True,
            "file_id": character.get("id", "unknown"),
        }

    def setup_realistic_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–µ–ª–∞–Ω–∏—è –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self.consciousness_cycle, IntervalTrigger(minutes=5), id="consciousness"
        )

        # –£—Ç—Ä–µ–Ω–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 6:00
        self.scheduler.add_job(
            self.morning_planning_cycle,
            CronTrigger(hour=6, minute=0),
            id="morning_planning"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.scheduler.add_job(
            self.check_and_generate_plans_on_startup,
            'date',
            run_date=datetime.now() + timedelta(seconds=10),
            id="startup_planning_check"
        )

        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏...
        self.scheduler.add_job(
            self.run_emotional_memory_consolidation,
            IntervalTrigger(hours=6),
            id="emotional_memory_consolidation",
        )

        self.scheduler.add_job(
            self.deep_emotional_consolidation,
            IntervalTrigger(days=1),
            id="deep_emotional_consolidation",
        )

        self.scheduler.add_job(
            self.analyze_recent_memories_emotions,
            IntervalTrigger(hours=2),
            id="emotion_analysis",
        )

        self.scheduler.add_job(
            self.update_virtual_life,
            IntervalTrigger(minutes=1),
            id="virtual_life_update",
        )

        self.scheduler.start()

    async def check_and_generate_plans_on_startup(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ, –µ—Å–ª–∏ –Ω–µ—Ç - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç"""
        try:
            self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            today_plans = await self._get_today_ai_plans()
            
            if not today_plans:
                self.logger.info("üìÖ –ü–ª–∞–Ω–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç - –∑–∞–ø—É—Å–∫–∞—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                success = await self.daily_planner.generate_daily_plan()
                
                if success:
                    self.logger.info("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                    if hasattr(self, 'allowed_users') and self.config.get('notify_about_emergency_planning', False):
                        emergency_messages = [
                            "–û–π! –Ø –ø—Ä–æ—Å–ø–∞–ª–∞ —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! üòÖ",
                            "–ù–æ —Å–µ–π—á–∞—Å –±—ã—Å—Ç—Ä–æ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å! ‚ú®", 
                            "–¢–µ–ø–µ—Ä—å –≤—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è! üí™"
                        ]
                        
                        await self.deliver_messages_with_timing(
                            emergency_messages,
                            await self.optimized_ai.get_simple_mood_calculation(self.psychological_core),
                            message_type="emergency_planning"
                        )
                else:
                    self.logger.warning("‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            else:
                self.logger.info(f"‚úÖ –ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –µ—Å—Ç—å: {len(today_plans)} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞–Ω–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

    async def morning_planning_cycle(self):
        """–£—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 6:00"""
        try:
            self.logger.info("üåÖ –£—Ç—Ä–µ–Ω–Ω–∏–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –¥–Ω—è
            success = await self.daily_planner.generate_daily_plan()
            
            if success:
                self.logger.info("‚úÖ –ü–ª–∞–Ω –¥–Ω—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                self.psychological_core.update_emotional_state("accomplishment", 1.0)
                
                # –ú–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–ª–∞–Ω–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                if hasattr(self, 'allowed_users') and self.config.get('behavior', {}).get('notify_about_plans', False):
                    await self._notify_users_about_daily_plan()
            else:
                self.logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –¥–Ω—è")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def _notify_users_about_daily_plan(self):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø–ª–∞–Ω–∞—Ö –Ω–∞ –¥–µ–Ω—å"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–ª–∞–Ω—ã
            today_plans = await self._get_today_ai_plans()
            
            if not today_plans:
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞–Ω–∞—Ö
            plan_messages = await self._generate_plan_announcement(today_plans)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ telegram_bot.py)
            await self.deliver_messages_with_timing(
                plan_messages, 
                await self.optimized_ai.get_simple_mood_calculation(self.psychological_core),
                message_type="plan_announcement"
            )
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞–Ω–∞—Ö: {e}")

    async def _get_today_ai_plans(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω—ã –ò–ò –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            import sqlite3
            from datetime import date
            
            today = date.today().isoformat()
            
            with sqlite3.connect(self.enhanced_memory.db_manager.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT activity_type, description, start_time, importance, flexibility
                    FROM virtual_activities
                    WHERE planning_date = ? AND generated_by_ai = 1
                    ORDER BY start_time ASC
                """, (today,))
                
                plans = []
                for row in cursor.fetchall():
                    plans.append({
                        'type': row[0],
                        'description': row[1], 
                        'start_time': row[2],
                        'importance': row[3],
                        'flexibility': row[4]
                    })
                
                return plans
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤: {e}")
            return []
        
    async def _generate_plan_announcement(self, plans: List[Dict]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–ª–∞–Ω–∞—Ö"""
        
        if not plans:
            return ["–°–µ–≥–æ–¥–Ω—è —É –º–µ–Ω—è —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å! üòä"]
        
        character = self.character_loader.get_current_character()
        character_name = character.get('name', 'AI') if character else 'AI'
        
        messages = [
            f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è –Ø —É–∂–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∞ –¥–µ–Ω—å!"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞–Ω—ã
        important_plans = [p for p in plans if p['importance'] >= 7]
        casual_plans = [p for p in plans if p['importance'] < 7]
        
        if important_plans:
            important_desc = []
            for plan in important_plans[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –≤–∞–∂–Ω—ã—Ö
                time_str = plan['start_time'].split(' ')[1][:5]  # HH:MM
                important_desc.append(f"{time_str} - {plan['description']}")
            
            messages.append(f"–ì–ª–∞–≤–Ω—ã–µ –¥–µ–ª–∞:\n" + "\n".join(important_desc))
        
        if casual_plans:
            messages.append(f"–ê –µ—â—ë –ø–ª–∞–Ω–∏—Ä—É—é {casual_plans[0]['description'].lower()} –∏ –µ—â—ë –∫–æ–µ-—á—Ç–æ! ‚ú®")
        
        # –ü–µ—Ä—Å–æ–Ω–∞–∂-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        if character and '–º–∞—Ä–∏–Ω' in character_name.lower():
            messages.append("–ú–æ–∂–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—à—å—Å—è –∫ –∫–∞–∫–∏–º-—Ç–æ –ø–ª–∞–Ω–∞–º? –ë—ã–ª–æ –±—ã –≤–µ—Å–µ–ª–æ! üíï")
        else:
            messages.append("–†–∞—Å—Å–∫–∞–∂–∏ –∫–∞–∫ –¥–µ–ª–∞ —É —Ç–µ–±—è! –ú–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å? üòä")
        
        return messages
    
    async def force_generate_daily_plan(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –¥–Ω—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            return await self.daily_planner.generate_daily_plan()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
    
    def get_planning_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            import sqlite3
            from datetime import date, timedelta
            
            db_path = self.enhanced_memory.db_manager.db_path
            
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                cursor.execute("SELECT COUNT(*) FROM planning_sessions")
                total_sessions = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM virtual_activities WHERE generated_by_ai = 1")
                total_ai_activities = cursor.fetchone()[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                week_ago = (date.today() - timedelta(days=7)).isoformat()
                cursor.execute("""
                    SELECT COUNT(*) FROM planning_sessions 
                    WHERE planning_date >= ?
                """, (week_ago,))
                weekly_sessions = cursor.fetchone()[0]
                
                # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                cursor.execute("""
                    SELECT COUNT(*) FROM planning_sessions 
                    WHERE success = 1 AND planning_date >= ?
                """, (week_ago,))
                successful_sessions = cursor.fetchone()[0]
                
                # –ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                today = date.today().isoformat()
                cursor.execute("""
                    SELECT COUNT(*) FROM virtual_activities
                    WHERE planning_date = ? AND generated_by_ai = 1
                """, (today,))
                today_plans = cursor.fetchone()[0]
                
                return {
                    "total_sessions": total_sessions,
                    "total_ai_activities": total_ai_activities,
                    "weekly_sessions": weekly_sessions,
                    "successful_sessions": successful_sessions,
                    "today_plans": today_plans,
                    "success_rate": (successful_sessions / weekly_sessions * 100) if weekly_sessions > 0 else 0
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return {
                "total_sessions": 0,
                "total_ai_activities": 0,
                "weekly_sessions": 0,
                "successful_sessions": 0,
                "today_plans": 0,
                "success_rate": 0,
                "error": str(e)
            }

    async def run_memory_consolidation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        try:
            self.logger.info("üß† –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
            await self.emotional_memory_consolidator.run_emotional_consolidation_cycle()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")

    async def deep_memory_consolidation(self):
        """–ì–ª—É–±–æ–∫–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –û–±—ã—á–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
            await self.emotional_memory_consolidator.run_emotional_consolidation_cycle()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            await self._analyze_memory_patterns()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")

    async def run_emotional_memory_consolidation(self):
        """–ó–∞–ø—É—Å–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏"""
        try:
            self.logger.info("üß†üíï –ó–∞–ø—É—Å–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏...")
            await self.emotional_memory_consolidator.run_emotional_consolidation_cycle()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")

    async def deep_emotional_consolidation(self):
        """–ì–ª—É–±–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
            await self.emotional_memory_consolidator.run_emotional_consolidation_cycle()

            # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._analyze_emotional_patterns()

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫ —Å—Ç–∞—Ä—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await enhance_existing_memories_with_emotions(
                self.enhanced_memory.db_manager.db_path, self.ai_client, self.config
            )

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")

    async def analyze_recent_memories_emotions(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –£–ª—É—á—à–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫
            await enhance_existing_memories_with_emotions(
                self.enhanced_memory.db_manager.db_path, self.ai_client, self.config
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {e}")

    async def _analyze_emotional_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

        try:
            import sqlite3

            with sqlite3.connect(self.enhanced_memory.db_manager.db_path) as conn:
                cursor = conn.cursor()

                # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
                month_ago = (datetime.now() - timedelta(days=30)).isoformat()
                cursor.execute(
                    """
                    SELECT emotion_type, COUNT(*), AVG(emotional_intensity), AVG(importance)
                    FROM memories 
                    WHERE created_at >= ? AND emotion_type IS NOT NULL
                    GROUP BY emotion_type
                    ORDER BY COUNT(*) DESC
                """,
                    (month_ago,),
                )

                emotional_patterns = cursor.fetchall()

                if not emotional_patterns:
                    return

                # –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è AI
                pattern_text = "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –º–µ—Å—è—Ü:\n"
                for emotion, count, avg_intensity, avg_importance in emotional_patterns:
                    pattern_text += f"- {emotion}: {count} —Ä–∞–∑ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {avg_intensity:.1f}, –≤–∞–∂–Ω–æ—Å—Ç—å {avg_importance:.1f})\n"

                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
                analysis_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–Ω–∏–∏ —Å AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–º.
                
–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç?
2. –ß—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
3. –ö–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ?
4. –ù–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º?

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç."""

                response = await self.ai_client.chat.completions.create(
                    model=self.config.get("ai", {}).get("model"),
                    messages=[
                        {"role": "system", "content": analysis_prompt},
                        {"role": "user", "content": pattern_text},
                    ],
                    max_tokens=400,
                    temperature=0.3,
                )

                analysis = response.choices[0].message.content.strip()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                cursor.execute(
                    """
                    INSERT INTO memories 
                    (character_id, memory_type, content, importance, 
                     emotional_intensity, emotion_type, is_consolidated)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """,
                    (
                        1,
                        "emotional_analysis",
                        f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {analysis}",
                        9,  # –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
                        7.0,  # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
                        "analytical",
                        True,
                    ),
                )

                conn.commit()

                self.logger.info("üîçüíï –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

    async def _analyze_memory_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        consolidated_memories = self._get_consolidated_memories()

        if not consolidated_memories:
            return

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        analysis_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
        –û–ø—Ä–µ–¥–µ–ª–∏:
        1. –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        2. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –æ–±—â–µ–Ω–∏—è  
        3. –ß—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
        4. –ö–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        
        –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç."""

        try:
            response = await self.ai_client.chat.completions.create(
                model=self.config.get("ai", {}).get("model"),
                messages=[
                    {"role": "system", "content": analysis_prompt},
                    {
                        "role": "user",
                        "content": f"–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{consolidated_memories}",
                    },
                ],
                max_tokens=300,
                temperature=0.3,
            )

            analysis = response.choices[0].message.content.strip()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            self._save_memory_analysis(analysis)

            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

    def _get_consolidated_memories(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            import sqlite3

            with sqlite3.connect(self.enhanced_memory.db_manager.db_path) as conn:
                cursor = conn.cursor()

                cursor.execute(
                    """
                    SELECT content FROM memories 
                    WHERE is_consolidated = 1 
                    AND consolidation_level IN ('medium_term', 'long_term')
                    ORDER BY importance DESC, last_consolidated DESC
                    LIMIT 20
                """
                )

                memories = [row[0] for row in cursor.fetchall()]
                return "\n".join(memories)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return ""

    def _save_memory_analysis(self, analysis: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏"""
        try:
            self.enhanced_memory.add_conversation(
                "[–ê–ù–ê–õ–ò–ó_–ü–ê–ú–Ø–¢–ò]", [analysis], "analytical", "insightful"
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")

    async def consciousness_cycle(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞–º–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""

        try:
            # –û—Ç–º–µ—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            self._last_consciousness_check = datetime.now()
            
            current_time = datetime.now()
            self.logger.info(f"üß† [CONSCIOUSNESS] –¶–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω –≤ {current_time.strftime('%H:%M:%S')}")

            # –ù–µ –∞–∫—Ç–∏–≤–µ–Ω –Ω–æ—á—å—é (23:00 - 7:00)
            if current_time.hour >= 23 or current_time.hour < 7:
                self.logger.info("üò¥ [CONSCIOUSNESS] –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –ø—Ä–æ–ø—É—Å–∫–∞—é")
                return

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
            max_daily = self.config.get("behavior", {}).get("max_daily_initiatives", 8)
            if self.daily_message_count >= max_daily:
                self.logger.info(f"üìä [CONSCIOUSNESS] –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {self.daily_message_count}/{max_daily}")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.decay_emotions(30)  # 30 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ

            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (—ç–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã)
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )

            # –†–µ—à–µ–Ω–∏–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ
            should_initiate = await self._should_initiate_realistically(current_state)

            if should_initiate:
                self.logger.info("üöÄ [CONSCIOUSNESS] –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
                await self.send_initiative_messages(current_state)
                self.daily_message_count += 1
            else:
                self.logger.info("üòê [CONSCIOUSNESS] –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞")

            # –ò–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if random.random() < 0.15:  # 15% —à–∞–Ω—Å
                self.logger.info("üé≤ [CONSCIOUSNESS] –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∂–∏–∑–Ω–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ...")
                await self.generate_life_event()

        except Exception as e:
            self.logger.error(f"üí• [CONSCIOUSNESS] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–∑–Ω–∞–Ω–∏—è: {e}", exc_info=True)

    async def _should_initiate_realistically(self, current_state: Dict) -> bool:
        """—Ä–µ—à–µ–Ω–∏–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

        initiative_desire = current_state.get("initiative_desire", 0)
        current_hour = datetime.now().hour
        is_weekend = datetime.now().weekday() >= 5
        activity_context = current_state.get("activity_context")

        self.logger.info(f"ü§î –ü–†–û–í–ï–†–ö–ê –ò–ù–ò–¶–ò–ê–¢–ò–í–´:")
        self.logger.info(f"   –ñ–µ–ª–∞–Ω–∏–µ: {initiative_desire}/10")
        self.logger.info(f"   –ß–∞—Å: {current_hour}")
        self.logger.info(f"   –í—ã—Ö–æ–¥–Ω—ã–µ: {is_weekend}")
        self.logger.info(f"   –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_context}")
        self.logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {self.daily_message_count}")

        # 1. –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - —Å–ø–∏–º (–Ω–æ –æ—Å–ª–∞–±–ª—è–µ–º)
        if current_hour >= 24 or current_hour < 6:  # –ë—ã–ª–æ 23-7, —Å—Ç–∞–ª–æ 0-6
            self.logger.info("üò¥ –°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ/—Ä–∞–Ω–æ - –Ω–µ –ø–∏—à–µ–º")
            return False

        # 2. –°–ò–õ–¨–ù–û –û–°–õ–ê–ë–õ–Ø–ï–ú –±–∞–∑–æ–≤—ã–π –ø–æ—Ä–æ–≥! 
        if initiative_desire < 1:  # –ë—ã–ª–æ 2, —Å—Ç–∞–ª–æ 1!
            self.logger.info(f"üòê –û—á–µ–Ω—å —Å–ª–∞–±–æ–µ –∂–µ–ª–∞–Ω–∏–µ: {initiative_desire} < 1")
            return False

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–°–ò–õ–¨–ù–û –æ—Å–ª–∞–±–ª—è–µ–º!)
        min_hours = self.config.get("behavior", {}).get("min_hours_between_initiatives", 2)

        if self.last_message_time:
            hours_since = (datetime.now() - self.last_message_time).total_seconds() / 3600
            if hours_since < min_hours:
                self.logger.info(f"‚è∞ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ: {hours_since:.1f}—á < {min_hours:.1f}—á")
                return False
            else:
                self.logger.info(f"‚úÖ –í—Ä–µ–º—è –ø—Ä–æ—à–ª–æ: {hours_since:.1f}—á >= {min_hours:.1f}—á")

        # 4. –ë–æ–Ω—É—Å—ã –∫ –∂–µ–ª–∞–Ω–∏—é (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º!)
        bonus_reasons = []
        original_desire = initiative_desire

        # –ß–∞—Å—ã –ø–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–∞—Å—à–∏—Ä—è–µ–º!)
        peak_hours = [8, 9, 12, 13, 16, 17, 19, 20, 21, 22]  # –ë–æ–ª—å—à–µ —á–∞—Å–æ–≤!
        if current_hour in peak_hours:
            initiative_desire += 2  # –ë—ã–ª–æ 1, —Å—Ç–∞–ª–æ 2!
            bonus_reasons.append(f"—á–∞—Å –ø–∏–∫ ({current_hour})")

        # –í—ã—Ö–æ–¥–Ω—ã–µ - –ù–ê–ú–ù–û–ì–û –∞–∫—Ç–∏–≤–Ω–µ–µ
        if is_weekend:
            initiative_desire += 3  # –ë—ã–ª–æ 1.5, —Å—Ç–∞–ª–æ 3!
            bonus_reasons.append("–≤—ã—Ö–æ–¥–Ω—ã–µ")

        # –í–µ—á–µ—Ä–Ω–µ–µ –≤—Ä–µ–º—è
        if 18 <= current_hour <= 22:
            initiative_desire += 2  # –ë—ã–ª–æ 1, —Å—Ç–∞–ª–æ 2!
            bonus_reasons.append("–≤–µ—á–µ—Ä")

        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character = self.character_loader.get_current_character()
        if character:
            name = character.get("name", "").lower()
            if "–º–∞—Ä–∏–Ω" in name or "–∫–∏—Ç–∞–≥–∞–≤–∞" in name:
                initiative_desire += 2  # –ë—ã–ª–æ 1, —Å—Ç–∞–ª–æ 2!
                bonus_reasons.append("–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ (–ú–∞—Ä–∏–Ω)")

        if bonus_reasons:
            self.logger.info(f"‚ú® –ë–æ–Ω—É—Å—ã: {', '.join(bonus_reasons)}")
            self.logger.info(f"   –ñ–µ–ª–∞–Ω–∏–µ: {original_desire} ‚Üí {initiative_desire}")

        # –†–∞–±–æ—á–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ (–æ—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è)
        work_penalty = 0
        if activity_context == "work_time" and not is_weekend:
            # –¢–æ–ª—å–∫–æ 30% –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
            if random.random() < 0.3:
                self.logger.info("üíº –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - –±–ª–æ–∫–∏—Ä—É–µ–º (30% —à–∞–Ω—Å)")
                return False
            work_penalty = 0.3
            self.logger.info("üíº –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –Ω–æ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É")

        # 6. –ù–û–í–ê–Ø –æ–±–ª–µ–≥—á–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞!
        adjusted_desire = initiative_desire - work_penalty

        # –ù–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞: –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —à–∞–Ω—Å–æ–≤!
        chance = min(0.95, adjusted_desire / 6)  # –ë—ã–ª–æ /10, —Å—Ç–∞–ª–æ /6!
        random_roll = random.random()

        should_send = random_roll < chance

        self.logger.info(f"üé≤ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:")
        self.logger.info(f"   –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∂–µ–ª–∞–Ω–∏–µ: {adjusted_desire:.1f}")
        self.logger.info(f"   –®–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∫–∏: {chance:.2f} ({chance*100:.0f}%)")
        self.logger.info(f"   –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random_roll:.2f}")
        self.logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –û–¢–ü–†–ê–í–õ–Ø–ï–ú!' if should_send else '‚ùå –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º'}")

        if should_send:
            self.logger.info(f"üöÄ –ò–ù–ò–¶–ò–ê–¢–ò–í–ê –û–î–û–ë–†–ï–ù–ê! –ñ–µ–ª–∞–Ω–∏–µ {adjusted_desire:.1f}, –±–æ–Ω—É—Å—ã: {bonus_reasons}")

        return should_send

    async def update_virtual_life(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            changes = self.virtual_life.check_and_update_activities()

            if changes["status_changed"]:
                if changes["activity_started"]:
                    activity = changes["activity_started"]
                    await self._notify_activity_start(activity)

                if changes["activity_ended"]:
                    activity = changes["activity_ended"]
                    await self.virtual_life._notify_activity_end(activity)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏: {e}")

    async def _notify_activity_start(self, activity: VirtualActivity):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–∞—á–∞–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å AI-–≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–µ–π"""
        
        try:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º AI-–≥—É–º–∞–Ω–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è
            if hasattr(self.virtual_life, 'activity_humanizer') and self.virtual_life.activity_humanizer:
                try:
                    # –ì—É–º–∞–Ω–∏–∑–∏—Ä—É–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    humanized_activity = await self.virtual_life.activity_humanizer.humanize_activity(
                        activity_type=activity.activity_type,
                        start_time=activity.start_time.strftime('%H:%M'),
                        duration=float((activity.end_time - activity.start_time).total_seconds() / 3600),
                        importance=getattr(activity, 'importance', 5),
                        emotional_reason=getattr(activity, 'emotional_reason', ''),
                        current_mood="–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ"
                    )
                    
                    self.logger.info(f"üé≠ AI –≥—É–º–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–ª –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity.activity_type} -> {humanized_activity}")
                    
                    # –¢–∞–∫–∂–µ –≥—É–º–∞–Ω–∏–∑–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    duration_descriptions = {
                        "personal": "–∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ª–∏—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏",
                        "work": "—Ä–∞–±–æ—Ç–∞—Ç—å/—É—á–∏—Ç—å—Å—è", 
                        "hobby": "–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ö–æ–±–±–∏",
                        "rest": "–æ—Ç–¥—ã—Ö–∞—Ç—å",
                        "social": "–æ–±—â–∞—Ç—å—Å—è —Å –¥—Ä—É–∑—å—è–º–∏",
                        "cosplay": "—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º",
                        "study": "—É—á–∏—Ç—å—Å—è",
                        "gaming": "–∏–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—ã"
                    }
                    
                    duration_desc = duration_descriptions.get(activity.activity_type, activity.activity_type)
                    
                    messages = [
                        f"–ö—Å—Ç–∞—Ç–∏, —è —Å–µ–π—á–∞—Å {humanized_activity}! ‚ú®",
                        f"–ë—É–¥—É {duration_desc} –¥–æ {activity.end_time.strftime('%H:%M')}",
                        "–ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –º–Ω–µ –ø–∏—Å–∞—Ç—å! üíï"
                    ]
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ AI-–≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {e}")
                    # Fallback –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
                    messages = self._get_fallback_activity_messages(activity)
            else:
                self.logger.warning("AI-–≥—É–º–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
                # Fallback –Ω–∞ —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
                messages = self._get_fallback_activity_messages(activity)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            if hasattr(self, "allowed_users") and self.allowed_users:
                current_state = await self.optimized_ai.get_simple_mood_calculation(
                    self.psychological_core
                )

                for user_id in self.allowed_users:
                    try:
                        await self.send_telegram_messages_with_timing(
                            chat_id=user_id,
                            messages=messages,
                            current_state=current_state,
                        )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
                        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _notify_activity_start: {e}")

    def _get_fallback_activity_messages(self, activity: VirtualActivity) -> List[str]:
        """Fallback —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        character = self.character_loader.get_current_character()
        
        # –ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
        activity_descriptions = {
            "personal": "–∑–∞–Ω–∏–º–∞—é—Å—å –ª–∏—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏",
            "work": "—Ä–∞–±–æ—Ç–∞—é/—É—á—É—Å—å", 
            "hobby": "–∑–∞–Ω–∏–º–∞—é—Å—å –ª—é–±–∏–º—ã–º —Ö–æ–±–±–∏",
            "rest": "–æ—Ç–¥—ã—Ö–∞—é –¥–æ–º–∞",
            "social": "–æ–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
            "cosplay": "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º",
            "study": "–∏–∑—É—á–∞—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
            "gaming": "–∏–≥—Ä–∞—é –≤ –∏–≥—Ä—ã",
            "reading": "—á–∏—Ç–∞—é –∫–Ω–∏–≥—É/–º–∞–Ω–≥—É",
            "shopping": "—Ö–æ–∂—É –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
            "exercise": "–¥–µ–ª–∞—é –∑–∞—Ä—è–¥–∫—É",
            "cooking": "–≥–æ—Ç–æ–≤–ª—é —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ",
            "cleaning": "–Ω–∞–≤–æ–∂—É –ø–æ—Ä—è–¥–æ–∫ –¥–æ–º–∞"
        }
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ú–∞—Ä–∏–Ω
        if character and '–º–∞—Ä–∏–Ω' in character.get('name', '').lower():
            marin_descriptions = {
                "hobby": "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º –∫–æ—Å–ø–ª–µ–µ–º",
                "personal": "–∑–∞–Ω–∏–º–∞—é—Å—å –∫–æ—Å–ø–ª–µ–π-–ø—Ä–æ–µ–∫—Ç–∞–º–∏",
                "rest": "—Å–º–æ—Ç—Ä—é –∞–Ω–∏–º–µ –∏ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—Å—å",
                "social": "–±–æ–ª—Ç–∞—é —Å –ø–æ–¥—Ä—É–≥–∞–º–∏ –æ –∫–æ—Å–ø–ª–µ–µ",
                "study": "–∏–∑—É—á–∞—é –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –¥–ª—è –∫–æ—Å–ø–ª–µ—è",
                "shopping": "–∏—â—É –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∫–æ—Å—Ç—é–º–æ–≤"
            }
            activity_descriptions.update(marin_descriptions)
        
        # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        duration_descriptions = {
            "personal": "–∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ª–∏—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏",
            "work": "—Ä–∞–±–æ—Ç–∞—Ç—å", 
            "hobby": "–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º",
            "rest": "–æ—Ç–¥—ã—Ö–∞—Ç—å",
            "social": "–æ–±—â–∞—Ç—å—Å—è",
            "cosplay": "—à–∏—Ç—å –∏ —Ç–≤–æ—Ä–∏—Ç—å",
            "study": "—É—á–∏—Ç—å—Å—è",
            "gaming": "–∏–≥—Ä–∞—Ç—å",
            "reading": "—á–∏—Ç–∞—Ç—å",
            "shopping": "–ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º",
            "exercise": "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è",
            "cooking": "–≥–æ—Ç–æ–≤–∏—Ç—å",
            "cleaning": "—É–±–∏—Ä–∞—Ç—å—Å—è"
        }
        
        # –î–ª—è –ú–∞—Ä–∏–Ω - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if character and '–º–∞—Ä–∏–Ω' in character.get('name', '').lower():
            marin_durations = {
                "hobby": "—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ—Å–ø–ª–µ–µ–º",
                "personal": "–∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∫–æ—Å–ø–ª–µ–π-–ø—Ä–æ–µ–∫—Ç–∞–º–∏", 
                "rest": "—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∏–º–µ",
                "social": "–±–æ–ª—Ç–∞—Ç—å —Å –ø–æ–¥—Ä—É–≥–∞–º–∏",
                "study": "–∏–∑—É—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
            }
            duration_descriptions.update(marin_durations)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è
        activity_desc = activity_descriptions.get(activity.activity_type, activity.description or activity.activity_type)
        duration_desc = duration_descriptions.get(activity.activity_type, activity.activity_type)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            f"–ö—Å—Ç–∞—Ç–∏, —è —Å–µ–π—á–∞—Å {activity_desc}! ‚ú®",
            f"–ë—É–¥—É {duration_desc} –¥–æ {activity.end_time.strftime('%H:%M')}",
            "–ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –º–Ω–µ –ø–∏—Å–∞—Ç—å! üíï"
        ]
        
        return messages

    async def _notify_activity_end(self, activity: VirtualActivity):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–µ–π"""
        
        try:
            # –ì—É–º–∞–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            if hasattr(self.virtual_life, 'activity_humanizer') and self.virtual_life.activity_humanizer:
                try:
                    humanized_activity = await self.virtual_life.activity_humanizer.humanize_activity(
                        activity_type=activity.activity_type,
                        start_time=activity.start_time.strftime('%H:%M'),
                        importance=getattr(activity, 'importance', 5)
                    )
                    
                    messages = [
                        f"–Ø –∑–∞–∫–æ–Ω—á–∏–ª–∞ {humanized_activity}! ‚úÖ",
                        "–¢–µ–ø–µ—Ä—å —è —Å–≤–æ–±–æ–¥–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üòä"
                    ]
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ AI-–≥—É–º–∞–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
                    messages = self._get_fallback_completion_messages(activity)
            else:
                messages = self._get_fallback_completion_messages(activity)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if hasattr(self, "allowed_users") and self.allowed_users:
                current_state = await self.optimized_ai.get_simple_mood_calculation(
                    self.psychological_core
                )

                for user_id in self.allowed_users:
                    try:
                        await self.send_telegram_messages_with_timing(
                            chat_id=user_id,
                            messages=messages,
                            current_state=current_state,
                        )
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {e}")
                        
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ _notify_activity_end: {e}")

    def _get_fallback_completion_messages(self, activity: VirtualActivity) -> List[str]:
        """Fallback —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        
        character = self.character_loader.get_current_character()
        
        completion_descriptions = {
            "personal": "–∑–∞–∫–æ–Ω—á–∏–ª–∞ —Å –ª–∏—á–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏",
            "work": "–∑–∞–∫–æ–Ω—á–∏–ª–∞ —Ä–∞–±–æ—Ç–∞—Ç—å/—É—á–∏—Ç—å—Å—è",
            "hobby": "–∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å", 
            "rest": "–æ—Ç–¥–æ—Ö–Ω—É–ª–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å",
            "social": "–ø–æ–æ–±—â–∞–ª–∞—Å—å —Å –¥—Ä—É–∑—å—è–º–∏",
            "cosplay": "–ø–æ—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º",
            "study": "–∑–∞–∫–æ–Ω—á–∏–ª–∞ –∏–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª",
            "gaming": "–Ω–∞–∏–≥—Ä–∞–ª–∞—Å—å –≤ –∏–≥—Ä—ã",
            "reading": "–¥–æ—á–∏—Ç–∞–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –≥–ª–∞–≤—É",
            "shopping": "–∑–∞–∫–æ–Ω—á–∏–ª–∞ —Å –ø–æ–∫—É–ø–∫–∞–º–∏",
            "exercise": "–∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
            "cooking": "–ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ —á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ",
            "cleaning": "–Ω–∞–≤–µ–ª–∞ –ø–æ—Ä—è–¥–æ–∫"
        }
        
        # –î–ª—è –ú–∞—Ä–∏–Ω
        if character and '–º–∞—Ä–∏–Ω' in character.get('name', '').lower():
            marin_completions = {
                "hobby": "–ø–æ—Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞–¥ –∫–æ—Å–ø–ª–µ–µ–º",
                "personal": "–∑–∞–≤–µ—Ä—à–∏–ª–∞ –∫–æ—Å–ø–ª–µ–π-–ø—Ä–æ–µ–∫—Ç—ã",
                "rest": "–ø–æ—Å–º–æ—Ç—Ä–µ–ª–∞ –∞–Ω–∏–º–µ",
                "social": "–ø–æ–±–æ–ª—Ç–∞–ª–∞ —Å –ø–æ–¥—Ä—É–≥–∞–º–∏ –æ –∫–æ—Å–ø–ª–µ–µ",
                "study": "–∏–∑—É—á–∏–ª–∞ –Ω–æ–≤—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"
            }
            completion_descriptions.update(marin_completions)
        
        completion_desc = completion_descriptions.get(
            activity.activity_type, 
            activity.description or f"–∑–∞–≤–µ—Ä—à–∏–ª–∞ {activity.activity_type}"
        )
        
        return [
            f"–Ø {completion_desc}! ‚úÖ",
            "–¢–µ–ø–µ—Ä—å —è —Å–≤–æ–±–æ–¥–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è! üòä"
        ]

    async def create_automatic_schedule(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""

        character = character_loader.get_current_character()
        if not character:
            return

        name = character.get("name", "").lower()

        # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        base_schedule = [
            ("work", "—Ä–∞–±–æ—Ç–∞—é/—É—á—É—Å—å", 9, 5, 1.0, 40),  # 9 —É—Ç—Ä–∞, 5 —á–∞—Å–æ–≤
            ("rest", "–æ—Ç–¥—ã—Ö–∞—é –¥–æ–º–∞", 14, 1, 0.5, 10),  # 14:00, 1 —á–∞—Å
            ("hobby", "–∑–∞–Ω–∏–º–∞—é—Å—å —Ö–æ–±–±–∏", 16, 2, 2.0, 30),  # 16:00, 2 —á–∞—Å–∞
            ("social", "–æ–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", 19, 1.5, 1.5, 20),  # 19:00, 1.5 —á–∞—Å–∞
        ]

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ú–∞—Ä–∏–Ω
        if "–º–∞—Ä–∏–Ω" in name or "–∫–∏—Ç–∞–≥–∞–≤–∞" in name:
            cosplay_schedule = [
                ("cosplay", "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º –∫–æ—Å—Ç—é–º–æ–º", 15, 3, 2.5, 35),
                ("cosplay", "—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è –≤ –≥–æ—Ç–æ–≤–æ–º –∫–æ—Å—Ç—é–º–µ", 11, 2, 3.0, 25),
                ("social", "–∏–¥—É –Ω–∞ –∞–Ω–∏–º–µ-–∫–æ–Ω–≤–µ–Ω—Ç", 10, 6, 3.0, 50),
                ("hobby", "—Å–º–æ—Ç—Ä—é –Ω–æ–≤–æ–µ –∞–Ω–∏–º–µ", 20, 2, 2.0, 15),
            ]
            base_schedule.extend(cosplay_schedule)

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 –¥–Ω—è
        for day_offset in range(1, 4):
            target_date = datetime.now() + timedelta(days=day_offset)

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            daily_activities = random.sample(base_schedule, k=random.randint(2, 4))

            for (
                activity_type,
                description,
                start_hour,
                duration,
                mood_effect,
                energy_cost,
            ) in daily_activities:
                start_time = target_date.replace(
                    hour=start_hour, minute=0, second=0, microsecond=0
                )

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±30 –º–∏–Ω—É—Ç
                start_time += timedelta(minutes=random.randint(-30, 30))

                self.virtual_life.schedule_activity(
                    activity_type=activity_type,
                    description=description,
                    start_time=start_time,
                    duration_hours=duration,
                    mood_effect=mood_effect,
                    energy_cost=energy_cost,
                )

        self.logger.info("üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ 3 –¥–Ω—è")

    async def send_initiative_messages(self, current_state: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_context = self.enhanced_memory.get_context_for_response(
            "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
        )
        current_state["memory_context"] = db_context

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
        virtual_context = self.virtual_life.get_current_context_for_ai()
        current_state["virtual_life_context"] = virtual_context

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_context = self.character_loader.get_character_context_for_ai()
        current_state["character_context"] = character_context

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–º
        character = self.character_loader.get_current_character()
        initiative_prompt = "–•–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"

        if character:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            initiative_topics = character.get("behavior", {}).get(
                "initiative_topics", []
            )
            if initiative_topics:
                topic = random.choice(initiative_topics)
                initiative_prompt = f"–•–æ—á—É {topic}"

            # –î–ª—è –ú–∞—Ä–∏–Ω - –æ—Å–æ–±—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
            if "–º–∞—Ä–∏–Ω" in character.get("name", "").lower():
                special_topics = [
                    "—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–æ–≤–æ–º –∫–æ—Å–ø–ª–µ–µ –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω–∏—Ä—É—é",
                    "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ—Ç –∞–Ω–∏–º–µ –∫–æ—Ç–æ—Ä–æ–µ —Å–º–æ—Ç—Ä–µ–ª–∞",
                    "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–º–µ—Å—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º",
                    "—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–º–µ—à–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞ –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏",
                    "—Å–ø—Ä–æ—Å–∏—Ç—å –º–Ω–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –Ω–∞—Ä—è–¥–µ",
                ]
                initiative_prompt = f"–•–æ—á—É {random.choice(special_topics)}"

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.optimized_ai.generate_split_response(
                initiative_prompt, current_state
            )

            # –î–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.deliver_messages_with_timing(
                messages, current_state, message_type="initiative"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            mood_current = current_state.get("dominant_emotion", "calm")
            self.enhanced_memory.add_conversation(
                "[–ò–ù–ò–¶–ò–ê–¢–ò–í–ê]", messages, mood_current, mood_current
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.update_emotional_state("positive_interaction", 0.5)
            self.last_message_time = datetime.now()

            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(messages)} —à—Ç.")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î:
    def get_database_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            summary = self.enhanced_memory.get_conversation_summary()
            return {
                "database_enabled": True,
                "recent_conversations": summary["recent_conversations"],
                "total_memories": summary["total_memories"],
                "last_conversation": summary["last_conversation"],
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {"database_enabled": False, "error": str(e)}

    async def process_user_message(self, message: str) -> List[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏
            mood_before = self.psychological_core.emotional_momentum["current_emotion"]

            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            self.psychological_core.update_emotional_state("positive_interaction", 1.0)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )

            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_context = self.enhanced_memory.get_context_for_response(message)
            current_state["memory_context"] = db_context

            try:
                if hasattr(self.virtual_life, 'get_current_context_for_ai_async'):
                    virtual_context = await self.virtual_life.get_current_context_for_ai_async()
                    self.logger.info("üé≠ –ü–æ–ª—É—á–µ–Ω AI-–≥—É–º–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏")
                else:
                    virtual_context = self.virtual_life.get_current_context_for_ai()
                    self.logger.info("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏")
                
                current_state["virtual_life_context"] = virtual_context
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
                current_state["virtual_life_context"] = "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
            virtual_context = self.virtual_life.get_current_context_for_ai()
            current_state["virtual_life_context"] = virtual_context

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character_context = self.character_loader.get_character_context_for_ai()
            current_state["character_context"] = character_context

            self.logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character_context[:100]}...")
            self.logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏: {virtual_context[:100]}...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            ai_messages = await self.optimized_ai.generate_split_response(
                message, current_state
            )

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏
            mood_after = self.psychological_core.emotional_momentum["current_emotion"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conversation_id = self.enhanced_memory.add_conversation(
                message, ai_messages, mood_before, mood_after
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            character = self.character_loader.get_current_character()
            if character:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–ª–∏–∑–æ—Å—Ç—å –ø—Ä–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º –æ–±—â–µ–Ω–∏–∏
                current_intimacy = character.get("current_relationship", {}).get(
                    "intimacy_level", 1
                )
                if (
                    mood_after in ["happy", "excited", "content"]
                    and random.random() < 0.1
                ):  # 10% —à–∞–Ω—Å
                    new_intimacy = min(10, current_intimacy + 0.1)
                    self.character_loader.update_relationship_progress(
                        {
                            "intimacy_level": new_intimacy,
                            "last_positive_interaction": datetime.now().isoformat(),
                        }
                    )
                    self.logger.info(f"–ë–ª–∏–∑–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {new_intimacy:.1f}")

            self.logger.info(f"–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {conversation_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await self.save_conversation(message, ai_messages)

            self.last_message_time = datetime.now()
            return ai_messages

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # Fallback —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character = self.character_loader.get_current_character()
            if character and "–º–∞—Ä–∏–Ω" in character.get("name", "").lower():
                return [
                    "–û–π! üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...",
                    "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â—ë —Ä–∞–∑! ‚ú®",
                ]
            else:
                return ["–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"]

    # –ú–ï–¢–û–î –î–õ–Ø –ò–ù–ò–¶–ò–ê–¢–ò–í–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –° –£–ß–Å–¢–û–ú –ü–ï–†–°–û–ù–ê–ñ–ê:
    async def send_initiative_messages(self, current_state: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_context = self.enhanced_memory.get_context_for_response(
            "–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ"
        )
        current_state["memory_context"] = db_context

        try:
            if hasattr(self.virtual_life, 'get_current_context_for_ai_async'):
                virtual_context = await self.virtual_life.get_current_context_for_ai_async()
                self.logger.info("üé≠ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ —Å AI-–≥—É–º–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
            else:
                virtual_context = self.virtual_life.get_current_context_for_ai()
                self.logger.info("‚ö†Ô∏è –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ —Å fallback –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
            
            current_state["virtual_life_context"] = virtual_context
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")
            current_state["virtual_life_context"] = "–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_context = self.character_loader.get_character_context_for_ai()
        current_state["character_context"] = character_context

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–º
        character = self.character_loader.get_current_character()
        initiative_prompt = "–•–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"

        if character:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            initiative_topics = character.get("behavior", {}).get(
                "initiative_topics", []
            )
            if initiative_topics:
                topic = random.choice(initiative_topics)
                initiative_prompt = f"–•–æ—á—É {topic}"

            # –î–ª—è –ú–∞—Ä–∏–Ω - –æ—Å–æ–±—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
            if "–º–∞—Ä–∏–Ω" in character.get("name", "").lower():
                special_topics = [
                    "—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–æ–≤–æ–º –∫–æ—Å–ø–ª–µ–µ –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω–∏—Ä—É—é",
                    "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ—Ç –∞–Ω–∏–º–µ –∫–æ—Ç–æ—Ä–æ–µ —Å–º–æ—Ç—Ä–µ–ª–∞",
                    "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–º–µ—Å—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º",
                    "—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–º–µ—à–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞ –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏",
                    "—Å–ø—Ä–æ—Å–∏—Ç—å –º–Ω–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –Ω–∞—Ä—è–¥–µ",
                ]
                initiative_prompt = f"–•–æ—á—É {random.choice(special_topics)}"

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.optimized_ai.generate_split_response(
                initiative_prompt, current_state
            )

            # –î–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.deliver_messages_with_timing(
                messages, current_state, message_type="initiative"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            mood_current = current_state.get("dominant_emotion", "calm")
            self.enhanced_memory.add_conversation(
                "[–ò–ù–ò–¶–ò–ê–¢–ò–í–ê]", messages, mood_current, mood_current
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.update_emotional_state("positive_interaction", 0.5)
            self.last_message_time = datetime.now()

            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(messages)} —à—Ç.")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")

    async def deliver_messages_with_timing(
        self,
        messages: List[str],
        current_state: Dict[str, Any],
        message_type: str = "response",
    ):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""

        if not messages:
            self.logger.warning("deliver_messages_with_timing: –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏")
            return

        self.logger.info(f"üöÄ –î–æ—Å—Ç–∞–≤–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–ø–∞ '{message_type}'")
        
        emotional_state = current_state.get("dominant_emotion", "calm")
        energy_level = current_state.get("energy_level", 50)

        # –ù–û–í–û–ï: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        mood = current_state.get("current_mood", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ")
        if "–≤–æ–∑–±—É–∂–¥–µ–Ω" in emotional_state or "excited" in emotional_state:
            self.typing_simulator.set_speed_mode("fast")
        elif energy_level < 30 or "tired" in emotional_state:
            self.typing_simulator.set_speed_mode("normal")
        elif "anxious" in emotional_state or "sad" in emotional_state:
            self.typing_simulator.set_speed_mode("normal")
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–µ–∂–∏–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            default_mode = self.config.get("typing", {}).get("mode", "fast")
            self.typing_simulator.set_speed_mode(default_mode)

        # –°–æ–∑–¥–∞–µ–º callback'–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∞–Ω–∏—è
        async def send_callback(msg):
            try:
                self.logger.info(f"üì® –í—ã–∑–æ–≤ deliver_message –¥–ª—è: {msg[:30]}...")
                await self.deliver_message(msg, message_type)
                self.logger.info("‚úÖ deliver_message –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ deliver_message: {e}")
                raise

        async def typing_callback(is_typing):
            # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö
            if is_typing:
                self.logger.debug("‚å®Ô∏è –ü–æ–∫–∞–∑—ã–≤–∞–µ–º '–ø–µ—á–∞—Ç–∞–µ—Ç...'")
            else:
                self.logger.debug("üîá –°–∫—Ä—ã–≤–∞–µ–º '–ø–µ—á–∞—Ç–∞–µ—Ç...'")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö)
        if self.config.get("logging", {}).get("log_timing_details", True):
            timing_summary = self.typing_simulator.get_realistic_delays_summary(
                messages, emotional_state, energy_level
            )
            self.logger.info(
                f"‚è±Ô∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {timing_summary['total_time']}—Å, —Ä–µ–∂–∏–º: {self.typing_simulator.current_mode}"
            )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
            await self.typing_simulator.send_messages_with_realistic_timing(
                messages=messages,
                emotional_state=emotional_state,
                energy_level=energy_level,
                send_callback=send_callback,
                typing_callback=typing_callback,
            )
            
            self.logger.info(f"üéä –î–û–°–¢–ê–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
        except Exception as e:
            self.logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
            self.logger.error(f"üí• –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: type={message_type}, emotion={emotional_state}")
            raise

    async def update_physical_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""

        current_hour = datetime.now().hour

        # –≠–Ω–µ—Ä–≥–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if 6 <= current_hour <= 8:
            self.psychological_core.physical_state["energy_base"] = 85
        elif 9 <= current_hour <= 12:
            self.psychological_core.physical_state["energy_base"] = 90
        elif 13 <= current_hour <= 17:
            self.psychological_core.physical_state["energy_base"] = 75
        elif 18 <= current_hour <= 21:
            self.psychological_core.physical_state["energy_base"] = 60
        else:
            self.psychological_core.physical_state["energy_base"] = 30

        # –°—Ç—Ä–µ—Å—Å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if 9 <= current_hour <= 18:
            self.psychological_core.physical_state["stress_level"] = min(
                8, self.psychological_core.physical_state["stress_level"] + 0.5
            )
        else:
            self.psychological_core.physical_state["stress_level"] = max(
                1, self.psychological_core.physical_state["stress_level"] - 0.3
            )

    async def generate_life_event(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""

        current_hour = datetime.now().hour

        if 9 <= current_hour <= 18:  # —Ä–∞–±–æ—á–∏–µ —Å–æ–±—ã—Ç–∏—è
            events = [
                ("–ø–æ–ª—É—á–∏–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–¥–∞—á—É", "positive", 1.0),
                ("–∫–æ–ª–ª–µ–≥–∞ –ø—Ä–∏–Ω–µ—Å –∫–æ—Ñ–µ", "positive", 0.5),
                ("—Å–ª–æ–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å", "negative", -1.0),
                ("–ø–æ—Ö–≤–∞–ª–∏–ª–∏ –∑–∞ —Ä–∞–±–æ—Ç—É", "positive", 2.0),
            ]
        else:  # –ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            events = [
                ("—É–≤–∏–¥–µ–ª–∞ –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç", "positive", 1.0),
                ("–ø–æ–¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞–ª–∞", "positive", 1.5),
                ("–Ω–∞—à–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç—å—é", "positive", 0.5),
                ("—Å–æ—Å–µ–¥–∏ —à—É–º—è—Ç", "negative", -0.8),
            ]

        event_desc, event_type, intensity = random.choice(events)

        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.psychological_core.update_emotional_state(
            "positive_interaction" if event_type == "positive" else "stress",
            abs(intensity),
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        self.memory_system.add_memory(
            f"–°–æ–±—ã—Ç–∏–µ: {event_desc}",
            "life_event",
            min(7, int(abs(intensity) * 3)),
            intensity,
        )

        self.logger.info(f"–ñ–∏–∑–Ω–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_desc}")

    async def save_conversation(self, user_message: str, ai_messages: List[str]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        self.conversation_history.append(
            {
                "timestamp": datetime.now(),
                "user": user_message,
                "ai": ai_messages,  # –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                "message_count": len(ai_messages),
            }
        )

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > 100:
            self.conversation_history = self.conversation_history[-50:]

    async def extract_memories(self, user_message: str, ai_messages: List[str]):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""

        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
        facts_found = []

        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∞–∫—Ç–æ–≤
        if any(word in user_message.lower() for word in ["—Ä–∞–±–æ—Ç–∞—é", "—Ä–∞–±–æ—Ç–∞", "job"]):
            facts_found.append(("—Ä–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 6))

        if any(
            word in user_message.lower() for word in ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–æ–±–æ–∂–∞—é"]
        ):
            facts_found.append((f"–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_message[:100]}", 5))

        if any(word in user_message.lower() for word in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "—É—Å—Ç–∞–ª"]):
            facts_found.append(("—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 4))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        for fact, importance in facts_found:
            self.memory_system.add_memory(fact, "user_fact", importance, 0.0)

    async def daily_memory_consolidation(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–∞–º—è—Ç–∏"""
        self.memory_system._consolidate_memories()
        self.daily_message_count = 0  # —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.logger.info("–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

    async def deliver_message(self, message: str, message_type: str):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö"""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç—å
        print(f"\n[{message_type.upper()}]: {message}")

    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

    def get_conversation_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        base_stats = {
            "total_conversations": len(self.conversation_history),
            "total_ai_messages": sum(
                conv.get("message_count", 1) for conv in self.conversation_history
            ),
            "daily_initiatives_sent": self.daily_message_count,
            "last_conversation": (
                self.conversation_history[-1]["timestamp"].strftime("%H:%M:%S")
                if self.conversation_history
                else None
            ),
        }

        if base_stats["total_conversations"] > 0:
            base_stats["avg_messages_per_response"] = round(
                base_stats["total_ai_messages"] / base_stats["total_conversations"], 1
            )
        else:
            base_stats["avg_messages_per_response"] = 0

        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        character_info = self.get_current_character_info()
        base_stats.update(
            {
                "current_character": character_info["name"],
                "character_loaded": character_info["loaded"],
                "relationship_type": character_info.get(
                    "relationship_type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                ),
                "intimacy_level": character_info.get("intimacy_level", 0),
            }
        )

        return base_stats

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞"""
        self.logger.info(
            "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω"
        )

        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        await self.create_automatic_schedule()

        while True:
            await asyncio.sleep(1)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞"""
        self.scheduler.shutdown()
        self.logger.info("AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


    async def api_stats_command(self, update: Any, context: Any):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π"""
        
        stats = self.api_manager.get_usage_stats()
        
        text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê API –ö–õ–Æ–ß–ï–ô**\n\n"
        text += f"üî¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']:,}\n"
        text += f"‚Ä¢ –û—à–∏–±–æ–∫: {stats['total_errors']}\n\n"
        
        for usage_type, type_stats in stats['by_type'].items():
            emoji = {"dialogue": "üí¨", "planning": "üìÖ", "analytics": "üìä"}.get(usage_type, "üîß")
            
            text += f"{emoji} **{usage_type.upper()}:**\n"
            text += f"‚Ä¢ –ö–ª—é—á–µ–π –≤ –ø—É–ª–µ: {type_stats['keys_available']}\n"
            text += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {type_stats['requests']}\n"
            text += f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {type_stats['tokens']:,}\n"
            text += f"‚Ä¢ –û—à–∏–±–æ–∫: {type_stats['errors']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö
        limits = self.config.get("ai", {}).get("limits", {})
        if limits:
            text += "‚ö†Ô∏è **–õ–∏–º–∏—Ç—ã (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã):**\n"
            for usage_type, type_stats in stats['by_type'].items():
                if usage_type in limits:
                    limit_info = limits[usage_type]
                    tokens_limit = limit_info.get("max_tokens_per_day", 0)
                    if tokens_limit > 0:
                        usage_pct = (type_stats['tokens'] / tokens_limit) * 100
                        text += f"‚Ä¢ {usage_type}: {usage_pct:.1f}% –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')

