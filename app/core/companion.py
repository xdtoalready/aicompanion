# –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏

from .character_loader import character_loader
import asyncio
import json
import logging
import random
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, Dict, Any, List
from openai import AsyncOpenAI
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from .virtual_life import VirtualLifeManager, VirtualActivity

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –≤ sys.path –û–î–ò–ù –†–ê–ó
sys.path.append(str(Path(__file__).parent.parent.parent))

# –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π –≤–Ω—É—Ç—Ä–∏ core
from .psychology import PsychologicalCore
from .memory import AdvancedMemorySystem
from .ai_client import OptimizedAI
from .typing_simulator import TypingSimulator, TypingIndicator

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
from .memory_consolidation import EmotionalMemoryConsolidator, enhance_existing_memories_with_emotions

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è database (—Ç–∞–∫ –∫–∞–∫ sys.path –¥–æ–±–∞–≤–ª–µ–Ω)
from app.database.memory_manager import EnhancedMemorySystem

class RealisticAICompanion:
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config

        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.psychological_core = PsychologicalCore()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–º—è—Ç–∏
        db_path = config.get('database', {}).get('path', 'data/companion.db')
        self.enhanced_memory = EnhancedMemorySystem(db_path)
        
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.memory_system = AdvancedMemorySystem()
        
        # –ù–û–í–û–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        global character_loader
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
        if not character_loader.get_current_character():
            available_chars = character_loader.get_available_characters()
            if available_chars:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                character_loader.load_character(available_chars[0]['id'])
                self.logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂: {available_chars[0]['name']}")
        
        # AI –∫–ª–∏–µ–Ω—Ç
        self.ai_client = AsyncOpenAI(
            api_key=config['ai']['openrouter_api_key'],
            base_url="https://openrouter.ai/api/v1"
        )
        
        # –ò–ó–ú–ï–ù–ï–ù–û: –ü–µ—Ä–µ–¥–∞—ë–º character_loader –≤ AI –∫–ª–∏–µ–Ω—Ç
        self.optimized_ai = OptimizedAI(self.ai_client, config, character_loader)
        
        # –°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        typing_config = config.get('typing', {})
        self.typing_simulator = TypingSimulator({
            'typing_mode': typing_config.get('mode', 'fast'),
            'show_typing_indicator': typing_config.get('show_typing_indicator', True),
            'natural_pauses': typing_config.get('natural_pauses', True)
        })
        self.typing_indicator = TypingIndicator()

        # –°–∏—Å—Ç–µ–º–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
        self.virtual_life = VirtualLifeManager(
            db_path=config.get('database', {}).get('path', 'data/companion.db'),
            character_loader=character_loader,
        )
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = AsyncIOScheduler()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_message_time = None
        self.daily_message_count = 0
        self.conversation_history = []
        
        self.commands_enabled = True
        
        self.emotional_memory_consolidator = EmotionalMemoryConsolidator(
            db_path=db_path,
            ai_client=self.ai_client,
            config=config
        )

        self.setup_realistic_scheduler()

    def get_current_character_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        character = character_loader.get_current_character()
        if not character:
            return {
                "name": "AI",
                "loaded": False,
                "error": "–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
            }
        
        return {
            "name": character.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            "age": character.get('age', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            "description": character.get('personality', {}).get('description', ''),
            "relationship_type": character.get('current_relationship', {}).get('type', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π'),
            "intimacy_level": character.get('current_relationship', {}).get('intimacy_level', 0),
            "loaded": True,
            "file_id": character.get('id', 'unknown')
        }
    
    def setup_realistic_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–µ–ª–∞–Ω–∏—è –Ω–∞–ø–∏—Å–∞—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self.consciousness_cycle,
            IntervalTrigger(minutes=5),
            id='consciousness'
        )
        
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
        self.scheduler.add_job(
            self.run_emotional_memory_consolidation,
            IntervalTrigger(hours=6),
            id='emotional_memory_consolidation'
        )
        
        # –ì–ª—É–±–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑ –≤ –¥–µ–Ω—å
        self.scheduler.add_job(
            self.deep_emotional_consolidation,
            IntervalTrigger(days=1),
            id='deep_emotional_consolidation'
        )
        
        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –Ω–æ–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞
        self.scheduler.add_job(
            self.analyze_recent_memories_emotions,
            IntervalTrigger(hours=2),
            id='emotion_analysis'
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–∞–∂–¥—ã–µ –º–∏–Ω—É—Ç—É
        self.scheduler.add_job(
            self.update_virtual_life,
            IntervalTrigger(minutes=1),
            id='virtual_life_update'
        )

        self.scheduler.start()

    async def run_memory_consolidation(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        try:
            self.logger.info("üß† –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
            await self.emotional_memory_consolidator.run_emotional_consolidation_cycle()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")

    async def deep_memory_consolidation(self):
        """–ì–ª—É–±–æ–∫–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏–∑ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –û–±—ã—á–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
            await self.emotional_memory_consolidator.run_emotional_consolidation_cycle()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            await self._analyze_memory_patterns()
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")

    async def run_emotional_memory_consolidation(self):
        """–ó–∞–ø—É—Å–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏"""
        try:
            self.logger.info("üß†üíï –ó–∞–ø—É—Å–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏...")
            await self.emotional_memory_consolidator.run_emotional_consolidation_cycle()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")

    async def deep_emotional_consolidation(self):
        """–ì–ª—É–±–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è"""
        try:
            # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
            await self.emotional_memory_consolidator.run_emotional_consolidation_cycle()
            
            # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self._analyze_emotional_patterns()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫ —Å—Ç–∞—Ä—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await enhance_existing_memories_with_emotions(
                self.enhanced_memory.db_manager.db_path,
                self.ai_client,
                self.config
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–ª—É–±–æ–∫–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")

    async def analyze_recent_memories_emotions(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–∏ –Ω–µ–¥–∞–≤–Ω–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            # –£–ª—É—á—à–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫
            await enhance_existing_memories_with_emotions(
                self.enhanced_memory.db_manager.db_path,
                self.ai_client,
                self.config
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {e}")

    async def _analyze_emotional_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            import sqlite3
            with sqlite3.connect(self.enhanced_memory.db_manager.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
                month_ago = (datetime.now() - timedelta(days=30)).isoformat()
                cursor.execute("""
                    SELECT emotion_type, COUNT(*), AVG(emotional_intensity), AVG(importance)
                    FROM memories 
                    WHERE created_at >= ? AND emotion_type IS NOT NULL
                    GROUP BY emotion_type
                    ORDER BY COUNT(*) DESC
                """, (month_ago,))
                
                emotional_patterns = cursor.fetchall()
                
                if not emotional_patterns:
                    return
                
                # –°–æ–∑–¥–∞—ë–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è AI
                pattern_text = "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –º–µ—Å—è—Ü:\n"
                for emotion, count, avg_intensity, avg_importance in emotional_patterns:
                    pattern_text += f"- {emotion}: {count} —Ä–∞–∑ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {avg_intensity:.1f}, –≤–∞–∂–Ω–æ—Å—Ç—å {avg_importance:.1f})\n"
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –¥–ª—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π
                analysis_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–Ω–∏–∏ —Å AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–æ–º.
                
–û–ø—Ä–µ–¥–µ–ª–∏:
1. –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç?
2. –ß—Ç–æ —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
3. –ö–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ?
4. –ù–∞ —á—Ç–æ –æ–±—Ä–∞—â–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º?

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç."""

                response = await self.ai_client.chat.completions.create(
                    model=self.config.get('ai', {}).get('model'),
                    messages=[
                        {"role": "system", "content": analysis_prompt},
                        {"role": "user", "content": pattern_text}
                    ],
                    max_tokens=400,
                    temperature=0.3
                )
                
                analysis = response.choices[0].message.content.strip()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                cursor.execute("""
                    INSERT INTO memories 
                    (character_id, memory_type, content, importance, 
                     emotional_intensity, emotion_type, is_consolidated)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    1,
                    "emotional_analysis",
                    f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {analysis}",
                    9,  # –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
                    7.0,  # –°—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
                    "analytical",
                    True
                ))
                
                conn.commit()
                
                self.logger.info("üîçüíï –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

    async def _analyze_memory_patterns(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        consolidated_memories = self._get_consolidated_memories()
        
        if not consolidated_memories:
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        analysis_prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
        –û–ø—Ä–µ–¥–µ–ª–∏:
        1. –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        2. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –∏ –æ–±—â–µ–Ω–∏—è  
        3. –ß—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
        4. –ö–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
        
        –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç."""
        
        try:
            response = await self.ai_client.chat.completions.create(
                model=self.config.get('ai', {}).get('model'),
                messages=[
                    {"role": "system", "content": analysis_prompt},
                    {"role": "user", "content": f"–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{consolidated_memories}"}
                ],
                max_tokens=300,
                temperature=0.3
            )
            
            analysis = response.choices[0].message.content.strip()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            self._save_memory_analysis(analysis)
            
            self.logger.info("üîç –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à—ë–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

    def _get_consolidated_memories(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            import sqlite3
            with sqlite3.connect(self.enhanced_memory.db_manager.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT content FROM memories 
                    WHERE is_consolidated = 1 
                    AND consolidation_level IN ('medium_term', 'long_term')
                    ORDER BY importance DESC, last_consolidated DESC
                    LIMIT 20
                """)
                
                memories = [row[0] for row in cursor.fetchall()]
                return "\n".join(memories)
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return ""
        
    def _save_memory_analysis(self, analysis: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏"""
        try:
            self.enhanced_memory.add_conversation(
                "[–ê–ù–ê–õ–ò–ó_–ü–ê–ú–Ø–¢–ò]", 
                [analysis], 
                "analytical", 
                "insightful"
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    async def consciousness_cycle(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞–º–∏"""
        
        try:
            current_time = datetime.now()
            
            # –ù–µ –∞–∫—Ç–∏–≤–µ–Ω –Ω–æ—á—å—é (23:00 - 7:00)
            if current_time.hour >= 23 or current_time.hour < 7:
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
            max_daily = self.config.get('behavior', {}).get('max_daily_initiatives', 8)
            if self.daily_message_count >= max_daily:
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.decay_emotions(30)  # 30 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (—ç–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã)
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            # –†–µ—à–µ–Ω–∏–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ
            should_initiate = await self._should_initiate_realistically(current_state)
            
            if should_initiate:
                await self.send_initiative_messages(current_state)  # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
                self.daily_message_count += 1
            
            # –ò–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if random.random() < 0.15:  # 15% —à–∞–Ω—Å
                await self.generate_life_event()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–∑–Ω–∞–Ω–∏—è: {e}")
    
    async def _should_initiate_realistically(self, current_state: Dict) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        
        initiative_desire = current_state.get("initiative_desire", 0)
        
        # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        if initiative_desire < 3:  # –ë—ã–ª–æ 4, —Ç–µ–ø–µ—Ä—å 3
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        min_hours = self.config.get('behavior', {}).get('min_hours_between_initiatives', 2)
        if self.last_message_time:
            hours_since = (datetime.now() - self.last_message_time).total_seconds() / 3600
            if hours_since < min_hours:
                return False
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
        current_hour = datetime.now().hour
        activity_context = current_state.get("activity_context")
        
        # –ù–û–í–û–ï: –ë–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —á–∞—Å—ã
        peak_hours = [9, 12, 16, 19, 22]  # –ß–∞—Å—ã –ø–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if current_hour in peak_hours:
            initiative_desire += 1
        
        # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - —Ä–µ–∂–µ –ø–∏—à–µ—Ç, –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ—Ç
        if activity_context == "work_time":
            if random.random() < 0.8:  # –ë—ã–ª–æ 0.7, —Å—Ç–∞–ª–æ 0.8 (–º–µ–Ω—å—à–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏)
                return False
        
        # –í–µ—á–µ—Ä - –±–æ–ª—å—à–µ –∂–µ–ª–∞–Ω–∏—è –æ–±—â–∞—Ç—å—Å—è
        if activity_context == "evening_time":
            initiative_desire += 2
        
        # –ù–û–í–û–ï: –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ú–∞—Ä–∏–Ω –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω–∞—è)
        character = character_loader.get_current_character()
        if character and '–º–∞—Ä–∏–Ω' in character.get('name', '').lower():
            initiative_desire += 1  # –ú–∞—Ä–∏–Ω —á–∞—â–µ –ø–∏—à–µ—Ç
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–∞–Ω–¥–æ–º–æ–º (–±–æ–ª–µ–µ –º—è–≥–∫–∞—è –¥–ª—è —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫)
        threshold = 5 - (initiative_desire * 0.4)  # –ù–µ–º–Ω–æ–≥–æ –ø–æ–Ω–∏–∑–∏–ª–∏ –ø–æ—Ä–æ–≥
        return random.random() > (threshold / 10)

    async def update_virtual_life(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            changes = self.virtual_life.check_and_update_activities()

            if changes["status_changed"]:
                if changes["activity_started"]:
                    activity = changes["activity_started"]
                    await self._notify_activity_start(activity)

                if changes["activity_ended"]:
                    activity = changes["activity_ended"]
                    await self.virtual_life._notify_activity_end(activity)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏: {e}")

    async def _notify_activity_start(self, activity: VirtualActivity):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–∞—á–∞–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        messages = [
            f"–ö—Å—Ç–∞—Ç–∏, —è —Å–µ–π—á–∞—Å {activity.description}! ‚ú®",
            f"–ë—É–¥—É {activity.activity_type} –¥–æ {activity.end_time.strftime('%H:%M')}",
            "–ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –º–Ω–µ –ø–∏—Å–∞—Ç—å! üíï",
        ]

        if hasattr(self, 'allowed_users') and self.allowed_users:
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )

            for user_id in self.allowed_users:
                try:
                    await self.send_telegram_messages_with_timing(
                        chat_id=user_id,
                        messages=messages,
                        current_state=current_state,
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

    async def _notify_activity_end(self, activity: VirtualActivity):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        messages = [
            f"–Ø –∑–∞–∫–æ–Ω—á–∏–ª–∞ {activity.description}.",
            "–¢–µ–ø–µ—Ä—å —è —Å–≤–æ–±–æ–¥–Ω–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è!",
        ]

        if hasattr(self, 'allowed_users') and self.allowed_users:
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )

            for user_id in self.allowed_users:
                try:
                    await self.send_telegram_messages_with_timing(
                        chat_id=user_id,
                        messages=messages,
                        current_state=current_state,
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    async def create_automatic_schedule(self):
        """–°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        character = character_loader.get_current_character()
        if not character:
            return
        
        name = character.get('name', '').lower()
        
        # –ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        base_schedule = [
            ("work", "—Ä–∞–±–æ—Ç–∞—é/—É—á—É—Å—å", 9, 5, 1.0, 40),  # 9 —É—Ç—Ä–∞, 5 —á–∞—Å–æ–≤
            ("rest", "–æ—Ç–¥—ã—Ö–∞—é –¥–æ–º–∞", 14, 1, 0.5, 10),   # 14:00, 1 —á–∞—Å
            ("hobby", "–∑–∞–Ω–∏–º–∞—é—Å—å —Ö–æ–±–±–∏", 16, 2, 2.0, 30), # 16:00, 2 —á–∞—Å–∞
            ("social", "–æ–±—â–∞—é—Å—å —Å –¥—Ä—É–∑—å—è–º–∏", 19, 1.5, 1.5, 20) # 19:00, 1.5 —á–∞—Å–∞
        ]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ú–∞—Ä–∏–Ω
        if '–º–∞—Ä–∏–Ω' in name or '–∫–∏—Ç–∞–≥–∞–≤–∞' in name:
            cosplay_schedule = [
                ("cosplay", "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º –∫–æ—Å—Ç—é–º–æ–º", 15, 3, 2.5, 35),
                ("cosplay", "—Ñ–æ—Ç–æ—Å–µ—Å—Å–∏—è –≤ –≥–æ—Ç–æ–≤–æ–º –∫–æ—Å—Ç—é–º–µ", 11, 2, 3.0, 25),
                ("social", "–∏–¥—É –Ω–∞ –∞–Ω–∏–º–µ-–∫–æ–Ω–≤–µ–Ω—Ç", 10, 6, 3.0, 50),
                ("hobby", "—Å–º–æ—Ç—Ä—é –Ω–æ–≤–æ–µ –∞–Ω–∏–º–µ", 20, 2, 2.0, 15)
            ]
            base_schedule.extend(cosplay_schedule)
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 3 –¥–Ω—è
        for day_offset in range(1, 4):
            target_date = datetime.now() + timedelta(days=day_offset)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            daily_activities = random.sample(base_schedule, k=random.randint(2, 4))
            
            for activity_type, description, start_hour, duration, mood_effect, energy_cost in daily_activities:
                start_time = target_date.replace(hour=start_hour, minute=0, second=0, microsecond=0)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±30 –º–∏–Ω—É—Ç
                start_time += timedelta(minutes=random.randint(-30, 30))
                
                self.virtual_life.schedule_activity(
                    activity_type=activity_type,
                    description=description,
                    start_time=start_time,
                    duration_hours=duration,
                    mood_effect=mood_effect,
                    energy_cost=energy_cost
                )
        
        self.logger.info("üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ 3 –¥–Ω—è")
    
    async def send_initiative_messages(self, current_state: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ë–î –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_context = self.enhanced_memory.get_context_for_response("–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ")
        current_state['memory_context'] = db_context
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.optimized_ai.generate_split_response(
                "–•–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ", 
                current_state
            )
            
            # –î–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.deliver_messages_with_timing(
                messages, 
                current_state, 
                message_type="initiative"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            mood_current = current_state.get('dominant_emotion', 'calm')
            self.enhanced_memory.add_conversation(
                "[–ò–ù–ò–¶–ò–ê–¢–ò–í–ê]", messages, mood_current, mood_current
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.update_emotional_state("positive_interaction", 0.5)
            self.last_message_time = datetime.now()
            
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(messages)} —à—Ç.")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î:
    def get_database_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            summary = self.enhanced_memory.get_conversation_summary()
            return {
                "database_enabled": True,
                "recent_conversations": summary['recent_conversations'],
                "total_memories": summary['total_memories'],
                "last_conversation": summary['last_conversation']
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î: {e}")
            return {
                "database_enabled": False,
                "error": str(e)
            }

    async def process_user_message(self, message: str) -> List[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏
            mood_before = self.psychological_core.emotional_momentum["current_emotion"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            self.psychological_core.update_emotional_state("positive_interaction", 1.0)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_context = self.enhanced_memory.get_context_for_response(message)
            current_state['memory_context'] = db_context
            
            # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character_context = character_loader.get_character_context_for_ai()
            current_state['character_context'] = character_context
            
            self.logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character_context[:100]}...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            ai_messages = await self.optimized_ai.generate_split_response(message, current_state)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏
            mood_after = self.psychological_core.emotional_momentum["current_emotion"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conversation_id = self.enhanced_memory.add_conversation(
                message, ai_messages, mood_before, mood_after
            )
            
            # –ù–û–í–û–ï: –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            character = character_loader.get_current_character()
            if character:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–ª–∏–∑–æ—Å—Ç—å –ø—Ä–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–º –æ–±—â–µ–Ω–∏–∏
                current_intimacy = character.get('current_relationship', {}).get('intimacy_level', 1)
                if mood_after in ['happy', 'excited', 'content'] and random.random() < 0.1:  # 10% —à–∞–Ω—Å
                    new_intimacy = min(10, current_intimacy + 0.1)
                    character_loader.update_relationship_progress({
                        'intimacy_level': new_intimacy,
                        'last_positive_interaction': datetime.now().isoformat()
                    })
                    self.logger.info(f"–ë–ª–∏–∑–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {new_intimacy:.1f}")
            
            self.logger.info(f"–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î —Å ID: {conversation_id}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–∫–∂–µ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            await self.save_conversation(message, ai_messages)
            
            self.last_message_time = datetime.now()
            return ai_messages
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            # Fallback —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character = character_loader.get_current_character()
            if character and '–º–∞—Ä–∏–Ω' in character.get('name', '').lower():
                return ["–û–π! üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...", "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â—ë —Ä–∞–∑! ‚ú®"]
            else:
                return ["–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"]
            
    # –ú–ï–¢–û–î –î–õ–Ø –ò–ù–ò–¶–ò–ê–¢–ò–í–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô –° –£–ß–Å–¢–û–ú –ü–ï–†–°–û–ù–ê–ñ–ê:
    async def send_initiative_messages(self, current_state: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_context = self.enhanced_memory.get_context_for_response("–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ")
        current_state['memory_context'] = db_context
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character_context = character_loader.get_character_context_for_ai()
        current_state['character_context'] = character_context
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–µ–º
        character = character_loader.get_current_character()
        initiative_prompt = "–•–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"
        
        if character:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            initiative_topics = character.get('behavior', {}).get('initiative_topics', [])
            if initiative_topics:
                topic = random.choice(initiative_topics)
                initiative_prompt = f"–•–æ—á—É {topic}"
                
            # –î–ª—è –ú–∞—Ä–∏–Ω - –æ—Å–æ–±—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
            if '–º–∞—Ä–∏–Ω' in character.get('name', '').lower():
                special_topics = [
                    "—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–æ–≤–æ–º –∫–æ—Å–ø–ª–µ–µ –∫–æ—Ç–æ—Ä—ã–π –ø–ª–∞–Ω–∏—Ä—É—é",
                    "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ—Ç –∞–Ω–∏–º–µ –∫–æ—Ç–æ—Ä–æ–µ —Å–º–æ—Ç—Ä–µ–ª–∞",
                    "–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–º–µ—Å—Ç–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º",
                    "—Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–º–µ—à–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∞ –∫–æ–Ω–≤–µ–Ω—Ü–∏–∏",
                    "—Å–ø—Ä–æ—Å–∏—Ç—å –º–Ω–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –Ω–∞—Ä—è–¥–µ"
                ]
                initiative_prompt = f"–•–æ—á—É {random.choice(special_topics)}"
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.optimized_ai.generate_split_response(
                initiative_prompt, 
                current_state
            )
            
            # –î–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.deliver_messages_with_timing(
                messages, 
                current_state, 
                message_type="initiative"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥
            mood_current = current_state.get('dominant_emotion', 'calm')
            self.enhanced_memory.add_conversation(
                "[–ò–ù–ò–¶–ò–ê–¢–ò–í–ê]", messages, mood_current, mood_current
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.update_emotional_state("positive_interaction", 0.5)
            self.last_message_time = datetime.now()
            
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(messages)} —à—Ç.")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")
    
    async def deliver_messages_with_timing(self, messages: List[str], 
                                         current_state: Dict[str, Any],
                                         message_type: str = "response"):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ–º –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é"""
        
        emotional_state = current_state.get('dominant_emotion', 'calm')
        energy_level = current_state.get('energy_level', 50)
        
        # –ù–û–í–û–ï: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        mood = current_state.get('current_mood', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ')
        if '–≤–æ–∑–±—É–∂–¥–µ–Ω' in emotional_state or 'excited' in emotional_state:
            self.typing_simulator.set_speed_mode('fast')
        elif energy_level < 30 or 'tired' in emotional_state:
            self.typing_simulator.set_speed_mode('normal')
        elif 'anxious' in emotional_state or 'sad' in emotional_state:
            self.typing_simulator.set_speed_mode('normal')
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Ä–µ–∂–∏–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            default_mode = self.config.get('typing', {}).get('mode', 'fast')
            self.typing_simulator.set_speed_mode(default_mode)
        
        # –°–æ–∑–¥–∞–µ–º callback'–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∞–Ω–∏—è
        async def send_callback(msg):
            await self.deliver_message(msg, message_type)
        
        async def typing_callback(is_typing):
            # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö
            if is_typing:
                self.logger.debug("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º '–ø–µ—á–∞—Ç–∞–µ—Ç...'")
            else:
                self.logger.debug("–°–∫—Ä—ã–≤–∞–µ–º '–ø–µ—á–∞—Ç–∞–µ—Ç...'")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ª–æ–≥–∞—Ö)
        if self.config.get('logging', {}).get('log_typing_timings', False):
            timing_summary = self.typing_simulator.get_realistic_delays_summary(
                messages, emotional_state, energy_level
            )
            self.logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {timing_summary['total_time']}—Å, —Ä–µ–∂–∏–º: {self.typing_simulator.current_mode}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        await self.typing_simulator.send_messages_with_realistic_timing(
            messages=messages,
            emotional_state=emotional_state,
            energy_level=energy_level,
            send_callback=send_callback,
            typing_callback=typing_callback
        )
    
    async def update_physical_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        
        current_hour = datetime.now().hour
        
        # –≠–Ω–µ—Ä–≥–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if 6 <= current_hour <= 8:
            self.psychological_core.physical_state["energy_base"] = 85
        elif 9 <= current_hour <= 12:
            self.psychological_core.physical_state["energy_base"] = 90
        elif 13 <= current_hour <= 17:
            self.psychological_core.physical_state["energy_base"] = 75
        elif 18 <= current_hour <= 21:
            self.psychological_core.physical_state["energy_base"] = 60
        else:
            self.psychological_core.physical_state["energy_base"] = 30
        
        # –°—Ç—Ä–µ—Å—Å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if 9 <= current_hour <= 18:
            self.psychological_core.physical_state["stress_level"] = min(8, 
                self.psychological_core.physical_state["stress_level"] + 0.5)
        else:
            self.psychological_core.physical_state["stress_level"] = max(1,
                self.psychological_core.physical_state["stress_level"] - 0.3)
    
    async def generate_life_event(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        
        current_hour = datetime.now().hour
        
        if 9 <= current_hour <= 18:  # —Ä–∞–±–æ—á–∏–µ —Å–æ–±—ã—Ç–∏—è
            events = [
                ("–ø–æ–ª—É—á–∏–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–¥–∞—á—É", "positive", 1.0),
                ("–∫–æ–ª–ª–µ–≥–∞ –ø—Ä–∏–Ω–µ—Å –∫–æ—Ñ–µ", "positive", 0.5),
                ("—Å–ª–æ–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å", "negative", -1.0),
                ("–ø–æ—Ö–≤–∞–ª–∏–ª–∏ –∑–∞ —Ä–∞–±–æ—Ç—É", "positive", 2.0)
            ]
        else:  # –ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            events = [
                ("—É–≤–∏–¥–µ–ª–∞ –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç", "positive", 1.0),
                ("–ø–æ–¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞–ª–∞", "positive", 1.5),
                ("–Ω–∞—à–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç—å—é", "positive", 0.5),
                ("—Å–æ—Å–µ–¥–∏ —à—É–º—è—Ç", "negative", -0.8)
            ]
        
        event_desc, event_type, intensity = random.choice(events)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.psychological_core.update_emotional_state(
            "positive_interaction" if event_type == "positive" else "stress",
            abs(intensity)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        self.memory_system.add_memory(
            f"–°–æ–±—ã—Ç–∏–µ: {event_desc}",
            "life_event",
            min(7, int(abs(intensity) * 3)),
            intensity
        )
        
        self.logger.info(f"–ñ–∏–∑–Ω–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_desc}")
    
    async def save_conversation(self, user_message: str, ai_messages: List[str]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        self.conversation_history.append({
            "timestamp": datetime.now(),
            "user": user_message,
            "ai": ai_messages,  # –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            "message_count": len(ai_messages)
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > 100:
            self.conversation_history = self.conversation_history[-50:]
    
    async def extract_memories(self, user_message: str, ai_messages: List[str]):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
        facts_found = []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∞–∫—Ç–æ–≤
        if any(word in user_message.lower() for word in ["—Ä–∞–±–æ—Ç–∞—é", "—Ä–∞–±–æ—Ç–∞", "job"]):
            facts_found.append(("—Ä–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 6))
        
        if any(word in user_message.lower() for word in ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–æ–±–æ–∂–∞—é"]):
            facts_found.append((f"–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_message[:100]}", 5))
        
        if any(word in user_message.lower() for word in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "—É—Å—Ç–∞–ª"]):
            facts_found.append(("—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 4))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        for fact, importance in facts_found:
            self.memory_system.add_memory(
                fact, "user_fact", importance, 0.0
            )
    
    async def daily_memory_consolidation(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–∞–º—è—Ç–∏"""
        self.memory_system._consolidate_memories()
        self.daily_message_count = 0  # —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.logger.info("–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    async def deliver_message(self, message: str, message_type: str):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö"""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç—å
        print(f"\n[{message_type.upper()}]: {message}")
    
    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    def get_conversation_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        base_stats = {
            "total_conversations": len(self.conversation_history),
            "total_ai_messages": sum(conv.get('message_count', 1) for conv in self.conversation_history),
            "daily_initiatives_sent": self.daily_message_count,
            "last_conversation": self.conversation_history[-1]['timestamp'].strftime('%H:%M:%S') if self.conversation_history else None
        }
        
        if base_stats["total_conversations"] > 0:
            base_stats["avg_messages_per_response"] = round(
                base_stats["total_ai_messages"] / base_stats["total_conversations"], 1
            )
        else:
            base_stats["avg_messages_per_response"] = 0
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        character_info = self.get_current_character_info()
        base_stats.update({
            "current_character": character_info["name"],
            "character_loaded": character_info["loaded"],
            "relationship_type": character_info.get("relationship_type", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"),
            "intimacy_level": character_info.get("intimacy_level", 0)
        })
        
        return base_stats
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞"""
        self.logger.info("–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω")
        
        while True:
            await asyncio.sleep(1)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞"""
        self.scheduler.shutdown()
        self.logger.info("AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
