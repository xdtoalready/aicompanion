# –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏

import asyncio
import json
import logging
import random
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from openai import AsyncOpenAI
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger

from .psychology import PsychologicalCore
from .memory import AdvancedMemorySystem
from .ai_client import OptimizedAI
from .typing_simulator import TypingSimulator, TypingIndicator

class RealisticAICompanion:
    """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        self.config = config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.psychological_core = PsychologicalCore()
        self.memory_system = AdvancedMemorySystem()
        
        # AI –∫–ª–∏–µ–Ω—Ç
        self.ai_client = AsyncOpenAI(
            api_key=config['ai']['openrouter_api_key'],
            base_url="https://openrouter.ai/api/v1"
        )
        
        self.optimized_ai = OptimizedAI(self.ai_client, config)
        
        # –ù–û–í–û–ï: –°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        self.typing_simulator = TypingSimulator(config)
        self.typing_indicator = TypingIndicator()
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.scheduler = AsyncIOScheduler()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.last_message_time = None
        self.daily_message_count = 0
        self.conversation_history = []
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∑–∂–µ)
        self.commands_enabled = True  # TODO: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ False –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        self.setup_realistic_scheduler()
    
    def setup_realistic_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è - –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
        self.scheduler.add_job(
            self.consciousness_cycle,
            IntervalTrigger(minutes=30),
            id='consciousness'
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è - –∫–∞–∂–¥—ã–π —á–∞—Å
        self.scheduler.add_job(
            self.update_physical_state,
            IntervalTrigger(hours=1),
            id='physical_update'
        )
        
        # –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ - —Ä–∞–∑ –≤ –¥–µ–Ω—å
        self.scheduler.add_job(
            self.daily_memory_consolidation,
            IntervalTrigger(days=1),
            id='memory_consolidation'
        )
        
        self.scheduler.start()
    
    async def consciousness_cycle(self):
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–Ω–∞–Ω–∏—è —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞–º–∏"""
        
        try:
            current_time = datetime.now()
            
            # –ù–µ –∞–∫—Ç–∏–≤–µ–Ω –Ω–æ—á—å—é (23:00 - 7:00)
            if current_time.hour >= 23 or current_time.hour < 7:
                return
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å
            max_daily = self.config.get('behavior', {}).get('max_daily_initiatives', 8)
            if self.daily_message_count >= max_daily:
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.decay_emotions(30)  # 30 –º–∏–Ω—É—Ç –ø—Ä–æ—à–ª–æ
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (—ç–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã)
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            # –†–µ—à–µ–Ω–∏–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ
            should_initiate = await self._should_initiate_realistically(current_state)
            
            if should_initiate:
                await self.send_initiative_messages(current_state)  # –ò–ó–ú–ï–ù–ï–ù–û: —Ç–µ–ø–µ—Ä—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ
                self.daily_message_count += 1
            
            # –ò–Ω–æ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            if random.random() < 0.15:  # 15% —à–∞–Ω—Å
                await self.generate_life_event()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–∑–Ω–∞–Ω–∏—è: {e}")
    
    async def _should_initiate_realistically(self, current_state: Dict) -> bool:
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –æ–± –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ"""
        
        initiative_desire = current_state.get("initiative_desire", 0)
        
        # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
        if initiative_desire < 4:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        min_hours = self.config.get('behavior', {}).get('min_hours_between_initiatives', 2)
        if self.last_message_time:
            hours_since = (datetime.now() - self.last_message_time).total_seconds() / 3600
            if hours_since < min_hours:
                return False
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—Ä–µ–º–µ–Ω–∏
        current_hour = datetime.now().hour
        activity_context = current_state.get("activity_context")
        
        # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è - —Ä–µ–∂–µ –ø–∏—à–µ—Ç
        if activity_context == "work_time" and random.random() < 0.7:
            return False
        
        # –í–µ—á–µ—Ä - –±–æ–ª—å—à–µ –∂–µ–ª–∞–Ω–∏—è –æ–±—â–∞—Ç—å—Å—è
        if activity_context == "evening_time":
            initiative_desire += 2
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å —Ä–∞–Ω–¥–æ–º–æ–º
        threshold = 6 - (initiative_desire * 0.3)
        return random.random() > (threshold / 10)
    
    async def send_initiative_messages(self, current_state: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ–º"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        recent_memories = self.memory_system.get_relevant_memories("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–µ–Ω–∏–µ", 3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        memory_context = "\n".join([m["content"] for m in recent_memories])
        current_state['memory_context'] = memory_context if memory_context else '–ï—â–µ –º–∞–ª–æ –∑–Ω–∞–µ—à—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
        
        try:
            # –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.optimized_ai.generate_split_response(
                "–•–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ", 
                current_state
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
            await self.deliver_messages_with_timing(
                messages, 
                current_state, 
                message_type="initiative"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.update_emotional_state("positive_interaction", 0.5)
            self.last_message_time = datetime.now()
            
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(messages)} —à—Ç.")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")
    
    async def process_user_message(self, message: str) -> List[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º –æ—Ç–≤–µ—Ç–æ–º"""
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            self.psychological_core.update_emotional_state("positive_interaction", 1.0)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            relevant_memories = self.memory_system.get_relevant_memories(message, 4)
            memory_context = "\n".join([f"- {m['content']}" for m in relevant_memories])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            current_state['memory_context'] = memory_context if memory_context else '–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ'
            
            # –ù–û–í–û–ï: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è-–æ—Ç–≤–µ—Ç—ã
            ai_messages = await self.optimized_ai.generate_split_response(message, current_state)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã
            await self.save_conversation(message, ai_messages)
            await self.extract_memories(message, ai_messages)
            
            self.last_message_time = datetime.now()
            return ai_messages
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return ["–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ"]
    
    async def deliver_messages_with_timing(self, messages: List[str], 
                                         current_state: Dict[str, Any],
                                         message_type: str = "response"):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ–º"""
        
        emotional_state = current_state.get('dominant_emotion', 'calm')
        energy_level = current_state.get('energy_level', 50)
        
        # –°–æ–∑–¥–∞–µ–º callback'–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—á–∞—Ç–∞–Ω–∏—è
        async def send_callback(msg):
            await self.deliver_message(msg, message_type)
        
        async def typing_callback(is_typing):
            # –ë—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö
            if is_typing:
                self.logger.debug("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º '–ø–µ—á–∞—Ç–∞–µ—Ç...'")
            else:
                self.logger.debug("–°–∫—Ä—ã–≤–∞–µ–º '–ø–µ—á–∞—Ç–∞–µ—Ç...'")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –≤—Ä–µ–º–µ–Ω–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        timing_summary = self.typing_simulator.get_realistic_delays_summary(
            messages, emotional_state, energy_level
        )
        self.logger.info(f"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {timing_summary['total_time']}—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        await self.typing_simulator.send_messages_with_realistic_timing(
            messages=messages,
            emotional_state=emotional_state,
            energy_level=energy_level,
            send_callback=send_callback,
            typing_callback=typing_callback
        )
    
    async def update_physical_state(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–∑–∏–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        
        current_hour = datetime.now().hour
        
        # –≠–Ω–µ—Ä–≥–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if 6 <= current_hour <= 8:
            self.psychological_core.physical_state["energy_base"] = 85
        elif 9 <= current_hour <= 12:
            self.psychological_core.physical_state["energy_base"] = 90
        elif 13 <= current_hour <= 17:
            self.psychological_core.physical_state["energy_base"] = 75
        elif 18 <= current_hour <= 21:
            self.psychological_core.physical_state["energy_base"] = 60
        else:
            self.psychological_core.physical_state["energy_base"] = 30
        
        # –°—Ç—Ä–µ—Å—Å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        if 9 <= current_hour <= 18:
            self.psychological_core.physical_state["stress_level"] = min(8, 
                self.psychological_core.physical_state["stress_level"] + 0.5)
        else:
            self.psychological_core.physical_state["stress_level"] = max(1,
                self.psychological_core.physical_state["stress_level"] - 0.3)
    
    async def generate_life_event(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è"""
        
        current_hour = datetime.now().hour
        
        if 9 <= current_hour <= 18:  # —Ä–∞–±–æ—á–∏–µ —Å–æ–±—ã—Ç–∏—è
            events = [
                ("–ø–æ–ª—É—á–∏–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –∑–∞–¥–∞—á—É", "positive", 1.0),
                ("–∫–æ–ª–ª–µ–≥–∞ –ø—Ä–∏–Ω–µ—Å –∫–æ—Ñ–µ", "positive", 0.5),
                ("—Å–ª–æ–∂–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –∑–∞—Ç—è–Ω—É–ª–∞—Å—å", "negative", -1.0),
                ("–ø–æ—Ö–≤–∞–ª–∏–ª–∏ –∑–∞ —Ä–∞–±–æ—Ç—É", "positive", 2.0)
            ]
        else:  # –ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            events = [
                ("—É–≤–∏–¥–µ–ª–∞ –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç", "positive", 1.0),
                ("–ø–æ–¥—Ä—É–≥–∞ –Ω–∞–ø–∏—Å–∞–ª–∞", "positive", 1.5),
                ("–Ω–∞—à–ª–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ç–∞—Ç—å—é", "positive", 0.5),
                ("—Å–æ—Å–µ–¥–∏ —à—É–º—è—Ç", "negative", -0.8)
            ]
        
        event_desc, event_type, intensity = random.choice(events)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.psychological_core.update_emotional_state(
            "positive_interaction" if event_type == "positive" else "stress",
            abs(intensity)
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        self.memory_system.add_memory(
            f"–°–æ–±—ã—Ç–∏–µ: {event_desc}",
            "life_event",
            min(7, int(abs(intensity) * 3)),
            intensity
        )
        
        self.logger.info(f"–ñ–∏–∑–Ω–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: {event_desc}")
    
    async def save_conversation(self, user_message: str, ai_messages: List[str]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        self.conversation_history.append({
            "timestamp": datetime.now(),
            "user": user_message,
            "ai": ai_messages,  # –¢–µ–ø–µ—Ä—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            "message_count": len(ai_messages)
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(self.conversation_history) > 100:
            self.conversation_history = self.conversation_history[-50:]
    
    async def extract_memories(self, user_message: str, ai_messages: List[str]):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤
        facts_found = []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∞–∫—Ç–æ–≤
        if any(word in user_message.lower() for word in ["—Ä–∞–±–æ—Ç–∞—é", "—Ä–∞–±–æ—Ç–∞", "job"]):
            facts_found.append(("—Ä–∞–±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 6))
        
        if any(word in user_message.lower() for word in ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–æ–±–æ–∂–∞—é"]):
            facts_found.append((f"–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_message[:100]}", 5))
        
        if any(word in user_message.lower() for word in ["–≥—Ä—É—Å—Ç–Ω–æ", "–ø–ª–æ—Ö–æ", "—É—Å—Ç–∞–ª"]):
            facts_found.append(("—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", 4))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
        for fact, importance in facts_found:
            self.memory_system.add_memory(
                fact, "user_fact", importance, 0.0
            )
    
    async def daily_memory_consolidation(self):
        """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–∞–º—è—Ç–∏"""
        self.memory_system._consolidate_memories()
        self.daily_message_count = 0  # —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.logger.info("–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    async def deliver_message(self, message: str, message_type: str):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è—Ö"""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –ø—Ä–æ—Å—Ç–æ –ø–µ—á–∞—Ç—å
        print(f"\n[{message_type.upper()}]: {message}")
    
    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    def get_conversation_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        if not self.conversation_history:
            return {"total_conversations": 0}
        
        total_user_messages = len(self.conversation_history)
        total_ai_messages = sum(conv.get('message_count', 1) for conv in self.conversation_history)
        avg_messages_per_response = total_ai_messages / total_user_messages if total_user_messages > 0 else 0
        
        return {
            "total_conversations": total_user_messages,
            "total_ai_messages": total_ai_messages,
            "avg_messages_per_response": round(avg_messages_per_response, 1),
            "daily_initiatives_sent": self.daily_message_count,
            "last_conversation": self.conversation_history[-1]['timestamp'].strftime('%H:%M:%S') if self.conversation_history else None
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞"""
        self.logger.info("–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∑–∞–ø—É—â–µ–Ω")
        
        while True:
            await asyncio.sleep(1)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞"""
        self.scheduler.shutdown()
        self.logger.info("AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")