# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º

import asyncio
import logging
import sqlite3
import math
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from openai import AsyncOpenAI

class EmotionalMemoryConsolidator:
    """–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏"""
    
    def __init__(self, db_path: str, api_manager, config: Dict):
        self.db_path = db_path
        self.api_manager = api_manager  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º manager
        self.config = config
        self.logger = logging.getLogger(__name__)
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–∞–º—è—Ç–∏
        self.emotion_memory_impact = {
            "joy": 1.5,         # –†–∞–¥–æ—Å—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∑–∞–ø–æ–º–∏–Ω–∞—é—Ç—Å—è —è—Ä—á–µ
            "love": 1.8,        # –õ—é–±–æ–≤—å - —Å–∞–º—ã–µ —Å–∏–ª—å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            "excitement": 1.3,  # –í–æ–∑–±—É–∂–¥–µ–Ω–∏–µ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–∞–º—è—Ç—å
            "surprise": 1.4,    # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ª—É—á—à–µ –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è
            "anger": 1.2,       # –°–∏–ª—å–Ω—ã–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Ç–æ–∂–µ –≤–∞–∂–Ω—ã
            "sadness": 1.1,     # –ì—Ä—É—Å—Ç—å —É–º–µ—Ä–µ–Ω–Ω–æ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–∞–º—è—Ç—å
            "fear": 1.6,        # –°—Ç—Ä–∞—Ö - —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ –≤–∞–∂–µ–Ω –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è
            "disgust": 0.8,     # –û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å–∫–ª–æ–Ω–Ω—ã –∑–∞–±—ã–≤–∞—Ç—å
            "calm": 1.0,        # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
            "boredom": 0.6      # –°–∫—É—á–Ω–æ–µ –±—ã—Å—Ç—Ä–æ –∑–∞–±—ã–≤–∞–µ—Ç—Å—è
        }
        
        # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ (–¥–Ω–∏ -> —É—Ä–æ–≤–µ–Ω—å)
        self.consolidation_schedule = {
            1: "immediate",     # 1 –¥–µ–Ω—å - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            5: "short_term",    # 5 –¥–Ω–µ–π - –ø–µ—Ä–≤–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
            30: "medium_term",  # 30 –¥–Ω–µ–π - —Å—Ä–µ–¥–Ω—è—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è
            90: "long_term",    # 90 –¥–Ω–µ–π - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å
            365: "lifetime"     # 1 –≥–æ–¥ - –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        }
    
    async def run_emotional_consolidation_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        self.logger.info("üß†üíï –ó–∞–ø—É—Å–∫ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤
            user_context = await self._analyze_user_context()
            
            # –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
            for days, level in self.consolidation_schedule.items():
                await self._consolidate_emotional_memories(days, level, user_context)
            
            # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–µ —É–¥–∞–ª—è–µ–º!)
            await self._archive_old_memories(user_context)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –¥–æ—Å—Ç—É–ø–∞
            await self._update_access_patterns()
            
            self.logger.info("‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏: {e}")
    
    async def _analyze_user_context(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤"""
        
        try:
            with sqlite3.connect(self.db_path, timeout=30) as conn:
                cursor = conn.cursor()
                
                # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é)
                week_ago = (datetime.now() - timedelta(days=7)).isoformat()
                cursor.execute("""
                    SELECT COUNT(*) FROM conversations 
                    WHERE timestamp >= ?
                """, (week_ago,))
                
                weekly_activity = cursor.fetchone()[0] or 0
                
                # –°—Ä–µ–¥–Ω—è—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
                cursor.execute("""
                    SELECT AVG(emotional_intensity), AVG(importance)
                    FROM memories 
                    WHERE created_at >= ? AND emotional_intensity IS NOT NULL
                """, (week_ago,))
                
                result = cursor.fetchone()
                avg_emotion = result[0] if result[0] else 5.0
                avg_importance = result[1] if result[1] else 5.0
                
                # –°—Ç–∞–¥–∏—è –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–∏–∑ character_loader)
                relationship_stage = self._get_relationship_stage()
                
                # –û–±—â–∏–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–æ–Ω
                cursor.execute("""
                    SELECT emotion_type, COUNT(*) 
                    FROM memories 
                    WHERE created_at >= ? AND emotion_type IS NOT NULL
                    GROUP BY emotion_type
                    ORDER BY COUNT(*) DESC
                """, (week_ago,))
                
                dominant_emotions = dict(cursor.fetchall())
                
                return {
                    "weekly_activity": weekly_activity,
                    "avg_emotional_intensity": avg_emotion,
                    "avg_importance": avg_importance,
                    "relationship_stage": relationship_stage,
                    "dominant_emotions": dominant_emotions,
                    "activity_level": self._calculate_activity_level(weekly_activity)
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {
                "weekly_activity": 10,
                "avg_emotional_intensity": 5.0,
                "avg_importance": 5.0,
                "relationship_stage": "—Ä–∞–∑–≤–∏—Ç–∏–µ",
                "dominant_emotions": {},
                "activity_level": "medium"
            }
    
    def _calculate_activity_level(self, weekly_messages: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if weekly_messages > 50:
            return "high"
        elif weekly_messages > 20:
            return "medium"
        elif weekly_messages > 5:
            return "low"
        else:
            return "minimal"
    
    def _get_relationship_stage(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞–¥–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏–∑ character_loader"""
        try:
            from .character_loader import character_loader
            character = character_loader.get_current_character()
            
            if character:
                relationship = character.get('current_relationship', {})
                stage = relationship.get('stage', '—Ä–∞–∑–≤–∏—Ç–∏–µ')
                intimacy = relationship.get('intimacy_level', 5)
                
                # –£—Ç–æ—á–Ω—è–µ–º —Å—Ç–∞–¥–∏—é –ø–æ —É—Ä–æ–≤–Ω—é –±–ª–∏–∑–æ—Å—Ç–∏
                if intimacy <= 3:
                    return "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
                elif intimacy <= 6:
                    return "–¥—Ä—É–∂–±–∞"
                elif intimacy <= 8:
                    return "–±–ª–∏–∑–æ—Å—Ç—å"
                else:
                    return "–≥–ª—É–±–æ–∫–∏–µ_–æ—Ç–Ω–æ—à–µ–Ω–∏—è"
            
            return "—Ä–∞–∑–≤–∏—Ç–∏–µ"
            
        except Exception:
            return "—Ä–∞–∑–≤–∏—Ç–∏–µ"
    
    def _calculate_dynamic_threshold(self, level: str, user_context: Dict) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ—Ä–æ–≥–∏
        base_thresholds = {
            "immediate": 3.0,
            "short_term": 4.0,
            "medium_term": 6.0,
            "long_term": 7.5,
            "lifetime": 9.0
        }
        
        threshold = base_thresholds.get(level, 5.0)
        
        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        activity_level = user_context.get("activity_level", "medium")
        relationship_stage = user_context.get("relationship_stage", "—Ä–∞–∑–≤–∏—Ç–∏–µ")
        avg_emotion = user_context.get("avg_emotional_intensity", 5.0)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –±–æ–ª—å—à–µ
        if activity_level == "high":
            threshold -= 1.0
        elif activity_level == "low":
            threshold += 0.5
        elif activity_level == "minimal":
            threshold += 1.0
            
        # –í –Ω–∞—á–∞–ª–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –≤—Å—ë –≤–∞–∂–Ω–µ–µ
        if relationship_stage == "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ":
            threshold -= 1.5
        elif relationship_stage == "–¥—Ä—É–∂–±–∞":
            threshold -= 0.5
        elif relationship_stage == "–≥–ª—É–±–æ–∫–∏–µ_–æ—Ç–Ω–æ—à–µ–Ω–∏—è":
            threshold += 0.5  # –ë–æ–ª–µ–µ –∏–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã –≤ –¥–æ–ª–≥–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        if avg_emotion > 7.0:
            threshold -= 0.5
        elif avg_emotion < 3.0:
            threshold += 0.5
        
        # –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–ø—É—Å–∫–∞–µ–º—Å—è –Ω–∏–∂–µ –º–∏–Ω–∏–º—É–º–∞
        return max(1.0, threshold)
    
    async def _consolidate_emotional_memories(self, days_old: int, level: str, user_context: Dict):
        """–ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è —Å —É—á—ë—Ç–æ–º —ç–º–æ—Ü–∏–π"""
        
        cutoff_date = datetime.now() - timedelta(days=days_old)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏
        importance_threshold = self._calculate_dynamic_threshold(level, user_context)
        
        memories_to_consolidate = self._get_emotional_memories_for_consolidation(
            cutoff_date, level, importance_threshold
        )
        
        if not memories_to_consolidate:
            return
        
        self.logger.info(f"üíï –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è {len(memories_to_consolidate)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Ä–æ–≤–Ω—è {level} (–ø–æ—Ä–æ–≥: {importance_threshold:.1f})")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º
        grouped_memories = self._group_by_emotional_context(memories_to_consolidate)
        
        for group_key, group_memories in grouped_memories.items():
            try:
                consolidated = await self._emotionally_compress_memories(group_memories, level, user_context)
                
                if consolidated:
                    await self._save_emotional_consolidated_memory(group_memories, consolidated, level, user_context)
                    
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã {group_key}: {e}")
    
    def _get_emotional_memories_for_consolidation(self, cutoff_date: datetime, level: str, threshold: float) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á—ë—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        
        try:
            with sqlite3.connect(self.db_path, timeout=30) as conn:
                cursor = conn.cursor()
                
                # –°–ª–æ–∂–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å —ç–º–æ—Ü–∏—è–º–∏
                cursor.execute("""
                    SELECT id, memory_type, content, importance, created_at,
                           emotional_intensity, emotion_type, access_count,
                           consolidation_level, last_consolidated,
                           (importance + COALESCE(emotional_intensity * 0.3, 0) + COALESCE(access_count * 0.1, 0)) as total_importance
                    FROM memories 
                    WHERE created_at <= ? 
                    AND (consolidation_level IS NULL OR consolidation_level != ?)
                    AND (importance + COALESCE(emotional_intensity * 0.3, 0) + COALESCE(access_count * 0.1, 0)) >= ?
                    AND is_deeply_archived != 1
                    ORDER BY total_importance DESC, created_at ASC
                """, (cutoff_date.isoformat(), level, threshold))
                
                memories = []
                for row in cursor.fetchall():
                    memories.append({
                        "id": row[0],
                        "memory_type": row[1],
                        "content": row[2],
                        "importance": row[3],
                        "created_at": row[4],
                        "emotional_intensity": row[5] or 5.0,
                        "emotion_type": row[6] or "calm",
                        "access_count": row[7] or 0,
                        "consolidation_level": row[8],
                        "last_consolidated": row[9],
                        "total_importance": row[10]
                    })
                
                return memories
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []
    
    def _group_by_emotional_context(self, memories: List[Dict]) -> Dict[str, List[Dict]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        
        groups = {}
        
        for memory in memories:
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ, —Ç–∏–ø—É —ç–º–æ—Ü–∏–∏ –∏ –≤–∞–∂–Ω–æ—Å—Ç–∏
            date_key = memory["created_at"][:10]  # YYYY-MM-DD
            emotion_type = memory["emotion_type"]
            emotion_intensity = memory["emotional_intensity"]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä—É–ø–ø—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏
            if emotion_intensity >= 8:
                intensity_group = "high"
            elif emotion_intensity >= 6:
                intensity_group = "medium"
            else:
                intensity_group = "low"
            
            group_key = f"{date_key}_{emotion_type}_{intensity_group}_{memory['memory_type']}"
            
            if group_key not in groups:
                groups[group_key] = []
            
            groups[group_key].append(memory)
        
        return groups
    
    async def _emotionally_compress_memories(self, memories: List[Dict], level: str, user_context: Dict) -> str:
        """–°–∂–∏–º–∞–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á—ë—Ç–æ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        
        if not memories:
            return ""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≥—Ä—É–ø–ø—ã
        emotions = [m["emotion_type"] for m in memories]
        avg_intensity = sum(m["emotional_intensity"] for m in memories) / len(memories)
        dominant_emotion = max(set(emotions), key=emotions.count)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        memory_texts = []
        for memory in memories:
            emotion_marker = f"[{memory['emotion_type']}:{memory['emotional_intensity']:.1f}]"
            access_marker = f"[–¥–æ—Å—Ç—É–ø:{memory['access_count']}]" if memory['access_count'] > 3 else ""
            memory_texts.append(f"{emotion_marker}{access_marker} {memory['content']}")
        
        full_text = "\n".join(memory_texts)
        
        # –°–æ–∑–¥–∞—ë–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        compression_prompt = self._build_emotional_compression_prompt(level, dominant_emotion, avg_intensity, user_context)
        
        try:
            # –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º analytics API –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
            from .multi_api_manager import APIUsageType
            
            response = await self.api_manager.make_request(
                APIUsageType.ANALYTICS,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º analytics –ø—É–ª
                model=self.config.get('ai', {}).get('model', 'deepseek/deepseek-chat'),
                messages=[
                    {"role": "system", "content": compression_prompt},
                    {"role": "user", "content": f"–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏:\n{full_text}"}
                ],
                max_tokens=250,
                temperature=0.2
            )
            
            compressed = response.choices[0].message.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ —Å–∂–∞—Ç–æ–π –ø–∞–º—è—Ç–∏
            emotional_summary = f"[–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {dominant_emotion}, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {avg_intensity:.1f}] {compressed}"
            
            self.logger.debug(f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ: {len(full_text)} -> {len(emotional_summary)} —Å–∏–º–≤–æ–ª–æ–≤")
            return emotional_summary
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∂–∞—Ç–∏—è: {e}")
            return ""
    
    def _build_emotional_compression_prompt(self, level: str, dominant_emotion: str, avg_intensity: float, user_context: Dict) -> str:
        """–°–æ–∑–¥–∞—ë—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è"""
        
        relationship_stage = user_context.get("relationship_stage", "—Ä–∞–∑–≤–∏—Ç–∏–µ")
        
        base_prompt = f"""–¢—ã —Å–∏—Å—Ç–µ–º–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –Ω–∞ —Å—Ç–∞–¥–∏–∏ "{relationship_stage}".
–ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–µ—à—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–π —ç–º–æ—Ü–∏–µ–π "{dominant_emotion}" (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å {avg_intensity:.1f}).

–ü–†–ò–ù–¶–ò–ü–´ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ô –ö–û–ù–°–û–õ–ò–î–ê–¶–ò–ò:
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π —á—Ç–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —è—Ä–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –≤–∞–∂–Ω–µ–µ –æ–±—ã—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
‚Ä¢ –ü–æ–º–Ω–∏ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–º —Ä–æ—Å—Ç–µ
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        level_specific = {
            "immediate": "–ü–µ—Ä–≤–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: —Å–æ—Ö—Ä–∞–Ω–∏ –≤—Å–µ —ç–º–æ—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª–∏, —É–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä—ã.",
            
            "short_term": f"""–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è: 
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
‚Ä¢ –£–±–µ—Ä–∏ –º–µ–ª–∫–∏–µ –¥–µ—Ç–∞–ª–∏, –Ω–æ –æ—Å—Ç–∞–≤—å —Ç–æ —á—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è
‚Ä¢ –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —ç–º–æ—Ü–∏–∏ "{dominant_emotion}" - –æ–Ω–∞ –±—ã–ª–∞ –≤–∞–∂–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è""",

            "medium_term": f"""–°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è:
‚Ä¢ –°–∂–º–∏ –¥–æ –∫–ª—é—á–µ–≤—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫ —ç–º–æ—Ü–∏—è "{dominant_emotion}" –ø–æ–≤–ª–∏—è–ª–∞ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è  
‚Ä¢ –£–±–µ—Ä–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –æ—Å—Ç–∞–≤—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å—É—Ç—å""",

            "long_term": f"""–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è:
‚Ä¢ –°–æ–∑–¥–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É —Å–∞–º–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ
‚Ä¢ –ö–∞–∫ —ç—Ç–∞ —ç–º–æ—Ü–∏—è "{dominant_emotion}" —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Å–∂–∞—Ç–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏""",

            "lifetime": f"""–ü–æ–∂–∏–∑–Ω–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:
‚Ä¢ –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤–µ—Ö–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —ç–º–æ—Ü–∏—é "{dominant_emotion}"
‚Ä¢ –§—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã, –æ–ø—Ä–µ–¥–µ–ª–∏–≤—à–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"""
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–∏
        emotion_instructions = {
            "love": "–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –º–æ–º–µ–Ω—Ç–∞–º –Ω–µ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ - –æ–Ω–∏ –æ—Å–Ω–æ–≤–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π",
            "joy": "–°–æ—Ö—Ä–∞–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–¥–æ—Å—Ç–∏ - —á—Ç–æ –¥–µ–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—á–∞—Å—Ç–ª–∏–≤—ã–º",
            "excitement": "–û—Ç–º–µ—Ç—å —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç–Ω—Ç—É–∑–∏–∞–∑–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å", 
            "anger": "–ó–∞–ø–æ–º–Ω–∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ - –≤–∞–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º",
            "sadness": "–°–æ—Ö—Ä–∞–Ω–∏ —á—Ç–æ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ –±—É–¥—É—â–µ–º",
            "fear": "–û—Ç–º–µ—Ç—å —Å—Ç—Ä–∞—Ö–∏ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ - –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –ø–æ–º–æ—â–∏",
            "surprise": "–ó–∞–ø–æ–º–Ω–∏ —á—Ç–æ —É–¥–∏–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –¥–ª—è –±—É–¥—É—â–∏—Ö –ø—Ä–∏—è—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"
        }
        
        emotion_instruction = emotion_instructions.get(dominant_emotion, "–°–æ—Ö—Ä–∞–Ω–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –æ–∫—Ä–∞—Å–∫—É –º–æ–º–µ–Ω—Ç–∞")
        
        return f"{base_prompt}\n\n{level_specific.get(level, '')}\n\n–°–ü–ï–¶–ò–ê–õ–¨–ù–û –î–õ–Ø –≠–ú–û–¶–ò–ò: {emotion_instruction}"
    
    async def _save_emotional_consolidated_memory(self, original_memories: List[Dict], 
                                                consolidated_text: str, level: str, user_context: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–∞–º—è—Ç—å"""
        
        try:
            with sqlite3.connect(self.db_path, timeout=30) as conn:
                cursor = conn.cursor()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–≤–æ–¥–Ω—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                emotions = [m["emotion_type"] for m in original_memories]
                avg_intensity = sum(m["emotional_intensity"] for m in original_memories) / len(original_memories)
                dominant_emotion = max(set(emotions), key=emotions.count)
                max_importance = max(m["importance"] for m in original_memories)
                total_access = sum(m["access_count"] for m in original_memories)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫ –≤–∞–∂–Ω–æ—Å—Ç–∏
                emotion_boost = self.emotion_memory_impact.get(dominant_emotion, 1.0)
                final_importance = min(10.0, max_importance * emotion_boost)
                
                # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                cursor.execute("""
                    INSERT INTO memories 
                    (character_id, memory_type, content, importance, created_at,
                     emotional_intensity, emotion_type, access_count,
                     consolidation_level, last_consolidated, is_consolidated)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    1,  # character_id
                    "emotional_consolidated",
                    consolidated_text,
                    final_importance,
                    datetime.now().isoformat(),
                    avg_intensity,
                    dominant_emotion,
                    total_access,
                    level,
                    datetime.now().isoformat(),
                    True
                ))
                
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–µ —É–¥–∞–ª—è–µ–º!)
                original_ids = [str(m["id"]) for m in original_memories]
                placeholders = ",".join(["?" for _ in original_ids])
                
                cursor.execute(f"""
                    UPDATE memories 
                    SET consolidation_level = ?, 
                        last_consolidated = ?,
                        is_archived = ?,
                        access_difficulty = 3
                    WHERE id IN ({placeholders})
                """, [level, datetime.now().isoformat(), True] + original_ids)
                
                conn.commit()
                
                self.logger.info(f"üíæüíï –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {dominant_emotion} (–≤–∞–∂–Ω–æ—Å—Ç—å: {final_importance:.1f})")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏: {e}")
    
    async def _archive_old_memories(self, user_context: Dict):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Å—Ç–∞—Ä—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–µ —É–¥–∞–ª—è–µ—Ç!)"""
        
        # –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–µ —Å—Ä–æ–∫–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        activity_level = user_context.get("activity_level", "medium")
        
        if activity_level == "high":
            archive_days = 365  # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –∞—Ä—Ö–∏–≤ —á–µ—Ä–µ–∑ –≥–æ–¥
        elif activity_level == "medium":  
            archive_days = 180  # –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –ø–æ–ª–≥–æ–¥–∞
        else:
            archive_days = 90   # –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - 3 –º–µ—Å—è—Ü–∞
        
        cutoff_date = datetime.now() - timedelta(days=archive_days)
        
        try:
            with sqlite3.connect(self.db_path, timeout=30) as conn:
                cursor = conn.cursor()
                
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
                cursor.execute("""
                    UPDATE memories 
                    SET is_deeply_archived = 1,
                        access_difficulty = 8
                    WHERE created_at <= ? 
                    AND importance < 6
                    AND emotional_intensity < 6 
                    AND access_count < 2
                    AND is_archived = 1
                    AND is_deeply_archived != 1
                """, (cutoff_date.isoformat(),))
                
                archived_count = cursor.rowcount
                conn.commit()
                
                if archived_count > 0:
                    self.logger.info(f"üì¶ –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count} —Å—Ç–∞—Ä—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π (–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    async def _update_access_patterns(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º"""
        
        try:
            with sqlite3.connect(self.db_path, timeout=30) as conn:
                cursor = conn.cursor()
                
                # –£–º–µ–Ω—å—à–∞–µ–º access_difficulty –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                cursor.execute("""
                    UPDATE memories 
                    SET access_difficulty = CASE 
                        WHEN access_count > 10 THEN 1
                        WHEN access_count > 5 THEN 2  
                        WHEN access_count > 2 THEN 3
                        ELSE COALESCE(access_difficulty, 5)
                    END
                    WHERE access_count > 0
                """)
                
                # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ä—ã–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º
                month_ago = (datetime.now() - timedelta(days=30)).isoformat()
                cursor.execute("""
                    UPDATE memories 
                    SET access_difficulty = COALESCE(access_difficulty, 5) + 1
                    WHERE last_accessed < ? 
                    AND access_count = 0
                    AND access_difficulty < 8
                """, (month_ago,))
                
                conn.commit()
                
                self.logger.debug("üîÑ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–º—è—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def enhance_existing_memories_with_emotions(db_path: str, ai_client, config: Dict):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
    
    try:
        with sqlite3.connect(db_path, timeout=30) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫
            cursor.execute("""
                SELECT id, content, importance 
                FROM memories 
                WHERE emotional_intensity IS NULL 
                AND content IS NOT NULL
                AND LENGTH(content) > 10
                LIMIT 50
            """)
            
            memories_to_enhance = cursor.fetchall()
            
            if not memories_to_enhance:
                return
            
            logging.info(f"üé≠ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –∫ {len(memories_to_enhance)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º...")
            
            for memory_id, content, importance in memories_to_enhance:
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    emotion_analysis = await analyze_memory_emotion(content, ai_client, config)
                    
                    if emotion_analysis:
                        cursor.execute("""
                            UPDATE memories 
                            SET emotional_intensity = ?,
                                emotion_type = ?
                            WHERE id = ?
                        """, (
                            emotion_analysis["intensity"],
                            emotion_analysis["emotion"],
                            memory_id
                        ))
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –¥–ª—è –ø–∞–º—è—Ç–∏ {memory_id}: {e}")
            
            conn.commit()
            logging.info("‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

async def analyze_memory_emotion(content: str, ai_client, config: Dict) -> Optional[Dict[str, Any]]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    
    try:
        from .multi_api_manager import APIUsageType
        
        prompt = """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞.
        
–û–ø—Ä–µ–¥–µ–ª–∏:
1. –û—Å–Ω–æ–≤–Ω—É—é —ç–º–æ—Ü–∏—é (joy, love, excitement, surprise, anger, sadness, fear, disgust, calm, boredom)
2. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —ç–º–æ—Ü–∏–∏ –æ—Ç 1 –¥–æ 10

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: emotion_type:intensity
–ù–∞–ø—Ä–∏–º–µ—Ä: joy:8 –∏–ª–∏ sadness:3"""

        response = await api_manager.make_request(
            APIUsageType.ANALYTICS,
            model=config.get('ai', {}).get('model', 'deepseek/deepseek-chat'),
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": f"–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {content}"}
            ],
            max_tokens=50,
            temperature=0.1
        )
        
        result = response.choices[0].message.content.strip()
        
        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        if ":" in result:
            emotion, intensity_str = result.split(":", 1)
            emotion = emotion.strip().lower()
            
            try:
                intensity = float(intensity_str.strip())
                intensity = max(1.0, min(10.0, intensity))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                
                return {
                    "emotion": emotion,
                    "intensity": intensity
                }
            except ValueError:
                pass
        
        return None
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {e}")
        return None