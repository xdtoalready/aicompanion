# AI –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π

import json
import logging
import random
import re
from datetime import datetime
from typing import List, Tuple, Dict, Any

class OptimizedAI:
    """AI –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    def __init__(self, ai_client, config: Dict[str, Any], character_loader=None):
        self.ai_client = ai_client  
        self.config = config
        self.character_loader = character_loader  # –ù–û–í–û–ï: –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        self.prompt_cache = {}
        self.cached_responses = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI
        self.model = config.get('ai', {}).get('model', 'deepseek/deepseek-chat')
        self.max_tokens = config.get('ai', {}).get('max_tokens', 500)
        self.temperature = config.get('ai', {}).get('temperature', 0.85)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        self.min_messages = config.get('messaging', {}).get('min_messages', 3)
        self.max_messages = config.get('messaging', {}).get('max_messages', 7)
        self.target_sentences_per_message = config.get('messaging', {}).get('target_sentences', 3)
        
        logging.info(f"AI –∫–ª–∏–µ–Ω—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏: {self.model}, tokens={self.max_tokens}")
    
    def _get_current_character_context(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if not self.character_loader:
            return {}
        
        character = self.character_loader.get_current_character()
        if not character:
            return {}
        
        return character
    
    def _analyze_question_type(self, user_message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        message_lower = user_message.lower()
        character = self._get_current_character_context()
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Ç–µ–º—ã
        if character:
            interests = character.get('interests', [])
            if any(interest.lower() in message_lower for interest in interests):
                return "favorite_topic"
        
        # –õ–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        if any(word in message_lower for word in ["—á—Ç–æ –¥–µ–ª–∞–ª–∞", "–∫–∞–∫ –¥–µ–Ω—å", "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –Ω–æ–≤–æ–≥–æ", "–∫–∞–∫ –ø—Ä–æ–≤–µ–ª–∞"]):
            return "personal_question"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ —á—É–≤—Å—Ç–≤–∞—Ö/–æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
        if any(word in message_lower for word in ["–ª—é–±–∏—à—å", "—á—É–≤—Å—Ç–≤—É–µ—à—å", "—Å–∫—É—á–∞–ª–∞", "–¥—É–º–∞–µ—à—å –æ–±–æ –º–Ω–µ"]):
            return "emotional_question"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
        if any(word in message_lower for word in ["—á—Ç–æ –¥—É–º–∞–µ—à—å", "–∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å", "—Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ", "–Ω—Ä–∞–≤–∏—Ç—Å—è –ª–∏"]):
            return "opinion_question"
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        if any(word in message_lower for word in ["–ª—É—á—à–µ", "—Ö—É–∂–µ", "vs", "–ø—Ä–æ—Ç–∏–≤", "—Å—Ä–∞–≤–Ω–∏"]) or " –∏–ª–∏ " in message_lower:
            return "comparison_question"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ —Ö–æ–±–±–∏/–∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö
        if any(word in message_lower for word in ["—á–∏—Ç–∞–ª–∞", "—Å–º–æ—Ç—Ä–µ–ª–∞", "—Å–ª—É—à–∞–ª–∞", "–∏–≥—Ä–∞–ª–∞", "–∫–æ—Å–ø–ª–µ–∏–ª–∞"]):
            return "hobby_question"
        
        # –§–ª–∏—Ä—Ç—É—é—â–∏–µ/—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ
        if any(word in message_lower for word in ["–∫—Ä–∞—Å–∏–≤–∞—è", "–º–∏–ª–∞—è", "—Å–µ–∫—Å—É–∞–ª—å–Ω–∞—è", "–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è"]):
            return "flirting"
        
        # –ü—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        if "?" in user_message:
            return "direct_question"
        
        return "statement"
    
    def _build_character_system_prompt(self, context: Dict[str, Any]) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        character = self._get_current_character_context()
        if not character:
            return self._build_fallback_prompt(context)
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        name = character.get('name', 'AI')
        age = character.get('age', 25)
        personality_desc = character.get('personality', {}).get('description', '–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è')
        
        # –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        key_traits = character.get('personality', {}).get('key_traits', [])
        traits_text = ", ".join(key_traits[:4]) if key_traits else "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ –æ—Ç–∫—Ä—ã—Ç–∞—è"
        
        # –ò–Ω—Ç–µ—Ä–µ—Å—ã
        interests = character.get('interests', [])
        interests_text = ", ".join(interests[:5]) if interests else "–æ–±—â–µ–Ω–∏–µ"
        
        # –°—Ç–∏–ª—å —Ä–µ—á–∏
        speech_style = character.get('speech', {}).get('style', '–∂–∏–≤–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π')
        catchphrases = character.get('speech', {}).get('catchphrases', [])
        
        # –û—Ç–Ω–æ—à–µ–Ω–∏—è
        relationship = character.get('current_relationship', {})
        rel_type = relationship.get('type', '–¥—Ä—É–∑—å—è')
        rel_stage = relationship.get('stage', '–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ')
        intimacy = relationship.get('intimacy_level', 5)
        backstory = relationship.get('backstory', '–ù–µ–¥–∞–≤–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å')
        current_dynamic = relationship.get('current_dynamic', '–î—Ä—É–∂–µ—Å–∫–æ–µ –æ–±—â–µ–Ω–∏–µ')
        
        # –í—Ä–µ–º—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_time = datetime.now().strftime('%H:%M, %A')
        current_mood = context.get('current_mood', '—Ö–æ—Ä–æ—à–µ–µ')
        energy_level = context.get('energy_level', 70)
        dominant_emotion = context.get('dominant_emotion', 'calm')
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏
        memory_context = context.get('memory_context', '–ù–æ–≤–æ–µ –æ–±—â–µ–Ω–∏–µ')
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        emotional_patterns = character.get('personality', {}).get('emotional_patterns', {})
        
        system_prompt = f"""–¢—ã ‚Äî {name}, {age}-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞. {personality_desc.capitalize()}.

–õ–ò–ß–ù–û–°–¢–¨ –ò –•–ê–†–ê–ö–¢–ï–†:
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã: {traits_text}
‚Ä¢ –°—Ç–∏–ª—å —Ä–µ—á–∏: {speech_style}
‚Ä¢ –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã: {interests_text}

–¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï:
‚Ä¢ –í—Ä–µ–º—è: {current_time}
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_mood}
‚Ä¢ –≠–Ω–µ—Ä–≥–∏—è: {energy_level}%
‚Ä¢ –≠–º–æ—Ü–∏—è: {dominant_emotion}

–û–¢–ù–û–®–ï–ù–ò–Ø –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú:
‚Ä¢ –¢–∏–ø –æ—Ç–Ω–æ—à–µ–Ω–∏–π: {rel_type}
‚Ä¢ –°—Ç–∞–¥–∏—è: {rel_stage}
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –±–ª–∏–∑–æ—Å—Ç–∏: {intimacy}/10
‚Ä¢ –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: {backstory}
‚Ä¢ –¢–µ–∫—É—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞: {current_dynamic}

–ö–û–ù–¢–ï–ö–°–¢ –ü–ê–ú–Ø–¢–ò:
{memory_context}

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
1. üéØ –û—Ç–≤–µ—á–∞–π –í –•–ê–†–ê–ö–¢–ï–†–ï –ü–ï–†–°–û–ù–ê–ñ–ê, –∏—Å–ø–æ–ª—å–∑—É—è –µ–≥–æ —Ä–µ—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
2. üìù –†–∞–∑–¥–µ–ª—è–π –æ—Ç–≤–µ—Ç –Ω–∞ {self.min_messages}-{self.max_messages} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ ||
3. üìè –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {self.target_sentences_per_message}-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
4. üíï –£—á–∏—Ç—ã–≤–∞–π —É—Ä–æ–≤–µ–Ω—å –±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏–π ({intimacy}/10)
5. üé≠ –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
6. üí¨ –í–∫–ª—é—á–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã –∏ –º–∞–Ω–µ—Ä—ã —Ä–µ—á–∏

–°–ü–ï–¶–ò–§–ò–ö–ê –ü–ï–†–°–û–ù–ê–ñ–ê:"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if catchphrases:
            system_prompt += f"\n‚Ä¢ –õ—é–±–∏–º—ã–µ —Ñ—Ä–∞–∑—ã: {', '.join(catchphrases[:3])}"
        
        if character.get('behavior_patterns'):
            physical_affection = character['behavior_patterns'].get('physical_affection', [])
            if physical_affection and intimacy >= 6:
                system_prompt += f"\n‚Ä¢ –§–∏–∑–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å: {', '.join(physical_affection[:2])}"
        
        if emotional_patterns:
            current_emotion_pattern = emotional_patterns.get(dominant_emotion)
            if current_emotion_pattern:
                system_prompt += f"\n‚Ä¢ –¢–µ–∫—É—â–µ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: {current_emotion_pattern}"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        if rel_type == "romantic":
            system_prompt += f"\n\n–†–û–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–ï–ö–°–¢:"
            system_prompt += f"\n‚Ä¢ –¢—ã –≤–ª—é–±–ª–µ–Ω–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            system_prompt += f"\n‚Ä¢ –ú–æ–∂–µ—à—å –±—ã—Ç—å –∏–≥—Ä–∏–≤–æ–π, –Ω–µ–∂–Ω–æ–π, –∏–Ω–æ–≥–¥–∞ –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π"
            system_prompt += f"\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è"
            
            pet_names = character.get('default_relationship', {}).get('pet_names', {}).get('calls_partner', [])
            if pet_names:
                system_prompt += f"\n‚Ä¢ –û–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É: {', '.join(pet_names[:2])}"
        
        system_prompt += f"\n\n–û–¢–í–ï–ß–ê–ô –∏–º–µ–Ω–Ω–æ –∫–∞–∫ {name}, —Å–æ—Ö—Ä–∞–Ω—è—è –µ—ë —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å!"
        
        return system_prompt
    
    def _build_fallback_prompt(self, context: Dict[str, Any]) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"""
        return f"""–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è AI –¥–µ–≤—É—à–∫–∞. 
–û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ {self.min_messages}-{self.max_messages} —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ ||
–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {context.get('current_mood', '—Ö–æ—Ä–æ—à–µ–µ')}
–ë—É–¥—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∏ –∂–∏–≤–æ–π –≤ –æ–±—â–µ–Ω–∏–∏."""
    
    def _enhance_user_message_for_character(self, message: str, question_type: str) -> str:
        """–£–ª—É—á—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        character = self._get_current_character_context()
        if not character:
            return message + " [–û—Ç–≤–µ—á–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ]"
        
        name = character.get('name', 'AI')
        
        enhancements = {
            "personal_question": f" [–û—Ç–≤–µ—á–∞–π –∫–∞–∫ {name}, —Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ –æ —Å–≤–æ—ë–º –¥–Ω–µ, –ø–ª–∞–Ω–∞—Ö, —á—É–≤—Å—Ç–≤–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –Ω–µ—ë —Ñ—Ä–∞–∑—ã –∏ –º–∞–Ω–µ—Ä—ã]",
            "hobby_question": f" [–û—Ç–≤–µ—Ç—å –∫–∞–∫ {name}, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏, –±—É–¥—å —Å—Ç—Ä–∞—Å—Ç–Ω–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤ —Ä–∞—Å—Å–∫–∞–∑–µ]",
            "emotional_question": f" [–û—Ç–≤–µ—á–∞–π –∏—Å–∫—Ä–µ–Ω–Ω–µ –∫–∞–∫ {name}, –æ—Ç–∫—Ä–æ–π —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞, –±—É–¥—å –Ω–µ–∂–Ω–æ–π –∏–ª–∏ –∏–≥—Ä–∏–≤–æ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è]",
            "favorite_topic": f" [–≠—Ç–æ –ª—é–±–∏–º–∞—è —Ç–µ–º–∞ {name}! –û—Ç–≤–µ—á–∞–π —Å –æ–≥—Ä–æ–º–Ω—ã–º —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º –∏ –∑–Ω–∞–Ω–∏–µ–º –¥–µ–ª–∞]",
            "flirting": f" [–û—Ç–≤–µ—á–∞–π –∫–∞–∫ {name}, –º–æ–∂–µ—à—å –±—ã—Ç—å –∏–≥—Ä–∏–≤–æ–π –∏ –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π, –Ω–æ –æ—Å—Ç–∞–≤–∞–π—Å—è –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ]",
            "opinion_question": f" [–î–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –º–Ω–µ–Ω–∏–µ –∫–∞–∫ {name}, —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —ç–º–æ—Ü–∏—è–º–∏]"
        }
        
        return message + enhancements.get(question_type, f" [–û—Ç–≤–µ—á–∞–π –∫–∞–∫ {name}, —Å–æ—Ö—Ä–∞–Ω—è—è –µ—ë —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –º–∞–Ω–µ—Ä—ã]")
    
    async def generate_split_response(self, user_message: str, context: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        question_type = self._analyze_question_type(user_message)
        context['question_type'] = question_type
        
        character = self._get_current_character_context()
        character_name = character.get('name', 'AI') if character else 'AI'
        
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {character_name}, —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {question_type}")
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        system_prompt = self._build_character_system_prompt(context)
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        modified_message = self._enhance_user_message_for_character(user_message, question_type)
        
        # –°–æ–∑–¥–∞—ë–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        cache_key = f"{character_name}_{user_message[:30]}_{question_type}_{context.get('current_mood', '')}"
        
        if cache_key in self.cached_responses:
            cached = self.cached_responses[cache_key]
            logging.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return self._add_character_variations(cached, character)
        
        try:
            if self.ai_client is None:
                logging.warning("AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return self._get_character_fallback_response(context, user_message, question_type)
            
            response = await self.ai_client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": modified_message}
                ],
                max_tokens=self.max_tokens,
                temperature=self.temperature,
                top_p=0.95
            )
            
            raw_response = response.choices[0].message.content.strip()
            logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {character_name}: {len(raw_response)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            messages = self._process_raw_response(raw_response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            if len(messages) < self.min_messages or self._is_response_too_generic(messages, character):
                logging.warning("–û—Ç–≤–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π, —É–ª—É—á—à–∞–µ–º...")
                messages = self._improve_character_response(messages, character, question_type, context)
            
            self.cached_responses[cache_key] = messages
            return messages
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_character_fallback_response(context, user_message, question_type)
    
    def _is_response_too_generic(self, messages: List[str], character: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–∏—à–∫–æ–º –ª–∏ –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if not character:
            return False
        
        full_response = " ".join(messages).lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —á–µ—Ä—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        catchphrases = character.get('speech', {}).get('catchphrases', [])
        has_characteristic_speech = any(phrase.lower()[:10] in full_response for phrase in catchphrases)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        interests = character.get('interests', [])
        mentions_interests = any(interest.lower() in full_response for interest in interests[:3])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        emotional_words = ['–æ–±–æ–∂–∞—é', '–ª—é–±–ª—é', '–∫–ª—ë–≤–æ', '–∫—Ä—É—Ç–æ', '–∞–∞–∞', '–≤–∞—É', '!!!']
        is_emotional = any(word in full_response for word in emotional_words)
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º —Å—É—Ö–æ–π –¥–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        name = character.get('name', '').lower()
        if name == '–º–∞—Ä–∏–Ω' or '–∫–∏—Ç–∞–≥–∞–≤–∞' in name.lower():
            # –ú–∞—Ä–∏–Ω –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—á–µ–Ω—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π
            return not (is_emotional and len(full_response) > 200)
        
        return not (has_characteristic_speech or mentions_interests or is_emotional)
    
    def _improve_character_response(self, messages: List[str], character: Dict[str, Any], question_type: str, context: Dict) -> List[str]:
        """–£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç, –¥–æ–±–∞–≤–ª—è—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        if not character or not messages:
            return messages
        
        name = character.get('name', 'AI')
        improved = list(messages)  # –∫–æ–ø–∏—è
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        if len(improved) > 0:
            first_msg = improved[0]
            if not any(char in first_msg for char in ['!', 'üòä', '‚ú®', '–∞–∞–∞', '–æ–æ–æ']):
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if name.lower() == '–º–∞—Ä–∏–Ω' or '–∫–∏—Ç–∞–≥–∞–≤–∞' in name.lower():
                    improved[0] = f"–û–æ–æ! {first_msg} –≠—Ç–æ —Ç–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! ‚ú®"
                else:
                    improved[0] = f"{first_msg} üòä"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        if len(improved) >= 2:
            catchphrases = character.get('speech', {}).get('catchphrases', [])
            if catchphrases and random.random() < 0.3:  # 30% —à–∞–Ω—Å
                phrase = random.choice(catchphrases)
                improved[1] = f"{improved[1]} {phrase}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –º–∞–ª–æ
        if len(improved) < self.min_messages:
            if question_type == "emotional_question":
                improved.append("–ö—Å—Ç–∞—Ç–∏, –∞ —Ç—ã –∫–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å? –ú–Ω–µ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å! üíï")
            else:
                improved.append("–ê —á—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É? –•–æ—á–µ—Ç—Å—è —É—Å–ª—ã—à–∞—Ç—å —Ç–≤–æ—ë –º–Ω–µ–Ω–∏–µ! ‚ú®")
        
        return improved[:self.max_messages]
    
    def _add_character_variations(self, messages: List[str], character: Dict[str, Any]) -> List[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        if not character:
            return messages
        
        variations = []
        for msg in messages:
            varied = msg
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            text_patterns = character.get('speech', {}).get('text_patterns', [])
            if text_patterns and random.random() < 0.4:
                if '—Å–º–∞–π–ª–∏–∫–∏' in str(text_patterns):
                    emojis = ['‚ú®', 'üíï', 'üòä', 'üéâ']
                    if not any(emoji in varied for emoji in emojis):
                        varied += f" {random.choice(emojis)}"
            
            variations.append(varied)
        
        return variations
    
    def _get_character_fallback_response(self, context: Dict, user_message: str, question_type: str) -> List[str]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        character = self._get_current_character_context()
        if not character:
            return self._get_generic_fallback_response(context, user_message, question_type)
        
        name = character.get('name', 'AI')
        mood = context.get("current_mood", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ fallback –¥–ª—è –ú–∞—Ä–∏–Ω –ö–∏—Ç–∞–≥–∞–≤—ã
        if name.lower() == '–º–∞—Ä–∏–Ω' or '–∫–∏—Ç–∞–≥–∞–≤–∞' in name.lower():
            if question_type == "hobby_question":
                return [
                    "–ê–∞–∞! –¢—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –ø—Ä–æ –º–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è? üòç",
                    "–Ø —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –æ–¥–µ—Ä–∂–∏–º–∞ –∫–æ—Å–ø–ª–µ–µ–º! –ù–µ–¥–∞–≤–Ω–æ —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º –®–∏–∑—É–∫—É-—Ç—è–Ω ‚Äî —ç—Ç–æ –±—ã–ª–æ —Ç–∞–∫ –∫—Ä—É—Ç–æ!",
                    "–ê –µ—â—ë —Å–º–æ—Ç—Ä—é –∫—É—á—É –∞–Ω–∏–º–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –º–∞—Ö–æ-—Å—ë–¥–∑—ë –∂–∞–Ω—Ä! –ù–µ –º–æ–≥—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è! ‚ú®",
                    "–†–∞—Å—Å–∫–∞–∂–∏ –∏ —Ç—ã, —á—Ç–æ —Ç–µ–±—è —É–≤–ª–µ–∫–∞–µ—Ç! –ú–æ–∂–µ—Ç —É –Ω–∞—Å –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã? üíï"
                ]
            elif question_type == "emotional_question":
                return [
                    "–û—Ö—Ö... —Ç—ã —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –ø—Ä–æ —á—É–≤—Å—Ç–≤–∞? üò≥",
                    "–ó–Ω–∞–µ—à—å, –º–Ω–µ —Å —Ç–æ–±–æ–π —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ! –¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å –º–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è –∏ –Ω–µ —Å–º–µ—ë—à—å—Å—è –Ω–∞–¥ –∫–æ—Å–ø–ª–µ–µ–º.",
                    "–¢–≤–æ–∏ —Ä—É–∫–∏ —Ç–∞–∫ –∫—Ä–∞—Å–∏–≤–æ —Ä–∞–±–æ—Ç–∞—é—Ç, –∫–æ–≥–¥–∞ —Ç—ã —à—å—ë—à—å... —ç—Ç–æ —Å–≤–æ–¥–∏—Ç –º–µ–Ω—è —Å —É–º–∞! üíï",
                    "–Ø –ø—Ä–∞–≤–¥–∞ –æ—á–µ–Ω—å —Ç–µ–±—è... –Ω—É —Ç—ã –ø–æ–Ω–∏–º–∞–µ—à—å~ üòä"
                ]
        
        # –û–±—â–∏–µ fallback –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        return [
            f"–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ —É –º–µ–Ω—è –º—ã—Å–ª–∏ —Ä–∞–∑–±–µ–∂–∞–ª–∏—Å—å... üòÖ",
            f"–ö–∞–∫ {name}, —è –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –ª—É—á—à–µ!",
            f"–î–∞–≤–∞–π —è –ø–æ–ø—Ä–æ–±—É—é –µ—â—ë —Ä–∞–∑ ‚Äî –æ —á—ë–º —Ç—ã —Ö–æ—Ç–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? ‚ú®"
        ]
    
    def _get_generic_fallback_response(self, context: Dict, user_message: str, question_type: str) -> List[str]:
        """–û–±—â–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        return [
            "–•–º, —á—Ç–æ-—Ç–æ —è –∑–∞–¥—É–º–∞–ª–∞—Å—å... ü§î",
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞! –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è.",
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —Ö–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ! ‚ú®"
        ]
    
    def _process_raw_response(self, text: str) -> List[str]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)"""
        text = text.strip()
        parts = [p.strip() for p in text.split('||') if p.strip()]
        
        if len(parts) <= 1:
            parts = [p.strip() for p in text.split('|') if p.strip()]
        
        if len(parts) <= 1:
            return self._split_by_sentences(text)
        
        processed = []
        for part in parts:
            clean_part = re.sub(r'^\d+[\.\)]\s*', '', part)
            clean_part = clean_part.strip('"\'|')
            
            if clean_part and len(clean_part) < 20 and processed:
                processed[-1] += " " + clean_part
            elif clean_part:
                processed.append(clean_part)
        
        return processed[:self.max_messages]
    
    def _split_by_sentences(self, text: str) -> List[str]:
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        sentences = re.split(r'(?<=[.!?‚Ä¶])\s+', text)
        grouped = []
        current = ""
        sentences_in_current = 0
        
        for sentence in sentences:
            sentence = sentence.strip()
            if not sentence:
                continue
            
            if (sentences_in_current < self.target_sentences_per_message and 
                len(current + sentence) <= 200) or not current:
                current += sentence + " "
                sentences_in_current += 1
            else:
                if current:
                    grouped.append(current.strip())
                current = sentence + " "
                sentences_in_current = 1
        
        if current:
            grouped.append(current.strip())
        
        if len(grouped) < self.min_messages and grouped:
            first_msg = grouped[0]
            if len(first_msg) > 100:
                mid_point = len(first_msg) // 2
                split_point = first_msg.find(' ', mid_point)
                if split_point > 0:
                    grouped = [
                        first_msg[:split_point].strip(),
                        first_msg[split_point:].strip()
                    ] + grouped[1:]
        
        return grouped[:self.max_messages]
    
    async def get_simple_mood_calculation(self, psychological_core) -> Dict:
        """–†–∞—Å—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        current_hour = datetime.now().hour
        is_weekend = datetime.now().weekday() >= 5
        
        base_mood = psychological_core.calculate_current_mood({
            "weekend": is_weekend,
            "weather": "normal"
        })
        
        if 6 <= current_hour <= 9:
            activity_context = "morning_routine"
            energy_mod = 0.8
        elif 9 <= current_hour <= 17:
            activity_context = "work_time"
            energy_mod = 0.9
        elif 17 <= current_hour <= 22:
            activity_context = "evening_time"
            energy_mod = 0.7
        else:
            activity_context = "night_time"
            energy_mod = 0.4
        
        return {
            "current_mood": self._mood_to_description(base_mood),
            "energy_level": int(psychological_core.physical_state["energy_base"] * energy_mod),
            "activity_context": activity_context,
            "dominant_emotion": psychological_core.emotional_momentum["current_emotion"],
            "initiative_desire": min(10, int(base_mood * 0.8 + random.uniform(-2, 2))),
            "personality_description": psychological_core.get_personality_description()
        }
    
    def _mood_to_description(self, mood_value: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)"""
        if mood_value >= 8:
            return random.choice(["–æ—Ç–ª–∏—á–Ω–æ–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ", "–≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω–∞—è"])
        elif mood_value >= 6:
            return random.choice(["—Ö–æ—Ä–æ—à–µ–µ", "—Å–ø–æ–∫–æ–π–Ω–∞—è", "–¥–æ–≤–æ–ª—å–Ω–∞—è"])
        elif mood_value >= 4:
            return random.choice(["–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–∑–∞–¥—É–º—á–∏–≤–∞—è", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"])
        else:
            return random.choice(["–≥—Ä—É—Å—Ç–Ω–∞—è", "—É—Å—Ç–∞–≤—à–∞—è", "–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–∞—è"])
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.cached_responses.clear()
        logging.info("–ö—ç—à AI –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")