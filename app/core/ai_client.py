# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI

import json
import logging
import random
from datetime import datetime
from typing import List, Tuple, Dict, Any

class OptimizedAI:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI"""
    
    def __init__(self, ai_client):
        self.ai_client = ai_client
        self.prompt_cache = {}
        self.batch_queue = []
        self.last_state_check = None
        self.cached_responses = {}
    
    async def get_batched_response(self, prompts: List[Tuple[str, str]]) -> Dict[str, Any]:
        """–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        
        combined_prompt = "–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        
        for i, (prompt_type, prompt_text) in enumerate(prompts):
            combined_prompt += f"–ó–ê–ü–†–û–°_{i+1} ({prompt_type}):\n{prompt_text}\n\n"
        
        combined_prompt += """
–û—Ç–≤–µ—Ç—å –≤ JSON:
{
    "response_1": {...},
    "response_2": {...},
    ...
}"""
        
        try:
            response = await self.ai_client.chat.completions.create(
                model="deepseek/deepseek-chat",
                messages=[{"role": "user", "content": combined_prompt}],
                max_tokens=800,
                temperature=0.8
            )
            
            return json.loads(response.choices[0].message.content)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
    
    async def get_simple_mood_calculation(self, psychological_core) -> Dict:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –±–µ–∑ AI –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        
        current_hour = datetime.now().hour
        is_weekend = datetime.now().weekday() >= 5
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        base_mood = psychological_core.calculate_current_mood({
            "weekend": is_weekend,
            "weather": "normal"  # –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å API –ø–æ–≥–æ–¥—ã
        })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if 6 <= current_hour <= 9:
            activity_context = "morning_routine"
            energy_mod = 0.8
        elif 9 <= current_hour <= 17:
            activity_context = "work_time"
            energy_mod = 0.9
        elif 17 <= current_hour <= 22:
            activity_context = "evening_time"
            energy_mod = 0.7
        else:
            activity_context = "night_time"
            energy_mod = 0.4
        
        return {
            "current_mood": self._mood_to_description(base_mood),
            "energy_level": int(psychological_core.physical_state["energy_base"] * energy_mod),
            "activity_context": activity_context,
            "dominant_emotion": psychological_core.emotional_momentum["current_emotion"],
            "initiative_desire": min(10, int(base_mood * 0.8 + random.uniform(-2, 2)))
        }
    
    async def generate_contextual_response(self, user_message: str, context: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        
        # –ö—ç—à–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        cache_key = f"{user_message[:50]}_{context.get('current_mood', '')}"
        
        if cache_key in self.cached_responses:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
            cached = self.cached_responses[cache_key]
            return self._add_variation(cached)
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        prompt = self._build_optimized_prompt(user_message, context)
        
        try:
            response = await self.ai_client.chat.completions.create(
                model="deepseek/deepseek-chat",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=200,
                temperature=0.8
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            self.cached_responses[cache_key] = ai_response
            
            return ai_response
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_response(context)
    
    def _build_optimized_prompt(self, user_message: str, context: Dict[str, Any]) -> str:
        """–°—Ç—Ä–æ–∏—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç"""
        
        prompt = f"""–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫.

–°–û–°–¢–û–Ø–ù–ò–ï: {context.get('current_mood', '—Å–ø–æ–∫–æ–π–Ω–∞—è')}, —ç–Ω–µ—Ä–≥–∏—è {context.get('energy_level', 50)}/100
–≠–ú–û–¶–ò–Ø: {context.get('dominant_emotion', 'calm')}
–°–û–û–ë–©–ï–ù–ò–ï: "{user_message}"

–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:"""
        
        return prompt
    
    def _mood_to_description(self, mood_value: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        if mood_value >= 8:
            return random.choice(["–æ—Ç–ª–∏—á–Ω–æ–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ", "–≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω–∞—è"])
        elif mood_value >= 6:
            return random.choice(["—Ö–æ—Ä–æ—à–µ–µ", "—Å–ø–æ–∫–æ–π–Ω–∞—è", "–¥–æ–≤–æ–ª—å–Ω–∞—è"])
        elif mood_value >= 4:
            return random.choice(["–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–∑–∞–¥—É–º—á–∏–≤–∞—è", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"])
        else:
            return random.choice(["–≥—Ä—É—Å—Ç–Ω–∞—è", "—É—Å—Ç–∞–≤—à–∞—è", "–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–∞—è"])
    
    def _add_variation(self, base_response: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É"""
        
        variations = [
            lambda x: x,  # –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            lambda x: x + " üòä",
            lambda x: f"–•–º, {x.lower()}",
            lambda x: x.replace(".", "!") if not x.endswith("!") else x
        ]
        
        return random.choice(variations)(base_response)
    
    def _get_fallback_response(self, context: Dict[str, Any]) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö AI"""
        
        mood = context.get("current_mood", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ")
        
        fallback_responses = {
            "–æ—Ç–ª–∏—á–Ω–æ–µ": ["–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", "–î–µ–Ω—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π! –î–µ–ª—é—Å—å –ø–æ–∑–∏—Ç–∏–≤–æ–º ‚ú®"],
            "—Ö–æ—Ä–æ—à–µ–µ": ["–î–µ–ª–∞ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å!", "–í—Å–µ –æ—Ç–ª–∏—á–Ω–æ, –∫–∞–∫ —É —Ç–µ–±—è?"],
            "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ": ["–í—Å–µ –∏–¥–µ—Ç —Å–≤–æ–∏–º —á–µ—Ä–µ–¥–æ–º", "–û–±—ã—á–Ω—ã–π –¥–µ–Ω—å, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ"],
            "–≥—Ä—É—Å—Ç–Ω–∞—è": ["–ß—Ç–æ-—Ç–æ –∑–∞–≥—Ä—É—Å—Ç–∏–ª–∞ —Å–µ–≥–æ–¥–Ω—è...", "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–∞–∫ —Å–µ–±–µ, –Ω–æ —Ç—ã –º–µ–Ω—è –ø–æ–¥–±–æ–¥—Ä–∏—à—å"]
        }
        
        responses = fallback_responses.get(mood, fallback_responses["–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ"])
        return random.choice(responses)
    
    async def extract_facts_from_conversation(self, user_message: str, ai_response: str) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        
        facts = []
        user_lower = user_message.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤
        patterns = {
            "—Ä–∞–±–æ—Ç–∞": ["—Ä–∞–±–æ—Ç–∞—é", "—Ä–∞–±–æ—Ç–∞", "–æ—Ñ–∏—Å", "–∫–æ–ª–ª–µ–≥–∏", "–ø—Ä–æ–µ–∫—Ç"],
            "—Ö–æ–±–±–∏": ["–ª—é–±–ª—é", "—É–≤–ª–µ–∫–∞—é—Å—å", "—Ö–æ–±–±–∏", "–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å"],
            "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": ["–≥—Ä—É—Å—Ç–Ω–æ", "–≤–µ—Å–µ–ª–æ", "—É—Å—Ç–∞–ª", "—Ä–∞–¥", "–∑–ª–æ–π"],
            "–ø–ª–∞–Ω—ã": ["–ø–ª–∞–Ω–∏—Ä—É—é", "—Å–æ–±–∏—Ä–∞—é—Å—å", "—Ö–æ—á—É", "–±—É–¥—É"],
            "—Å–µ–º—å—è": ["–º–∞–º–∞", "–ø–∞–ø–∞", "–±—Ä–∞—Ç", "—Å–µ—Å—Ç—Ä–∞", "—Å–µ–º—å—è", "—Ä–æ–¥–∏—Ç–µ–ª–∏"]
        }
        
        for fact_type, keywords in patterns.items():
            if any(keyword in user_lower for keyword in keywords):
                facts.append({
                    "type": fact_type,
                    "content": user_message[:100],  # –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    "importance": 5,
                    "timestamp": datetime.now().isoformat()
                })
        
        return facts
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤"""
        self.cached_responses.clear()
        logging.info("–ö—ç—à AI –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")