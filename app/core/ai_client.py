# –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤

import json
import logging
import random
import re
from datetime import datetime
from typing import List, Tuple, Dict, Any

class OptimizedAI:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self, ai_client, config: Dict[str, Any]):
        self.ai_client = ai_client  
        self.config = config
        self.prompt_cache = {}
        self.batch_queue = []
        self.last_state_check = None
        self.cached_responses = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.model = config.get('ai', {}).get('model', 'deepseek/deepseek-chat')
        self.max_tokens = config.get('ai', {}).get('max_tokens', 350)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
        self.temperature = config.get('ai', {}).get('temperature', 0.85)  # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ DeepSeek
        
        logging.info(f"AI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –º–æ–¥–µ–ª—å={self.model}, max_tokens={self.max_tokens}")
    
    async def generate_split_response(self, user_message: str, context: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞, –≥–æ—Ç–æ–≤–æ–≥–æ –∫ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É DeepSeek)"""
        
        # –°—Ç—Ä–æ–∏–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π system prompt
        system_prompt = self._build_split_system_prompt(context)
        
        # –°–æ–∑–¥–∞–µ–º –∫—ç—à –∫–ª—é—á
        cache_key = f"{user_message[:50]}_{context.get('current_mood', '')}_split"
        
        if cache_key in self.cached_responses:
            cached = self.cached_responses[cache_key]
            logging.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç")
            return self._add_message_variations(cached)
        
        try:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ split-–∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ {self.model}")
            response = await self.ai_client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_message}
                ],
                max_tokens=self.max_tokens,
                temperature=self.temperature,
                top_p=0.95,  # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è DeepSeek
                stop=["\n\n", "|||"]  # –î–≤–æ–π–Ω–æ–π —Å—Ç–æ–ø-—Å–∏–º–≤–æ–ª –¥–ª—è –∑–∞—â–∏—Ç—ã
            )
            
            raw_response = response.choices[0].message.content.strip()
            logging.info(f"–ü–æ–ª—É—á–µ–Ω raw –æ—Ç–≤–µ—Ç: {raw_response[:100]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            messages = self._process_raw_response(raw_response)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cached_responses[cache_key] = messages
            
            return messages
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ split-–æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_split_response(context, user_message)
    
    def _build_split_system_prompt(self, context: Dict[str, Any]) -> str:
        """–°—Ç—Ä–æ–∏—Ç system prompt –¥–ª—è –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        
        character_name = self.config.get('character', {}).get('name', '–ê–ª–∏—Å–∞')
        personality = context.get('personality_description', '–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è')
        current_time = datetime.now().strftime('%H:%M, %A')
        
        system_prompt = f"""–¢—ã ‚Äî {character_name}, {personality}. 
–°–µ–π—á–∞—Å: {current_time}
–¢–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {context.get('current_mood', '—Å–ø–æ–∫–æ–π–Ω–∞—è')}, {context.get('energy_level', 50)}% —ç–Ω–µ—Ä–≥–∏–∏
–≠–º–æ—Ü–∏—è: {context.get('dominant_emotion', 'calm')}
–ù–µ–¥–∞–≤–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: {context.get('memory_context', '–û–±—â–∞–µ–º—Å—è –Ω–µ–¥–∞–≤–Ω–æ')}

–û—Ç–≤–µ—á–∞–π –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:
1. –†–∞–∑–¥–µ–ª—è–π –æ—Ç–≤–µ—Ç –Ω–∞ 2-4 —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ ||
2. –ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: 7-25 —Å–ª–æ–≤, –∑–∞–∫–∞–Ω—á–∏–≤–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ (.?!) 
3. –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
4. –ü–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
5. –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤—É—é —Ä–µ—á—å —Å –º–µ–∂–¥–æ–º–µ—Ç–∏—è–º–∏ –∏ —ç–º–æ–¥–∑–∏
6. –£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è —Å—É—Ç–æ–∫: {self._get_time_based_rules()}

–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ –±–µ–∑ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π."""
        
        return system_prompt
    
    def _get_time_based_rules(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
        hour = datetime.now().hour
        
        if hour < 6:
            return "–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º: –±–æ–ª—å—à–µ üò¥, –º–µ–Ω—å—à–µ —Å–ª–æ–≤, —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å"
        elif hour < 12:
            return "–£—Ç—Ä–æ: –±–æ–¥—Ä–æ, —Å —ç–º–æ–¥–∑–∏ ‚òïÔ∏èüåû, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ"
        elif hour < 18:
            return "–î–µ–Ω—å: –∞–∫—Ç–∏–≤–Ω–æ, —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –¥–µ–ª–æ–≤–∏—Ç–æ"
        else:
            return "–í–µ—á–µ—Ä: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å –ª–∏—á–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ üåô, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ"
    
    def _process_raw_response(self, text: str) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
        parts = [p.strip() for p in text.split('||') if p.strip()]
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
        processed = []
        for part in parts:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (1. 2. 3.)
            clean_part = re.sub(r'^\d+[\.\)]\s*', '', part)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫
            clean_part = clean_part.strip('"\'')
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–±—ã—Ç—ã—Ö –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
            if clean_part and not clean_part.endswith(('.', '!', '?', '‚Ä¶')):
                clean_part += random.choice(['.', '!'])
                
            if clean_part:
                processed.append(clean_part)
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—è —Ö–æ—Ç—è –±—ã 2 —Å–æ–æ–±—â–µ–Ω–∏–π
        if len(processed) < 2:
            return self._split_fallback(processed[0] if processed else "–ü—Ä–∏–≤–µ—Ç!")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 —Å–æ–æ–±—â–µ–Ω–∏–π
        return processed[:4]
    
    def _split_fallback(self, text: str) -> List[str]:
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –æ—à–∏–±–ª–∞—Å—å"""
        sentences = re.split(r'(?<=[.!?‚Ä¶])\s+', text)
        grouped = []
        current = ""
        
        for s in sentences:
            if len(current + s) <= 150 or not current:
                current += s + " "
            else:
                grouped.append(current.strip())
                current = s + " "
        
        if current: 
            grouped.append(current.strip())
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(grouped) < 2 and grouped:
            first_part = grouped[0]
            mid = len(first_part) // 2
            # –ò—â–µ–º —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
            split_point = first_part.find(' ', mid)
            if split_point == -1:
                split_point = mid
            
            grouped = [
                first_part[:split_point].strip() + '.',
                first_part[split_point:].strip()
            ]
        
        return grouped[:4]  # –ú–∞–∫—Å–∏–º—É–º 4 —á–∞—Å—Ç–∏
    
    def _add_message_variations(self, messages: List[str]) -> List[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        
        variations = []
        for msg in messages:
            # –ü—Ä–æ—Å—Ç—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
            varied = random.choice([
                msg,  # –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                msg + " üòä" if not any(emoji in msg for emoji in "üòäüòÑüòçü§ó") else msg,
                f"–•–º, {msg.lower()}" if not msg.startswith(('–•–º', '–û–π', '–ê')) else msg,
                msg.replace(".", "!") if msg.endswith(".") and random.random() < 0.3 else msg
            ])
            variations.append(varied)
        
        return variations
    
    def _get_fallback_split_response(self, context: Dict[str, Any], user_message: str) -> List[str]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö AI"""
        
        mood = context.get("current_mood", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ")
        energy = context.get("energy_level", 50)
        
        if "–æ—Ç–ª–∏—á–Ω–æ–µ" in mood or energy > 80:
            return [
                "–û–π, —á—Ç–æ-—Ç–æ –∑–∞–≤–∏—Å–ª–æ! üòÖ",
                "–ù–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ, —Ç–∞–∫ —á—Ç–æ –≤—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ!",
                "–û —á–µ–º —Ö–æ—Ç–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
            ]
        elif "–≥—Ä—É—Å—Ç–Ω" in mood or energy < 30:
            return [
                "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...",
                "–ì–æ–ª–æ–≤–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –≤–∞—Ä–∏—Ç üòî",
                "–ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
            ]
        else:
            return [
                "–•–º, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏...",
                "–ü–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ!",
                "–ê –ø–æ–∫–∞ –∫–∞–∫ –¥–µ–ª–∞? üòä"
            ]
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    async def get_simple_mood_calculation(self, psychological_core) -> Dict:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –±–µ–∑ AI –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        
        current_hour = datetime.now().hour
        is_weekend = datetime.now().weekday() >= 5
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        base_mood = psychological_core.calculate_current_mood({
            "weekend": is_weekend,
            "weather": "normal"
        })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if 6 <= current_hour <= 9:
            activity_context = "morning_routine"
            energy_mod = 0.8
        elif 9 <= current_hour <= 17:
            activity_context = "work_time"
            energy_mod = 0.9
        elif 17 <= current_hour <= 22:
            activity_context = "evening_time"
            energy_mod = 0.7
        else:
            activity_context = "night_time"
            energy_mod = 0.4
        
        return {
            "current_mood": self._mood_to_description(base_mood),
            "energy_level": int(psychological_core.physical_state["energy_base"] * energy_mod),
            "activity_context": activity_context,
            "dominant_emotion": psychological_core.emotional_momentum["current_emotion"],
            "initiative_desire": min(10, int(base_mood * 0.8 + random.uniform(-2, 2))),
            "personality_description": psychological_core.get_personality_description()
        }
    
    def _mood_to_description(self, mood_value: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        if mood_value >= 8:
            return random.choice(["–æ—Ç–ª–∏—á–Ω–æ–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ", "–≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω–∞—è"])
        elif mood_value >= 6:
            return random.choice(["—Ö–æ—Ä–æ—à–µ–µ", "—Å–ø–æ–∫–æ–π–Ω–∞—è", "–¥–æ–≤–æ–ª—å–Ω–∞—è"])
        elif mood_value >= 4:
            return random.choice(["–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–∑–∞–¥—É–º—á–∏–≤–∞—è", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"])
        else:
            return random.choice(["–≥—Ä—É—Å—Ç–Ω–∞—è", "—É—Å—Ç–∞–≤—à–∞—è", "–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–∞—è"])
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤"""
        self.cached_responses.clear()
        logging.info("–ö—ç—à AI –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")