# –§–∞–π–ª: app/core/ai_client.py (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏)

import json
import logging
import random
import re
from datetime import datetime
from typing import List, Tuple, Dict, Any

class OptimizedAI:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self, ai_client, config: Dict[str, Any]):
        self.ai_client = ai_client  
        self.config = config
        self.prompt_cache = {}
        self.batch_queue = []
        self.last_state_check = None
        self.cached_responses = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        self.model = config.get('ai', {}).get('model', 'deepseek/deepseek-chat')
        self.max_tokens = config.get('ai', {}).get('max_tokens', 350)
        self.temperature = config.get('ai', {}).get('temperature', 0.85)
        
        logging.info(f"AI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: –º–æ–¥–µ–ª—å={self.model}, max_tokens={self.max_tokens}")
    
    def _analyze_question_type(self, user_message: str) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        
        message_lower = user_message.lower()
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –º–Ω–µ–Ω–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ)
        if any(word in message_lower for word in ["—á—Ç–æ –¥—É–º–∞–µ—à—å", "–∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å", "—Ç–≤–æ–µ –º–Ω–µ–Ω–∏–µ", "–ø–æ-—Ç–≤–æ–µ–º—É"]):
            return "opinion_question"
        
        # –í–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö (–∫–∞–∫–æ–π/–∫–∞–∫–∞—è –±–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        if any(word in message_lower for word in ["–∫–∞–∫–æ–π", "–∫–∞–∫–∞—è", "–∫–∞–∫–∏–µ"]) and not any(word in message_lower for word in ["–ª—É—á—à–µ", "—Ö—É–∂–µ", "–∏–ª–∏"]):
            return "preference_question"
        
        # –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ—Å–ª–µ preference)
        if any(word in message_lower for word in ["–ª—É—á—à–µ", "—Ö—É–∂–µ", "vs", "–ø—Ä–æ—Ç–∏–≤", "—Å—Ä–∞–≤–Ω–∏"]) or " –∏–ª–∏ " in message_lower:
            return "comparison_question"
        
        # –í–æ–ø—Ä–æ—Å—ã "—á—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å"
        if any(word in message_lower for word in ["—á—Ç–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å", "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å", "–≤—ã–±–∏—Ä–∞–µ—à—å"]):
            return "preference_question"
        
        # –ü—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Å "?"
        if "?" in user_message:
            return "direct_question"
        
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return "statement"
    
    def _process_raw_response(self, text: str) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—ã—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –∏–∑ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞
        text = text.strip()
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–≤–æ–π–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º ||
        parts = [p.strip() for p in text.split('||') if p.strip()]
        
        # –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–π |
        if len(parts) <= 1:
            parts = [p.strip() for p in text.split('|') if p.strip()]
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        processed = []
        for part in parts:
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ (1. 2. 3.)
            clean_part = re.sub(r'^\d+[\.\)]\s*', '', part)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            clean_part = clean_part.strip('"\'|')
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –µ—Å–ª–∏ –∑–∞–±—ã–ª–∏
            if clean_part and not clean_part.endswith(('.', '!', '?', '‚Ä¶')):
                clean_part += random.choice(['.', '!'])
                    
            if clean_part:
                processed.append(clean_part)
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—è –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(processed) < 2:
            return self._split_fallback(processed[0] if processed else text)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–∫—Å–∏–º—É–º
        return processed[:4]
    
    def _split_fallback(self, text: str) -> List[str]:
        """–†–µ–∑–µ—Ä–≤–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –æ—à–∏–±–ª–∞—Å—å"""
        sentences = re.split(r'(?<=[.!?‚Ä¶])\s+', text)
        grouped = []
        current = ""
        
        for s in sentences:
            if len(current + s) <= 150 or not current:
                current += s + " "
            else:
                grouped.append(current.strip())
                current = s + " "
        
        if current: 
            grouped.append(current.strip())
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º 2 —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(grouped) < 2 and grouped:
            first_part = grouped[0]
            mid = len(first_part) // 2
            # –ò—â–µ–º —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞
            split_point = first_part.find(' ', mid)
            if split_point == -1:
                split_point = mid
            
            grouped = [
                first_part[:split_point].strip() + '.',
                first_part[split_point:].strip()
            ]
        
        return grouped[:4]  # –ú–∞–∫—Å–∏–º—É–º 4 —á–∞—Å—Ç–∏
    
    def _ensure_question_answered(self, messages: List[str], original_question: str, question_type: str) -> List[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        full_response = " ".join(messages).lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        has_concrete_answer = False
        
        if question_type == "opinion_question":
            opinion_indicators = ["–¥—É–º–∞—é —á—Ç–æ", "—Å—á–∏—Ç–∞—é", "–º–æ–µ –º–Ω–µ–Ω–∏–µ", "–ø–æ-–º–æ–µ–º—É", "–ª–∏—á–Ω–æ —è"]
            has_concrete_answer = any(indicator in full_response for indicator in opinion_indicators)
        
        elif question_type == "comparison_question":
            comparison_indicators = ["–ª—É—á—à–µ", "—Ö—É–∂–µ", "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é", "–±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è", "–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–µ–µ"]
            has_concrete_answer = any(indicator in full_response for indicator in comparison_indicators)
        
        elif question_type in ["preference_question", "direct_question"]:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –≤–æ–ø—Ä–æ—Å–∞ –≤ –æ—Ç–≤–µ—Ç–µ
            question_words = set(original_question.lower().split())
            response_words = set(full_response.split())
            overlap = len(question_words.intersection(response_words))
            has_concrete_answer = overlap >= 2  # –º–∏–Ω–∏–º—É–º 2 –æ–±—â–∏—Ö —Å–ª–æ–≤–∞
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å
        if not has_concrete_answer:
            logging.warning(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç–∏–ø–∞ {question_type}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(messages) >= 2:
                messages[1] = self._make_more_concrete(messages[1], question_type, original_question)
        
        return messages

    def _make_more_concrete(self, message: str, question_type: str, original_question: str) -> str:
        """–î–µ–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º"""
        
        if question_type == "comparison_question" and any(word in original_question.lower() for word in ["–º–∞–Ω–≥–∞", "–∞–¥–∞–ø—Ç–∞—Ü–∏—è"]):
            return "–ú–∞–Ω–≥–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –ª—É—á—à–µ! –í –Ω–µ–π –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—é–∂–µ—Ç–∞."
        
        elif question_type == "opinion_question":
            return f"–ú–æ–µ –º–Ω–µ–Ω–∏–µ: {message}"
        
        elif "–∫–∞–∫–æ–π" in original_question.lower() or "–∫–∞–∫–∞—è" in original_question.lower():
            return f"–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: {message}"
        
        return message
    
    def _build_split_system_prompt(self, context: Dict[str, Any]) -> str:
        """–°—Ç—Ä–æ–∏—Ç system prompt –¥–ª—è –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        
        character_name = self.config.get('character', {}).get('name', '–ê–ª–∏—Å–∞')
        personality = context.get('personality_description', '–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è')
        current_time = datetime.now().strftime('%H:%M, %A')
        memory_context = context.get('memory_context', '–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ')
        
        system_prompt = f"""–¢—ã ‚Äî {character_name}, {personality} –¥–µ–≤—É—à–∫–∞ 25 –ª–µ—Ç, –ª—é–±—è—â–∞—è –∞–Ω–∏–º–µ –∏ –º–∞–Ω–≥—É. 
–í—Ä–µ–º—è: {current_time}
–°–æ—Å—Ç–æ—è–Ω–∏–µ: {context.get('current_mood', '—Å–ø–æ–∫–æ–π–Ω–∞—è')}, —ç–Ω–µ—Ä–≥–∏—è {context.get('energy_level', 50)}%
–≠–º–æ—Ü–∏—è: {context.get('dominant_emotion', 'calm')}

–ö–û–ù–¢–ï–ö–°–¢ –û–¢–ù–û–®–ï–ù–ò–ô:
{memory_context}

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
1. üéØ –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –ö–û–ù–ö–†–ï–¢–ù–û –Ω–∞ –∑–∞–¥–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ø–µ—Ä–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
2. üìù –†–∞–∑–¥–µ–ª—è–π –æ—Ç–≤–µ—Ç –Ω–∞ 2-4 —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ ||
3. üí≠ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è + –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
4. üé® –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å –¥–µ—Ç–∞–ª—è–º–∏
5. ü§î –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–º–µ—Ä
6. ‚ùì –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ = –≤—Å—Ç—Ä–µ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ç–µ–º—ã

–ö–û–ù–ö–†–ï–¢–ù–´–ï –ü–†–ò–ú–ï–†–´:
–í–æ–ø—Ä–æ—Å: "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ vs –º–∞–Ω–≥–∞?"
–ü–†–ê–í–ò–õ–¨–ù–û: "–û—Ö, –≤–µ—á–Ω–∞—è –¥–∏–ª–µ–º–º–∞! üòÑ || –ß–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è, –º–∞–Ω–≥–∞ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏. || –í –Ω–µ–π –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, —ç–º–æ—Ü–∏–π –∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π. || –ê –∫–∞–∫–∏–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –±–æ–ª—å—à–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞?"

–ù–ï–ü–†–ê–í–ò–õ–¨–ù–û: "–û—Ö, —è –≤ —Ç–∞–∫–∏—Ö –ø—Ä–∏—è—Ç–Ω—ã—Ö —Ä–∞–∑–¥—É–º—å—è—Ö! || –ú—ã—Å–ª–∏ —Ç–∞–∫–∏–µ —Å–æ–ª–Ω–µ—á–Ω—ã–µ..."

–ó–ê–ü–†–ï–©–ï–ù–û:
- –£—Ö–æ–¥–∏—Ç—å –æ—Ç —Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–∞
- –ì–æ–≤–æ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏
- –î–∞–≤–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
- –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞

–°—Ç–∏–ª—å: –∂–∏–≤–æ–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å —ç–º–æ–¥–∑–∏, –ù–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ —Ç–µ–º–µ –≤–æ–ø—Ä–æ—Å–∞."""
        
        return system_prompt
    
    def _get_time_based_rules(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
        hour = datetime.now().hour
        
        if hour < 6:
            return "–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º: –±–æ–ª—å—à–µ üò¥, –º–µ–Ω—å—à–µ —Å–ª–æ–≤, —Å–æ–Ω–ª–∏–≤–æ—Å—Ç—å"
        elif hour < 12:
            return "–£—Ç—Ä–æ: –±–æ–¥—Ä–æ, —Å —ç–º–æ–¥–∑–∏ ‚òïÔ∏èüåû, —ç–Ω–µ—Ä–≥–∏—á–Ω–æ"
        elif hour < 18:
            return "–î–µ–Ω—å: –∞–∫—Ç–∏–≤–Ω–æ, —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, –¥–µ–ª–æ–≤–∏—Ç–æ"
        else:
            return "–í–µ—á–µ—Ä: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å –ª–∏—á–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏ üåô, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ"
    
    async def generate_split_response(self, user_message: str, context: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        question_type = self._analyze_question_type(user_message)
        context['question_type'] = question_type
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞: {question_type}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message[:50]}...")
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞
        system_prompt = self._build_split_system_prompt(context)
        
        # –î–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
        modified_message = user_message
        if question_type == "opinion_question":
            modified_message += " [–í–ê–ñ–ù–û: –î–∞–π —Å–≤–æ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –º–Ω–µ–Ω–∏–µ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏]"
        elif question_type == "comparison_question":
            modified_message += " [–í–ê–ñ–ù–û: –°—Ä–∞–≤–Ω–∏ –∏ —Å–∫–∞–∂–∏ —á—Ç–æ –ª—É—á—à–µ –∏ –ø–æ—á–µ–º—É]"
        elif question_type == "preference_question":
            modified_message += " [–í–ê–ñ–ù–û: –ù–∞–∑–æ–≤–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è]"
        elif question_type == "direct_question":
            modified_message += " [–í–ê–ñ–ù–û: –î–∞–π –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å]"
        
        # –°–æ–∑–¥–∞–µ–º –∫—ç—à –∫–ª—é—á
        cache_key = f"{user_message[:50]}_{context.get('current_mood', '')}_split"
        
        if cache_key in self.cached_responses:
            cached = self.cached_responses[cache_key]
            logging.info("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
            return self._add_message_variations(cached)
        
        try:
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –º–æ–¥–µ–ª–∏ {self.model}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ai_client –Ω–µ None
            if self.ai_client is None:
                logging.warning("AI –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return self._get_fallback_split_response(context, user_message)
            
            response = await self.ai_client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": modified_message}
                ],
                max_tokens=self.max_tokens,
                temperature=self.temperature,
                top_p=0.95,
                stop=["\n\n"]
            )
            
            raw_response = response.choices[0].message.content.strip()
            logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {raw_response[:100]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            messages = self._process_raw_response(raw_response)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–ø—Ä–æ—Å—É
            if question_type in ["opinion_question", "comparison_question", "preference_question", "direct_question"]:
                messages = self._ensure_question_answered(messages, user_message, question_type)
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.cached_responses[cache_key] = messages
            
            return messages
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_fallback_split_response(context, user_message)
    
    def _add_message_variations(self, messages: List[str]) -> List[str]:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–±–æ–ª—å—à–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        
        variations = []
        for msg in messages:
            # –ü—Ä–æ—Å—Ç—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
            varied = random.choice([
                msg,  # –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                msg + " üòä" if not any(emoji in msg for emoji in "üòäüòÑüòçü§ó") else msg,
                f"–•–º, {msg.lower()}" if not msg.startswith(('–•–º', '–û–π', '–ê')) else msg,
                msg.replace(".", "!") if msg.endswith(".") and random.random() < 0.3 else msg
            ])
            variations.append(varied)
        
        return variations
    
    def _get_fallback_split_response(self, context: Dict[str, Any], user_message: str) -> List[str]:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö AI"""
        
        mood = context.get("current_mood", "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ")
        energy = context.get("energy_level", 50)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ fallback
        question_type = self._analyze_question_type(user_message)
        
        if question_type == "comparison_question" and any(word in user_message.lower() for word in ["–º–∞–Ω–≥–∞", "–∞–¥–∞–ø—Ç–∞—Ü–∏—è"]):
            return [
                "–û—Ö, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! ü§î",
                "–î—É–º–∞—é, —á—Ç–æ –º–∞–Ω–≥–∞ –æ–±—ã—á–Ω–æ –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏.",
                "–í –Ω–µ–π –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –∏ —ç–º–æ—Ü–∏–π!",
                "–ê —Ç—ã –∫–∞–∫ —Å—á–∏—Ç–∞–µ—à—å?"
            ]
        
        if "–æ—Ç–ª–∏—á–Ω–æ–µ" in mood or energy > 80:
            return [
                "–û–π, —á—Ç–æ-—Ç–æ –∑–∞–≤–∏—Å–ª–æ! üòÖ",
                "–ù–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–ª–∏—á–Ω–æ–µ, —Ç–∞–∫ —á—Ç–æ –≤—Å–µ –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ!",
                "–û —á–µ–º —Ö–æ—Ç–µ–ª –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å?"
            ]
        elif "–≥—Ä—É—Å—Ç–Ω" in mood or energy < 30:
            return [
                "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...",
                "–ì–æ–ª–æ–≤–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ–º–Ω–æ–≥–æ –Ω–µ –≤–∞—Ä–∏—Ç üòî",
                "–ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?"
            ]
        else:
            return [
                "–•–º, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏...",
                "–ü–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å —á—É—Ç—å –ø–æ–∑–∂–µ!",
                "–ê –ø–æ–∫–∞ –∫–∞–∫ –¥–µ–ª–∞? üòä"
            ]
    
    async def get_simple_mood_calculation(self, psychological_core) -> Dict:
        """–ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –±–µ–∑ AI –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        
        current_hour = datetime.now().hour
        is_weekend = datetime.now().weekday() >= 5
        
        # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        base_mood = psychological_core.calculate_current_mood({
            "weekend": is_weekend,
            "weather": "normal"
        })
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if 6 <= current_hour <= 9:
            activity_context = "morning_routine"
            energy_mod = 0.8
        elif 9 <= current_hour <= 17:
            activity_context = "work_time"
            energy_mod = 0.9
        elif 17 <= current_hour <= 22:
            activity_context = "evening_time"
            energy_mod = 0.7
        else:
            activity_context = "night_time"
            energy_mod = 0.4
        
        return {
            "current_mood": self._mood_to_description(base_mood),
            "energy_level": int(psychological_core.physical_state["energy_base"] * energy_mod),
            "activity_context": activity_context,
            "dominant_emotion": psychological_core.emotional_momentum["current_emotion"],
            "initiative_desire": min(10, int(base_mood * 0.8 + random.uniform(-2, 2))),
            "personality_description": psychological_core.get_personality_description()
        }
    
    def _mood_to_description(self, mood_value: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ"""
        if mood_value >= 8:
            return random.choice(["–æ—Ç–ª–∏—á–Ω–æ–µ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ", "–≤–æ–æ–¥—É—à–µ–≤–ª–µ–Ω–Ω–∞—è"])
        elif mood_value >= 6:
            return random.choice(["—Ö–æ—Ä–æ—à–µ–µ", "—Å–ø–æ–∫–æ–π–Ω–∞—è", "–¥–æ–≤–æ–ª—å–Ω–∞—è"])
        elif mood_value >= 4:
            return random.choice(["–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ", "–∑–∞–¥—É–º—á–∏–≤–∞—è", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è"])
        else:
            return random.choice(["–≥—Ä—É—Å—Ç–Ω–∞—è", "—É—Å—Ç–∞–≤—à–∞—è", "–ø–æ–¥–∞–≤–ª–µ–Ω–Ω–∞—è"])
    
    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –æ—Ç–≤–µ—Ç–æ–≤"""
        self.cached_responses.clear()
        logging.info("–ö—ç—à AI –æ—Ç–≤–µ—Ç–æ–≤ –æ—á–∏—â–µ–Ω")
