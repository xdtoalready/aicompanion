# –ú–æ–¥—É–ª—å –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π

import re
import random
import asyncio
import logging
from typing import List, Dict, Any
from datetime import datetime

class TypingSimulator:
    """–°–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        
        # –†–µ–∂–∏–º—ã —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è
        self.speed_modes = {
            "lightning": {  # –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                "base_speed": 200,
                "min_time": 0.3,
                "max_time": 2.0
            },
            "fast": {       # –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                "base_speed": 100,
                "min_time": 0.5,
                "max_time": 5.0
            },
            "normal": {     # –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                "base_speed": 60,
                "min_time": 1.0,
                "max_time": 8.0
            },
            "slow": {       # –ú–µ–¥–ª–µ–Ω–Ω—ã–µ, –∑–∞–¥—É–º—á–∏–≤—ã–µ –æ—Ç–≤–µ—Ç—ã
                "base_speed": 40,
                "min_time": 2.0,
                "max_time": 12.0
            }
        }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.current_mode = config.get('typing_mode', 'fast')
        self._apply_speed_mode(self.current_mode)
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã (–æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∂–∏–º–∞)
        self.emotion_modifiers = {
            "excited": 1.4,      # –±—ã—Å—Ç—Ä–µ–µ –ø–µ—á–∞—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ –≤–æ–∑–±—É–∂–¥–µ–Ω–∞
            "happy": 1.2,        # –Ω–µ–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ
            "calm": 1.0,         # –±–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
            "anxious": 0.7,      # –º–µ–¥–ª–µ–Ω–Ω–µ–µ, –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ
            "sad": 0.6,          # –º–µ–¥–ª–µ–Ω–Ω–æ –∏ –ø–µ—á–∞–ª—å–Ω–æ
            "angry": 1.5,        # –±—ã—Å—Ç—Ä–æ –∏ —Ä–µ–∑–∫–æ
            "tired": 0.5         # –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ
        }
        
        self.logger = logging.getLogger(__name__)
    
    def _apply_speed_mode(self, mode: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        if mode not in self.speed_modes:
            mode = 'fast'
        
        settings = self.speed_modes[mode]
        self.base_typing_speed = settings['base_speed']
        self.min_typing_time = settings['min_time']
        self.max_typing_time = settings['max_time']
        
        self.logger.debug(f"–†–µ–∂–∏–º –ø–µ—á–∞—Ç–∞–Ω–∏—è: {mode} ({self.base_typing_speed} —Å–ª–æ–≤/–º–∏–Ω)")
    
    def set_speed_mode(self, mode: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        self.current_mode = mode
        self._apply_speed_mode(mode)
    
    def calculate_typing_time(self, message: str, emotional_state: str = "calm", 
                            energy_level: int = 50) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        
        # –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        word_count = len(message.split())
        char_count = len(message)
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤
        complexity_factor = self._calculate_complexity_factor(message)
        
        # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è: —Å–ª–æ–≤–∞ / —Å–∫–æ—Ä–æ—Å—Ç—å * 60 —Å–µ–∫—É–Ω–¥
        base_time = (word_count / self.base_typing_speed) * 60
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
        emotion_mod = self.emotion_modifiers.get(emotional_state, 1.0)
        energy_mod = energy_level / 100  # –æ—Ç 0 –¥–æ 1
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        typing_time = base_time * complexity_factor * emotion_mod * (0.5 + energy_mod * 0.5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å ¬±20%
        random_factor = random.uniform(0.8, 1.2)
        typing_time *= random_factor
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        typing_time = max(self.min_typing_time, min(self.max_typing_time, typing_time))
        
        self.logger.debug(f"–í—Ä–µ–º—è –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è '{message[:30]}...': {typing_time:.1f}—Å")
        return typing_time
    
    def _calculate_complexity_factor(self, message: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        
        complexity = 1.0
        
        # –ó–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∑–∞–º–µ–¥–ª—è—é—Ç
        punctuation_count = len(re.findall(r'[.!?,:;]', message))
        complexity += punctuation_count * 0.1
        
        # –≠–º–æ–¥–∑–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–∏—Å–∫–∞ –∏ –≤—ã–±–æ—Ä–∞
        emoji_count = len(re.findall(r'[üòÄ-üøø]', message))
        complexity += emoji_count * 0.2
        
        # –î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å–ª–æ–∂–Ω–µ–µ –ø–µ—á–∞—Ç–∞—Ç—å
        words = message.split()
        long_words = len([w for w in words if len(w) > 7])
        complexity += long_words * 0.05
        
        # –¶–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        special_chars = len(re.findall(r'[0-9@#$%^&*()_+=\[\]{}|\\:";\'<>?,./]', message))
        complexity += special_chars * 0.05
        
        return min(complexity, 2.0)  # –º–∞–∫—Å–∏–º—É–º x2 –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ
    
    def calculate_pause_between_messages(self, prev_message: str, next_message: str,
                                       emotional_state: str = "calm") -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        
        # –ë–∞–∑–æ–≤–∞—è –ø–∞—É–∑–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        base_pause = 0.5
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω—ã –ª–æ–≥–∏—á–µ—Å–∫–∏ - –º–µ–Ω—å—à–µ –ø–∞—É–∑–∞
        if self._are_messages_connected(prev_message, next_message):
            base_pause = random.uniform(0.3, 0.8)
        else:
            base_pause = random.uniform(0.8, 2.0)
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–∞—É–∑
        emotion_pause_mods = {
            "excited": 0.5,    # –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –º—ã—Å–ª–∏
            "happy": 0.7,      
            "calm": 1.0,
            "anxious": 1.3,    # –±–æ–ª—å—à–µ –ø–∞—É–∑, –¥—É–º–∞–µ—Ç
            "sad": 1.5,        # –º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            "angry": 0.4,      # —Ä–µ–∑–∫–æ, –±–µ–∑ –ø–∞—É–∑
            "tired": 1.8       # –¥–æ–ª–≥–∏–µ –ø–∞—É–∑—ã
        }
        
        pause_mod = emotion_pause_mods.get(emotional_state, 1.0)
        final_pause = base_pause * pause_mod
        
        return max(0.2, min(3.0, final_pause))
    
    def _are_messages_connected(self, msg1: str, msg2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π (—É–ª—É—á—à–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)"""
        
        msg1_lower = msg1.lower()
        msg2_lower = msg2.lower()
        
        # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å–≤—è–∑–æ–∫
        connectors = ['–∏', '–∞', '–Ω–æ', '–¥–∞', '—Ç–∞–∫', '–Ω—É', '–≤–æ—Ç', '–∫—Å—Ç–∞—Ç–∏', '–∫—Ä–æ–º–µ —Ç–æ–≥–æ', 
                     '—Ö–º', '–æ–π', '–∞–≥–∞', '–¥–∞-–¥–∞', '–∏–º–µ–Ω–Ω–æ', '—Ç–æ—á–Ω–æ', '–∫–æ–Ω–µ—á–Ω–æ']
        if any(msg2_lower.startswith(c + ' ') or msg2_lower.startswith(c + ',') for c in connectors):
            return True
        
        # –ï—Å–ª–∏ –º–Ω–æ–≥–æ –æ–±—â–∏—Ö –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤ (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ)
        stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–∫', '–∏–∑', '—á—Ç–æ', '–∫–∞–∫', 
                     '—ç—Ç–æ', '—Ç–æ—Ç', '–∫–æ—Ç–æ—Ä—ã–π', '–∞', '–Ω–æ', '–∏–ª–∏', '–∂–µ', '–±—ã', '–±—ã–ª'}
        
        words1 = set(msg1_lower.split()) - stop_words
        words2 = set(msg2_lower.split()) - stop_words
        
        if len(words1) > 0 and len(words2) > 0:
            common_words = words1.intersection(words2)
            overlap_ratio = len(common_words) / min(len(words1), len(words2))
            if overlap_ratio > 0.3:  # 30% –æ–±—â–∏—Ö —Å–ª–æ–≤ = —Å–≤—è–∑–∞–Ω–Ω—ã–µ
                return True
        
        # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º—ã—Å–ª—å (–≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å)
        if msg1.endswith('.') and msg2.endswith('?'):
            return True
        if msg1.endswith('?') and not msg2.endswith('?'):
            return True
        
        # –ï—Å–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ/–æ—Ç–≤–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        question_patterns = ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ']
        answer_patterns = ['–ø–æ—Ç–æ–º—É —á—Ç–æ', '–∏–∑-–∑–∞', '–±–ª–∞–≥–æ–¥–∞—Ä—è', '–Ω–∞–ø—Ä–∏–º–µ—Ä', '—Ç–æ –µ—Å—Ç—å']
        
        has_question = any(pattern in msg1_lower for pattern in question_patterns)
        has_answer = any(pattern in msg2_lower for pattern in answer_patterns)
        
        if has_question and has_answer:
            return True
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑–Ω–æ—Å—Ç—å (—Ä–µ–∞–∫—Ü–∏–∏)
        if ('?' in msg1 or '!' in msg1) and any(word in msg2_lower for word in ['—Ö–º', '–Ω—É', '–¥–∞', '–Ω–µ—Ç', '–º–æ–∂–µ—Ç']):
            return True
        
        return False
    
    async def send_messages_with_realistic_timing(self, messages: List[str], 
                                                emotional_state: str = "calm",
                                                energy_level: int = 50,
                                                send_callback=None,
                                                typing_callback=None) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏"""
        
        if not messages:
            return
        
        self.logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç–º–æ—Ü–∏–µ–π: {emotional_state}")
        
        for i, message in enumerate(messages):
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            if typing_callback:
                await typing_callback(True)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
            typing_time = self.calculate_typing_time(message, emotional_state, energy_level)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
            await asyncio.sleep(typing_time)
            
            # –£–±–∏—Ä–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if typing_callback:
                await typing_callback(False)
            
            if send_callback:
                await send_callback(message)
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if i < len(messages) - 1:
                pause_time = self.calculate_pause_between_messages(
                    message, messages[i + 1], emotional_state
                )
                
                self.logger.debug(f"–ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: {pause_time:.1f}—Å")
                await asyncio.sleep(pause_time)
        
        self.logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    def get_realistic_delays_summary(self, messages: List[str], 
                                   emotional_state: str = "calm",
                                   energy_level: int = 50) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∑–∞–¥–µ—Ä–∂–∫–∞–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        if not messages:
            return {"total_time": 0, "details": []}
        
        details = []
        total_time = 0
        
        for i, message in enumerate(messages):
            typing_time = self.calculate_typing_time(message, emotional_state, energy_level)
            
            pause_time = 0
            if i < len(messages) - 1:
                pause_time = self.calculate_pause_between_messages(
                    message, messages[i + 1], emotional_state
                )
            
            message_total = typing_time + pause_time
            total_time += message_total
            
            details.append({
                "message": message[:50] + "..." if len(message) > 50 else message,
                "typing_time": round(typing_time, 1),
                "pause_after": round(pause_time, 1),
                "total": round(message_total, 1)
            })
        
        return {
            "total_time": round(total_time, 1),
            "average_per_message": round(total_time / len(messages), 1),
            "details": details,
            "emotional_state": emotional_state,
            "energy_level": energy_level
        }

class TypingIndicator:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
    
    def __init__(self, telegram_app=None):
        self.telegram_app = telegram_app
        self.is_typing = False
    
    async def show_typing(self, chat_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        if self.telegram_app and not self.is_typing:
            self.is_typing = True
            try:
                await self.telegram_app.bot.send_chat_action(
                    chat_id=chat_id, 
                    action="typing"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ typing: {e}")
    
    async def hide_typing(self):
        """–°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        self.is_typing = False
        # –í Telegram –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∏—Å—á–µ–∑–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        # –∏–ª–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è
