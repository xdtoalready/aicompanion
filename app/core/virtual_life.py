import asyncio
import json
import logging
import random
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from dataclasses import dataclass

@dataclass
class VirtualActivity:
    """–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
    id: int
    activity_type: str  # "work", "hobby", "rest", "social", "cosplay"
    description: str    # "—Ä–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º –®–∏–∑—É–∫—É"
    start_time: datetime
    end_time: datetime
    status: str         # "planned", "active", "completed", "cancelled"
    mood_effect: float  # –∫–∞–∫ –≤–ª–∏—è–µ—Ç –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (-3 –¥–æ +3)
    energy_cost: int    # —Å–∫–æ–ª—å–∫–æ —ç–Ω–µ—Ä–≥–∏–∏ —Ç—Ä–∞—Ç–∏—Ç (0-100)

class VirtualLifeManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
    
    def __init__(self, db_path: str, character_loader=None):
        self.db_path = db_path
        self.character_loader = character_loader
        self.logger = logging.getLogger(__name__)
        
        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_activity: Optional[VirtualActivity] = None
        self.location = "–¥–æ–º–∞"  # –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–∂
        self.availability = "free"  # free, busy, away
        
        self._ensure_tables_exist()
        self._load_current_state()
    
    def _ensure_tables_exist(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS virtual_activities (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        character_id INTEGER DEFAULT 1,
                        activity_type TEXT NOT NULL,
                        description TEXT NOT NULL,
                        start_time DATETIME NOT NULL,
                        end_time DATETIME NOT NULL,
                        status TEXT DEFAULT 'planned',
                        mood_effect REAL DEFAULT 0,
                        energy_cost INTEGER DEFAULT 20,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                cursor.execute("""
                    CREATE TABLE IF NOT EXISTS character_states (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        character_id INTEGER DEFAULT 1,
                        location TEXT DEFAULT '–¥–æ–º–∞',
                        availability TEXT DEFAULT 'free',
                        current_activity_id INTEGER,
                        mood_modifier REAL DEFAULT 0,
                        energy_level INTEGER DEFAULT 80,
                        last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (current_activity_id) REFERENCES virtual_activities(id)
                    )
                """)
                
                conn.commit()
                self.logger.info("üìÖ –¢–∞–±–ª–∏—Ü—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ —Å–æ–∑–¥–∞–Ω—ã")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏: {e}")
    
    def _load_current_state(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                cursor.execute("""
                    SELECT location, availability, current_activity_id
                    FROM character_states 
                    WHERE character_id = 1
                    ORDER BY last_updated DESC 
                    LIMIT 1
                """)
                
                result = cursor.fetchone()
                if result:
                    self.location = result[0]
                    self.availability = result[1]
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                    if result[2]:
                        self.current_activity = self._get_activity_by_id(result[2])
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

    def _get_today_ai_plans(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ò–ò-–ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            from datetime import date
            today = date.today()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT id, activity_type, description, start_time, end_time,
                        importance, flexibility, emotional_reason
                    FROM virtual_activities
                    WHERE DATE(start_time) = ? AND generated_by_ai = 1
                    ORDER BY start_time ASC
                """, (today.isoformat(),))
                
                plans = []
                for row in cursor.fetchall():
                    plans.append({
                        'id': row[0],
                        'activity_type': row[1],
                        'description': row[2],
                        'start_time': row[3],
                        'end_time': row[4],
                        'importance': row[5] or 5,
                        'flexibility': row[6] or 5,
                        'emotional_reason': row[7] or ''
                    })
                
                return plans
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ò-–ø–ª–∞–Ω–æ–≤: {e}")
            return []
        
    def check_and_update_activities(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        try:
            changes = {
                "activity_started": None,
                "activity_ended": None, 
                "status_changed": False
            }
            
            now = datetime.now()
            
            # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –ò–ò-–ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            ai_plans = self._get_today_ai_plans()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –ò–ò-–ø–ª–∞–Ω–æ–≤
            for plan in ai_plans:
                try:
                    plan_start = datetime.fromisoformat(plan['start_time'])
                    plan_end = datetime.fromisoformat(plan['end_time'])
                    
                    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∞—Ç—å—Å—è
                    if plan_start <= now < plan_end and not self.current_activity:
                        activity = VirtualActivity(
                            id=plan['id'],
                            activity_type=plan['activity_type'],
                            description=plan['description'],
                            start_time=plan_start,
                            end_time=plan_end,
                            status="active",
                            mood_effect=0.0,
                            energy_cost=20
                        )
                        
                        self.current_activity = activity
                        self.availability = "busy"
                        changes["activity_started"] = activity
                        changes["status_changed"] = True
                        
                        self.logger.info(f"üé≠ –ù–∞—á–∞—Ç–∞ –ò–ò-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity.description}")
                        break
                    
                    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è
                    elif self.current_activity and now >= plan_end:
                        if self.current_activity.id == plan['id']:
                            changes["activity_ended"] = self.current_activity
                            self.current_activity = None
                            self.availability = "free"
                            changes["status_changed"] = True
                            
                            self.logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ò–ò-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                            break
                            
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞ {plan}: {e}")
                    continue
            
            return changes
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏: {e}")
            return {"activity_started": None, "activity_ended": None, "status_changed": False}
        
    def get_current_context_for_ai(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è AI (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        context_parts = []
        
        context_parts.append(f"–¢–ï–ö–£–©–ï–ï –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï: {self.location}")
        context_parts.append(f"–î–û–°–¢–£–ü–ù–û–°–¢–¨: {self.availability}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ò–ò-–ø–ª–∞–Ω—ã
        ai_plans = self._get_today_ai_plans()
        current_time = datetime.now()
        
        # –ò—â–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –±–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞–Ω—ã
        current_plan = None
        upcoming_plans = []
        
        for plan in ai_plans:
            try:
                plan_start = datetime.fromisoformat(plan['start_time'])
                plan_end = datetime.fromisoformat(plan['end_time'])
                
                if plan_start <= current_time < plan_end:
                    current_plan = plan
                elif plan_start > current_time:
                    upcoming_plans.append(plan)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∞: {e}")
                continue
        
        if current_plan:
            try:
                time_left = (datetime.fromisoformat(current_plan['end_time']) - current_time).total_seconds() / 3600
                
                context_parts.append(f"–¢–ï–ö–£–©–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨: {current_plan['description']}")
                context_parts.append(f"–¢–∏–ø: {current_plan['activity_type']}")
                context_parts.append(f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left:.1f} —á–∞—Å–æ–≤")
                context_parts.append(f"–í–∞–∂–Ω–æ—Å—Ç—å: {current_plan['importance']}/10")
                
                if current_plan['emotional_reason']:
                    context_parts.append(f"–ü—Ä–∏—á–∏–Ω–∞: {current_plan['emotional_reason']}")
                
                # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                activity_behaviors = {
                    "cosplay": "–ü–û–í–ï–î–ï–ù–ò–ï: –£–≤–ª–µ—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–æ–π –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º, –Ω–æ –º–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å",
                    "work": "–ü–û–í–ï–î–ï–ù–ò–ï: –ù–∞ —Ä–∞–±–æ—Ç–µ/—É—á–µ–±–µ, –æ—Ç–≤–µ—á–∞—é –∫–æ–≥–¥–∞ –º–æ–≥—É", 
                    "social": "–ü–û–í–ï–î–ï–ù–ò–ï: –° –¥—Ä—É–∑—å—è–º–∏, –Ω–æ —Ä–∞–¥–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è",
                    "rest": "–ü–û–í–ï–î–ï–ù–ò–ï: –û—Ç–¥—ã—Ö–∞—é, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è",
                    "hobby": "–ü–û–í–ï–î–ï–ù–ò–ï: –ó–∞–Ω–∏–º–∞—é—Å—å –ª—é–±–∏–º—ã–º –¥–µ–ª–æ–º, –≤ —Ö–æ—Ä–æ—à–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"
                }
                
                behavior = activity_behaviors.get(current_plan['activity_type'], "–ü–û–í–ï–î–ï–ù–ò–ï: –ó–∞–Ω—è—Ç–∞, –Ω–æ –º–æ–≥—É –ø–æ–æ–±—â–∞—Ç—å—Å—è")
                context_parts.append(behavior)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        else:
            context_parts.append("–ê–ö–¢–ò–í–ù–û–°–¢–¨: –°–µ–π—á–∞—Å —Å–≤–æ–±–æ–¥–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞–Ω—ã
        if upcoming_plans:
            context_parts.append(f"\n–ë–õ–ò–ñ–ê–ô–®–ò–ï –ü–õ–ê–ù–´:")
            for plan in upcoming_plans[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                try:
                    plan_start = datetime.fromisoformat(plan['start_time'])
                    time_str = plan_start.strftime('%H:%M')
                    importance_marker = "üî•" if plan['importance'] >= 8 else "üìã"
                    context_parts.append(f"‚Ä¢ {time_str} {importance_marker} {plan['description']}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
                    continue
        
        return "\n".join(context_parts)
    
    def _get_activity_by_id(self, activity_id: int) -> Optional[VirtualActivity]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT id, activity_type, description, start_time, end_time, 
                           status, mood_effect, energy_cost
                    FROM virtual_activities 
                    WHERE id = ?
                """, (activity_id,))
                
                result = cursor.fetchone()
                if result:
                    return VirtualActivity(
                        id=result[0],
                        activity_type=result[1],
                        description=result[2],
                        start_time=datetime.fromisoformat(result[3]),
                        end_time=datetime.fromisoformat(result[4]),
                        status=result[5],
                        mood_effect=result[6],
                        energy_cost=result[7]
                    )
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        
        return None
    
    def schedule_activity(self, activity_type: str, description: str, 
                         start_time: datetime, duration_hours: float,
                         mood_effect: float = 0, energy_cost: int = 20) -> bool:
        """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        try:
            end_time = start_time + timedelta(hours=duration_hours)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    INSERT INTO virtual_activities 
                    (character_id, activity_type, description, start_time, end_time,
                     mood_effect, energy_cost, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?, 'planned')
                """, (
                    1, activity_type, description, 
                    start_time.isoformat(), end_time.isoformat(),
                    mood_effect, energy_cost
                ))
                
                conn.commit()
                
                self.logger.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {description} –Ω–∞ {start_time.strftime('%d.%m %H:%M')}")
                return True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def check_and_update_activities(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        now = datetime.now()
        changes = {
            "activity_started": None,
            "activity_ended": None,
            "status_changed": False
        }
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –Ω–∞—á–∞—Ç—å—Å—è
                cursor.execute("""
                    SELECT id, activity_type, description, start_time, end_time,
                           mood_effect, energy_cost
                    FROM virtual_activities
                    WHERE status = 'planned' 
                    AND start_time <= ?
                    ORDER BY start_time ASC
                    LIMIT 1
                """, (now.isoformat(),))
                
                starting_activity = cursor.fetchone()
                if starting_activity:
                    activity = VirtualActivity(
                        id=starting_activity[0],
                        activity_type=starting_activity[1],
                        description=starting_activity[2],
                        start_time=datetime.fromisoformat(starting_activity[3]),
                        end_time=datetime.fromisoformat(starting_activity[4]),
                        status="active",
                        mood_effect=starting_activity[5],
                        energy_cost=starting_activity[6]
                    )
                    
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å
                    if self.current_activity:
                        self._end_activity(self.current_activity.id)
                        changes["activity_ended"] = self.current_activity
                    
                    # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
                    self._start_activity(activity.id)
                    self.current_activity = activity
                    changes["activity_started"] = activity
                    changes["status_changed"] = True
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–∞—è –¥–æ–ª–∂–Ω–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è
                elif self.current_activity and now >= self.current_activity.end_time:
                    self._end_activity(self.current_activity.id)
                    changes["activity_ended"] = self.current_activity
                    self.current_activity = None
                    self.availability = "free"
                    changes["status_changed"] = True
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {e}")
        
        return changes
    
    def _start_activity(self, activity_id: int):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                cursor.execute("""
                    UPDATE virtual_activities 
                    SET status = 'active'
                    WHERE id = ?
                """, (activity_id,))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
                cursor.execute("""
                    INSERT INTO character_states
                    (character_id, current_activity_id, availability, last_updated)
                    VALUES (?, ?, 'busy', ?)
                """, (1, activity_id, datetime.now().isoformat()))
                
                self.availability = "busy"
                conn.commit()
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
    
    def _end_activity(self, activity_id: int):
        """–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    UPDATE virtual_activities 
                    SET status = 'completed'
                    WHERE id = ?
                """, (activity_id,))
                
                conn.commit()

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

    async def _notify_activity_end(self, activity: VirtualActivity):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        messages = [
            f"–Ø –∑–∞–∫–æ–Ω—á–∏–ª–∞ {activity.description}.",
            "–¢–µ–ø–µ—Ä—å —è —Å–≤–æ–±–æ–¥–Ω–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è!",
        ]

        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ –≤—ã–≤–æ–¥–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ª–æ–≥
        for msg in messages:
            self.logger.info(msg)
    
    def get_current_context_for_ai(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è AI"""
        context_parts = []
        
        context_parts.append(f"–¢–ï–ö–£–©–ï–ï –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–ï: {self.location}")
        context_parts.append(f"–î–û–°–¢–£–ü–ù–û–°–¢–¨: {self.availability}")
        
        if self.current_activity:
            activity = self.current_activity
            time_left = (activity.end_time - datetime.now()).total_seconds() / 3600
            
            context_parts.append(f"–¢–ï–ö–£–©–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨: {activity.description}")
            context_parts.append(f"–¢–∏–ø: {activity.activity_type}")
            context_parts.append(f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_left:.1f} —á–∞—Å–æ–≤")
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if activity.activity_type == "cosplay":
                context_parts.append("–ü–û–í–ï–î–ï–ù–ò–ï: –£–≤–ª–µ—á–µ–Ω–∞ —Ä–∞–±–æ—Ç–æ–π –Ω–∞–¥ –∫–æ—Å—Ç—é–º–æ–º, –º–æ–∂–µ—Ç –¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º")
            elif activity.activity_type == "work":
                context_parts.append("–ü–û–í–ï–î–ï–ù–ò–ï: –ù–∞ —Ä–∞–±–æ—Ç–µ/—É—á–µ–±–µ, –æ—Ç–≤–µ—á–∞–µ—Ç —Ä–µ–∂–µ –Ω–æ —Å —Ä–∞–¥–æ—Å—Ç—å—é")
            elif activity.activity_type == "rest":
                context_parts.append("–ü–û–í–ï–î–ï–ù–ò–ï: –û—Ç–¥—ã—Ö–∞–µ—Ç, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–∞—è, –≤—Ä–µ–º—è –¥–ª—è –¥–æ–ª–≥–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤")
            elif activity.activity_type == "social":
                context_parts.append("–ü–û–í–ï–î–ï–ù–ò–ï: –° –¥—Ä—É–∑—å—è–º–∏/–Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, –º–æ–∂–µ—Ç —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç")
        else:
            context_parts.append("–ê–ö–¢–ò–í–ù–û–°–¢–¨: –°–≤–æ–±–æ–¥–Ω–∞, –¥–æ–º–∞, –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è")
        
        return "\n".join(context_parts)
    
    def get_upcoming_activities(self, hours: int = 24) -> List[VirtualActivity]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        try:
            end_time = datetime.now() + timedelta(hours=hours)
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT id, activity_type, description, start_time, end_time,
                           status, mood_effect, energy_cost
                    FROM virtual_activities
                    WHERE status = 'planned'
                    AND start_time <= ?
                    ORDER BY start_time ASC
                """, (end_time.isoformat(),))
                
                activities = []
                for row in cursor.fetchall():
                    activities.append(VirtualActivity(
                        id=row[0],
                        activity_type=row[1],
                        description=row[2],
                        start_time=datetime.fromisoformat(row[3]),
                        end_time=datetime.fromisoformat(row[4]),
                        status=row[5],
                        mood_effect=row[6],
                        energy_cost=row[7]
                    ))
                
                return activities
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤: {e}")
            return []
