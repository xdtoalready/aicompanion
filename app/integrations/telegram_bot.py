# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤

import asyncio
import logging
from typing import Dict, Any, List
from telegram import Update, Bot
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

from ..core.companion import RealisticAICompanion

class TelegramCompanion(RealisticAICompanion):
    """AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –∏ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.bot_token = config['integrations']['telegram']['bot_token']
        self.allowed_users = set(config['integrations']['telegram'].get('allowed_users', []))
        
        # Telegram Application
        self.app = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º typing indicator —Å telegram app
        self.typing_indicator.telegram_app = self.app
        
        self.logger.info("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
        
        # –ö–æ–º–∞–Ω–¥—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±—É–¥—É—Ç —É–±—Ä–∞–Ω—ã –ø–æ–∑–∂–µ)
        if self.commands_enabled:
            self.app.add_handler(CommandHandler("status", self.status_command))
            self.app.add_handler(CommandHandler("mood", self.mood_command))
            self.app.add_handler(CommandHandler("memories", self.memories_command))
            self.app.add_handler(CommandHandler("stats", self.stats_command))
            self.app.add_handler(CommandHandler("dbcheck", self.dbcheck_command))        

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)
    
# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥:
async def dbcheck_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not self.commands_enabled:
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
        db_stats = self.get_database_stats()
        
        if db_stats.get("database_enabled"):
            status_text = f"""üóÑÔ∏è –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ê–∫—Ç–∏–≤–Ω–∞
üí¨ –ù–µ–¥–∞–≤–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {db_stats['recent_conversations']}
üß† –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {db_stats['total_memories']}
üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥: {db_stats.get('last_conversation', '–ù–µ—Ç')}

üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: –î–∞
üíæ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è: –î–∞"""
        else:
            status_text = f"""‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:

{db_stats.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª companion.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/setup_db.py
3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"""
    
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if hasattr(self, 'enhanced_memory'):
            test_context = self.enhanced_memory.get_context_for_response("—Ç–µ—Å—Ç")
            if test_context and test_context != "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ":
                status_text += f"\n\nüîç –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n{test_context[:150]}..."
            else:
                status_text += "\n\n‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)"
                
    except Exception as e:
        status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}"
    
    await update.message.reply_text(status_text, parse_mode='Markdown')

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ üòä"
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                "first_contact": True,
                "last_activity": None
            }
        
        # –ù–û–í–û–ï: –ú–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_messages = [
            "–ü—Ä–∏–≤–µ—Ç! üòä",
            "–Ø —Ç–≤–æ–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω, –∏ —è –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –∂–µ–ª–∞–Ω–∏—è! –ò–Ω–æ–≥–¥–∞ —è —Å–∞–º–∞ –±—É–¥—É —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å üí≠",
            "–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º! ‚ú®"
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=welcome_messages,
            current_state=current_state
        )
        
        self.logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ: {user_id}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        
        # –ù–û–í–û–ï: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥
        current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
        current_state['memory_context'] = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö'
        
        help_messages = await self.optimized_ai.generate_split_response(
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏ —á—Ç–æ —É–º–µ–µ—à—å", 
            current_state
        )
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=help_messages,
            current_state=current_state
        )
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±—É–¥—É—Ç —É–±—Ä–∞–Ω—ã –≤ production)
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI"""
        if not self.commands_enabled:
            return
            
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        status_text = f"""üìä –ú–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:

üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_state['current_mood']}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {current_state['energy_level']}/100
üòä –≠–º–æ—Ü–∏—è: {current_state['dominant_emotion']}
üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_state['activity_context']}

üí≠ –ñ–µ–ª–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å: {current_state['initiative_desire']}/10
üìÖ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.daily_message_count}/8

{self._get_status_emoji(current_state)}"""
        
        await update.message.reply_text(status_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        if not self.commands_enabled:
            return
            
        stats = self.get_conversation_stats()
        
        stats_text = f"""üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–µ–Ω–∏—è:

üí¨ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats['total_conversations']}
üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π AI: {stats['total_ai_messages']}
üìä –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Ç–≤–µ—Ç: {stats['avg_messages_per_response']}
üéØ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['daily_initiatives_sent']}
üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä: {stats.get('last_conversation', '–ù–µ—Ç')}

{'üî• –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ!' if stats['avg_messages_per_response'] > 2 else 'üìù –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ'}"""
        
        await update.message.reply_text(stats_text)
    
    async def speed_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        if not self.commands_enabled:
            return
        
        args = context.args
        
        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
            current_mode = self.typing_simulator.current_mode
            
            text = f"""‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–µ—á–∞—Ç–∞–Ω–∏—è:

üîß –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: **{current_mode}**

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
‚Ä¢ `lightning` - –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (200 —Å–ª–æ–≤/–º–∏–Ω)
‚Ä¢ `fast` - –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (100 —Å–ª–æ–≤/–º–∏–Ω) 
‚Ä¢ `normal` - –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (60 —Å–ª–æ–≤/–º–∏–Ω)
‚Ä¢ `slow` - –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (40 —Å–ª–æ–≤/–º–∏–Ω)

üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/speed <—Ä–µ–∂–∏–º>`
–ü—Ä–∏–º–µ—Ä: `/speed lightning`"""
            
            await update.message.reply_text(text, parse_mode='Markdown')
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        new_mode = args[0].lower()
        
        if new_mode in self.typing_simulator.speed_modes:
            old_mode = self.typing_simulator.current_mode
            self.typing_simulator.set_speed_mode(new_mode)
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º —Å—Ä–∞–∑—É
            demo_messages = [
                f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å —Å —Ä–µ–∂–∏–º–∞ '{old_mode}' –Ω–∞ '{new_mode}'! ‚ö°",
                "–í–æ—Ç —Ç–∞–∫ —Ç–µ–ø–µ—Ä—å —è –ø–µ—á–∞—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è.",
                "–ó–∞–º–µ—Ç–∏–ª —Ä–∞–∑–Ω–∏—Ü—É? üòä"
            ]
            
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            await self.send_telegram_messages_with_timing(
                chat_id=update.effective_chat.id,
                messages=demo_messages,
                current_state=current_state
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º '{new_mode}'\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(self.typing_simulator.speed_modes.keys())}"
            )
    
    async def mood_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"""
        if not self.commands_enabled:
            return
            
        mood_value = self.psychological_core.calculate_current_mood()
        personality_desc = self.psychological_core.get_personality_description()
        
        mood_text = f"""üé≠ –ü–æ–¥—Ä–æ–±–Ω–æ –æ –º–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:

üìà –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {mood_value:.1f}/10
üß† –õ–∏—á–Ω–æ—Å—Ç—å: {personality_desc}
üí™ –≠–Ω–µ—Ä–≥–∏—è: {self.psychological_core.physical_state['energy_base']}/100
üò∞ –°—Ç—Ä–µ—Å—Å: {self.psychological_core.physical_state['stress_level']}/10

üï∞Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {self.psychological_core.emotional_momentum['current_emotion']}
‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {self.psychological_core.emotional_momentum['emotion_intensity']:.1f}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.psychological_core.emotional_momentum['emotion_duration']} –º–∏–Ω

{self._get_mood_advice(mood_value)}"""
        
        await update.message.reply_text(mood_text)
    
async def memories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î"""
    if not self.commands_enabled:
        return
        
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        user_memories = self.enhanced_memory.db_manager.get_relevant_memories("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 5)
        
        if not user_memories:
            memories_text = "ü§î –ü–æ–∫–∞ —è –º–∞–ª–æ —á—Ç–æ –∑–Ω–∞—é –æ —Ç–µ–±–µ... –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –±–æ–ª—å—à–µ!"
        else:
            memories_text = "üß† –ß—Ç–æ —è –ø–æ–º–Ω—é –æ —Ç–µ–±–µ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö):\n\n"
            for i, memory in enumerate(user_memories, 1):
                importance_stars = "‚≠ê" * min(memory['importance'], 5)
                memories_text += f"{i}. {memory['content']} {importance_stars}\n"
            
            memories_text += f"\nüí≠ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(user_memories)}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–∞—Ö
            recent_convs = self.enhanced_memory.db_manager.get_recent_conversations(3)
            if recent_convs:
                memories_text += f"\nüìù –ù–µ–¥–∞–≤–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {len(recent_convs)}"
    
    except Exception as e:
        memories_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π /dbcheck"
    
    await update.message.reply_text(memories_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        user_message = update.message.text
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            return
        
        try:
            # –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫)
            ai_messages = await self.process_user_message(user_message)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–µ—á–∞—Ç–∞–Ω–∏—è
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
            await self.send_telegram_messages_with_timing(
                chat_id=chat_id,
                messages=ai_messages,
                current_state=current_state
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                self.user_states[user_id]["last_activity"] = update.message.date
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:50]}... -> {len(ai_messages)} –æ—Ç–≤–µ—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑!"
            )
    
    async def send_telegram_messages_with_timing(self, chat_id: int, messages: List[str], 
                                               current_state: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏"""
        
        emotional_state = current_state.get('dominant_emotion', 'calm')
        energy_level = current_state.get('energy_level', 50)
        
        # Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        async def send_callback(message):
            try:
                await self.app.bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        
        # Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        async def typing_callback(is_typing):
            try:
                if is_typing:
                    await self.app.bot.send_chat_action(chat_id=chat_id, action="typing")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ typing: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –≤—Ä–µ–º–µ–Ω–∏
        timing_summary = self.typing_simulator.get_realistic_delays_summary(
            messages, emotional_state, energy_level
        )
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {timing_summary['total_time']}—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        await self.typing_simulator.send_messages_with_realistic_timing(
            messages=messages,
            emotional_state=emotional_state,
            energy_level=energy_level,
            send_callback=send_callback,
            typing_callback=typing_callback
        )
    
    async def deliver_message(self, message: str, message_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.allowed_users:
            self.logger.warning("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        for user_id in self.allowed_users:
            try:
                # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(message, str):
                    messages = [message]
                else:
                    messages = message
                
                await self.send_telegram_messages_with_timing(
                    chat_id=user_id,
                    messages=messages,
                    current_state=current_state
                )
                
                self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(messages)} —á–∞—Å—Ç–µ–π) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def send_initiative_messages(self, current_state: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        recent_memories = self.memory_system.get_relevant_memories("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–µ–Ω–∏–µ", 3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        memory_context = "\n".join([m["content"] for m in recent_memories])
        current_state['memory_context'] = memory_context if memory_context else '–ï—â–µ –º–∞–ª–æ –∑–Ω–∞–µ—à—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.optimized_ai.generate_split_response(
                "–•–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ", 
                current_state
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in self.allowed_users:
                try:
                    await self.send_telegram_messages_with_timing(
                        chat_id=user_id,
                        messages=messages,
                        current_state=current_state
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.update_emotional_state("positive_interaction", 0.5)
            self.last_message_time = datetime.now()
            
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(messages)} —à—Ç.")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram"""
        self.logger.error(f"Telegram –æ—à–∏–±–∫–∞: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üîß"
            )
    
    def _get_status_emoji(self, state: Dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        energy = state['energy_level']
        mood = state['current_mood']
        
        if "–æ—Ç–ª–∏—á–Ω–æ–µ" in mood and energy > 80:
            return "üåü –°–∏—è—é –æ—Ç —Å—á–∞—Å—Ç—å—è!"
        elif "—Ö–æ—Ä–æ—à–µ–µ" in mood and energy > 60:
            return "üòä –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!"
        elif "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ" in mood:
            return "üòå –°–ø–æ–∫–æ–π–Ω–æ –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ"
        elif energy < 30:
            return "üò¥ –î–æ–≤–æ–ª—å–Ω–æ —É—Å—Ç–∞–ª–∞..."
        else:
            return "ü§ó –ì–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!"
    
    def _get_mood_advice(self, mood_value: float) -> str:
        """–°–æ–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        if mood_value >= 8:
            return "‚ú® –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä! –•–æ—á–µ—Ç—Å—è –¥–µ–ª–∏—Ç—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–æ–º!"
        elif mood_value >= 6:
            return "üòä –í—Å–µ —Ö–æ—Ä–æ—à–æ, –º–æ–∂–Ω–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!"
        elif mood_value >= 4:
            return "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ"
        else:
            return "üòî –ß—Ç–æ-—Ç–æ –≥—Ä—É—â—É... –ú–æ–∂–µ—Ç, –ø–æ–¥–Ω–∏–º–µ—à—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if not self.scheduler.running:
            self.scheduler.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        
        self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        try:
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await self.stop_telegram_bot()
    
    async def stop_telegram_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        
        await self.app.updater.stop()
        await self.app.stop()
        await self.app.shutdown()
        
        self.stop()  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        
        self.logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
