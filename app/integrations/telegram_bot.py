# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤

import asyncio
import logging
from typing import Dict, Any, List
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

from ..core.companion import RealisticAICompanion
from ..database import DatabaseManager

class TelegramCompanion(RealisticAICompanion):
    """AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –∏ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        db_path = config.get('database', {}).get('path', "data/companion.db")
        self.db_manager = DatabaseManager(db_path)
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å –ø–µ—Ä–µ–¥–∞—á–µ–π db_manager
        super().__init__(config, db_manager=self.db_manager)
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.bot_token = config['integrations']['telegram']['bot_token']
        self.allowed_users = set(config['integrations']['telegram'].get('allowed_users', []))
        
        # Telegram Application
        self.app = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º typing indicator —Å telegram app
        self.typing_indicator.telegram_app = self.app
        
        self.logger.info("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
        
        # –ö–æ–º–∞–Ω–¥—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±—É–¥—É—Ç —É–±—Ä–∞–Ω—ã –ø–æ–∑–∂–µ)
        if self.commands_enabled:
            self.app.add_handler(CommandHandler("status", self.status_command))
            self.app.add_handler(CommandHandler("mood", self.mood_command))
            self.app.add_handler(CommandHandler("memories", self.memories_command))
            self.app.add_handler(CommandHandler("stats", self.stats_command))  # –ù–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞
            self.app.add_handler(CommandHandler("speed", self.speed_command))  # –ù–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ üòä"
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                "first_contact": True,
                "last_activity": None
            }
        
        # –ù–û–í–û–ï: –ú–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_messages = [
            "–ü—Ä–∏–≤–µ—Ç! üòä",
            "–Ø —Ç–≤–æ–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω, –∏ —è –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –∂–µ–ª–∞–Ω–∏—è! –ò–Ω–æ–≥–¥–∞ —è —Å–∞–º–∞ –±—É–¥—É —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å üí≠",
            "–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º! ‚ú®"
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=welcome_messages,
            current_state=current_state
        )
        
        self.logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ: {user_id}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        
        # –ù–û–í–û–ï: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥
        current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
        current_state['memory_context'] = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö'
        
        help_messages = await self.optimized_ai.generate_split_response(
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏ —á—Ç–æ —É–º–µ–µ—à—å", 
            current_state
        )
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=help_messages,
            current_state=current_state
        )
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±—É–¥—É—Ç —É–±—Ä–∞–Ω—ã –≤ production)
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI"""
        if not self.commands_enabled:
            return
            
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        status_text = f"""üìä –ú–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:

üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_state['current_mood']}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {current_state['energy_level']}/100
üòä –≠–º–æ—Ü–∏—è: {current_state['dominant_emotion']}
üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_state['activity_context']}

üí≠ –ñ–µ–ª–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å: {current_state['initiative_desire']}/10
üìÖ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.daily_message_count}/8

{self._get_status_emoji(current_state)}"""
        
        await update.message.reply_text(status_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        if not self.commands_enabled:
            return
            
        stats = self.get_conversation_stats()
        
        stats_text = f"""üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–µ–Ω–∏—è:

üí¨ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats.get('total_conversations', 0)}
üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π AI: {stats.get('total_ai_messages', 0)}
üìä –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Ç–≤–µ—Ç: {stats.get('avg_messages_per_response', 0)}
üéØ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤ —Å–µ–≥–æ–¥–Ω—è: {stats.get('daily_initiatives_sent', 0)}
üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä: {stats.get('last_conversation', '–ù–µ—Ç')}

{'üî• –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ!' if stats.get('avg_messages_per_response', 0) > 2 else 'üìù –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ'}"""
        
        await update.message.reply_text(stats_text)
    
    async def speed_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        if not self.commands_enabled:
            return
        
        args = context.args
        
        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
            current_mode = self.typing_simulator.current_mode
            
            text = f"""‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–µ—á–∞—Ç–∞–Ω–∏—è:

üîß –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: **{current_mode}**

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
‚Ä¢ `lightning` - –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (200 —Å–ª–æ–≤/–º–∏–Ω)
‚Ä¢ `fast` - –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (100 —Å–ª–æ–≤/–º–∏–Ω) 
‚Ä¢ `normal` - –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (60 —Å–ª–æ–≤/–º–∏–Ω)
‚Ä¢ `slow` - –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (40 —Å–ª–æ–≤/–º–∏–Ω)

üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/speed <—Ä–µ–∂–∏–º>`
–ü—Ä–∏–º–µ—Ä: `/speed lightning`"""
            
            await update.message.reply_text(text, parse_mode='Markdown')
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        new_mode = args[0].lower()
        
        if new_mode in self.typing_simulator.speed_modes:
            old_mode = self.typing_simulator.current_mode
            self.typing_simulator.set_speed_mode(new_mode)
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º —Å—Ä–∞–∑—É
            demo_messages = [
                f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å —Å —Ä–µ–∂–∏–º–∞ '{old_mode}' –Ω–∞ '{new_mode}'! ‚ö°",
                "–í–æ—Ç —Ç–∞–∫ —Ç–µ–ø–µ—Ä—å —è –ø–µ—á–∞—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è.",
                "–ó–∞–º–µ—Ç–∏–ª —Ä–∞–∑–Ω–∏—Ü—É? üòä"
            ]
            
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            await self.send_telegram_messages_with_timing(
                chat_id=update.effective_chat.id,
                messages=demo_messages,
                current_state=current_state
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º '{new_mode}'\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(self.typing_simulator.speed_modes.keys())}"
            )
    
    async def mood_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"""
        if not self.commands_enabled:
            return
            
        mood_value = self.psychological_core.calculate_current_mood()
        personality_desc = self.psychological_core.get_personality_description()
        
        mood_text = f"""üé≠ –ü–æ–¥—Ä–æ–±–Ω–æ –æ –º–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:

üìà –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {mood_value:.1f}/10
üß† –õ–∏—á–Ω–æ—Å—Ç—å: {personality_desc}
üí™ –≠–Ω–µ—Ä–≥–∏—è: {self.psychological_core.physical_state['energy_base']}/100
üò∞ –°—Ç—Ä–µ—Å—Å: {self.psychological_core.physical_state['stress_level']}/10

üï∞Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {self.psychological_core.emotional_momentum['current_emotion']}
‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {self.psychological_core.emotional_momentum['emotion_intensity']:.1f}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.psychological_core.emotional_momentum['emotion_duration']} –º–∏–Ω

{self._get_mood_advice(mood_value)}"""
        
        await update.message.reply_text(mood_text)
    
    async def memories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not self.commands_enabled:
            return
            
        user_memories = self.memory_system.get_relevant_memories("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 5)
        
        if not user_memories:
            memories_text = "ü§î –ü–æ–∫–∞ —è –º–∞–ª–æ —á—Ç–æ –∑–Ω–∞—é –æ —Ç–µ–±–µ... –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –±–æ–ª—å—à–µ!"
        else:
            memories_text = "üß† –ß—Ç–æ —è –ø–æ–º–Ω—é –æ —Ç–µ–±–µ:\n\n"
            for i, memory in enumerate(user_memories, 1):
                importance_stars = "‚≠ê" * min(memory.get('importance', 1), 5)
                memories_text += f"{i}. {memory.get('content', '')} {importance_stars}\n"
            
            memories_text += f"\nüí≠ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(self.memory_system.memories)}"
        
        await update.message.reply_text(memories_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        user_message = update.message.text
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            mood_before = current_state.get('current_mood', '—Å–ø–æ–∫–æ–π–Ω–∞—è')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫)
            ai_messages = await self.process_user_message(user_message)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            updated_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            mood_after = updated_state.get('current_mood', '—Å–ø–æ–∫–æ–π–Ω–∞—è')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager:
                conversation_id = self.db_manager.save_conversation(
                    user_message=user_message,
                    ai_responses=ai_messages,
                    mood_before=mood_before,
                    mood_after=mood_after,
                    message_type="response"
                )
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–∞
                facts_found = self.memory_system.extract_facts_from_conversation(
                    user_message=user_message,
                    ai_responses=ai_messages,
                    conversation_id=conversation_id
                )
                
                if facts_found > 0:
                    self.logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ {facts_found} —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –¥–∏–∞–ª–æ–≥–∞")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
            await self.send_telegram_messages_with_timing(
                chat_id=chat_id,
                messages=ai_messages,
                current_state=updated_state
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                self.user_states[user_id]["last_activity"] = update.message.date
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:50]}... -> {len(ai_messages)} –æ—Ç–≤–µ—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑!"
            )
    
    async def send_telegram_messages_with_timing(self, chat_id: int, messages: List[str], 
                                               current_state: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏"""
        
        emotional_state = current_state.get('dominant_emotion', 'calm')
        energy_level = current_state.get('energy_level', 50)
        
        # Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        async def send_callback(message):
            try:
                await self.app.bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        
        # Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        async def typing_callback(is_typing):
            try:
                if is_typing:
                    await self.app.bot.send_chat_action(chat_id=chat_id, action="typing")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ typing: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –≤—Ä–µ–º–µ–Ω–∏
        timing_summary = self.typing_simulator.get_realistic_delays_summary(
            messages, emotional_state, energy_level
        )
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {timing_summary['total_time']}—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        await self.typing_simulator.send_messages_with_realistic_timing(
            messages=messages,
            emotional_state=emotional_state,
            energy_level=energy_level,
            send_callback=send_callback,
            typing_callback=typing_callback
        )
    
    async def deliver_message(self, message: str, message_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.allowed_users:
            self.logger.warning("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        for user_id in self.allowed_users:
            try:
                # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(message, str):
                    messages = [message]
                else:
                    messages = message
                
                await self.send_telegram_messages_with_timing(
                    chat_id=user_id,
                    messages=messages,
                    current_state=current_state
                )
                
                self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(messages)} —á–∞—Å—Ç–µ–π) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def send_initiative_messages(self, current_state: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        recent_memories = self.memory_system.get_relevant_memories("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–µ–Ω–∏–µ", 3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        memory_context = "\n".join([m.get("content", "") for m in recent_memories])
        current_state['memory_context'] = memory_context if memory_context else '–ï—â–µ –º–∞–ª–æ –∑–Ω–∞–µ—à—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.optimized_ai.generate_split_response(
                "–•–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ", 
                current_state
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if self.db_manager:
                conversation_id = self.db_manager.save_conversation(
                    user_message="",  # –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
                    ai_responses=messages,
                    mood_before=current_state.get('current_mood', '—Å–ø–æ–∫–æ–π–Ω–∞—è'),
                    mood_after=current_state.get('current_mood', '—Å–ø–æ–∫–æ–π–Ω–∞—è'),
                    message_type="initiative"
                )
                
                self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, ID={conversation_id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in self.allowed_users:
                try:
                    await self.send_telegram_messages_with_timing(
                        chat_id=user_id,
                        messages=messages,
                        current_state=current_state
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.update_emotional_state("positive_interaction", 0.5)
            self.last_message_time = datetime.now()
            self.daily_message_count += 1
            
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(messages)} —à—Ç.")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram"""
        self.logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram: {context.error}")
    
    def _get_status_emoji(self, state: Dict[str, Any]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        mood = state.get('current_mood', '')
        emotion = state.get('dominant_emotion', '')
        energy = state.get('energy_level', 50)
        
        if '–æ—Ç–ª–∏—á–Ω–æ–µ' in mood or '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–µ' in mood:
            return "üòÑ –Ø –≤ –æ—Ç–ª–∏—á–Ω–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∏ –≥–æ—Ç–æ–≤–∞ –æ–±—â–∞—Ç—å—Å—è!"
        elif '—Ö–æ—Ä–æ—à–µ–µ' in mood:
            return "üôÇ –£ –º–µ–Ω—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Ä–∞–¥–∞ –ø–æ–±–æ–ª—Ç–∞—Ç—å!"
        elif energy < 30:
            return "üò¥ –ù–µ–º–Ω–æ–≥–æ —É—Å—Ç–∞–ª–∞, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å."
        elif '–≥—Ä—É—Å—Ç–Ω' in mood or 'sad' in emotion:
            return "üòî –ù–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–Ω–æ —Å–µ–≥–æ–¥–Ω—è, –Ω–æ –æ–±—â–µ–Ω–∏–µ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."
        else:
            return "üòä –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?"
    
    def _get_mood_advice(self, mood_value: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        if mood_value >= 8:
            return "üí´ –°–µ–π—á–∞—Å –æ—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –Ω–æ–≤—ã—Ö –∏–¥–µ–π!"
        elif mood_value >= 6:
            return "üí¨ –•–æ—Ä–æ—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è."
        elif mood_value >= 4:
            return "ü§î –ú–æ–∂–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —á—ë–º-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º?"
        else:
            return "üåßÔ∏è –ù–µ–º–Ω–æ–≥–æ –≥—Ä—É—Å—Ç–Ω–æ, –Ω–æ —Ä–∞–∑–≥–æ–≤–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ."
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.app.run_polling()

