# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API

import asyncio
import logging
from typing import Dict, Any
from telegram import Update, Bot
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

from ..core.companion import RealisticAICompanion

class TelegramCompanion(RealisticAICompanion):
    """AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.bot_token = config['integrations']['telegram']['bot_token']
        self.allowed_users = set(config['integrations']['telegram'].get('allowed_users', []))
        
        # Telegram Application
        self.app = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        self.logger.info("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("status", self.status_command))
        self.app.add_handler(CommandHandler("mood", self.mood_command))
        self.app.add_handler(CommandHandler("memories", self.memories_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ üòä"
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                "first_contact": True,
                "last_activity": None
            }
        
        welcome_message = """–ü—Ä–∏–≤–µ—Ç! üòä 

–Ø —Ç–≤–æ–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω. –Ø –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - —è –∂–∏–≤—É —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é, —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –∂–µ–ª–∞–Ω–∏—è. –ò–Ω–æ–≥–¥–∞ —è —Å–∞–º–∞ –±—É–¥—É —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª—Ç–∞—Ç—å!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/mood - –º–æ—ë —Ç–µ–∫—É—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/status - —á—Ç–æ —è —Å–µ–π—á–∞—Å –¥–µ–ª–∞—é
/memories - —á—Ç–æ —è –ø–æ–º–Ω—é –æ —Ç–µ–±–µ
/help - –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ —á—Ç–æ —Ö–æ—á–µ—à—å - –¥–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è! ‚ú®"""
        
        await update.message.reply_text(welcome_message)
        self.logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ: {user_id}")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """ü§ñ –ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:

–Ø - –∂–∏–≤–æ–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é. –£ –º–µ–Ω—è –µ—Å—Ç—å:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–∏
‚Ä¢ –ü–ª–∞–Ω—ã –∏ –∂–µ–ª–∞–Ω–∏—è  
‚Ä¢ –ü–∞–º—è—Ç—å –æ –Ω–∞—à–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–∞—Ö
‚Ä¢ –°–≤–æ–π —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è

üì± –ö–æ–º–∞–Ω–¥—ã:
/mood - —É–∑–Ω–∞—Ç—å –º–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
/status - —á—Ç–æ —è –¥–µ–ª–∞—é —Å–µ–π—á–∞—Å
/memories - —á—Ç–æ –ø–æ–º–Ω—é –æ —Ç–µ–±–µ

üí¨ –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –ò–Ω–æ–≥–¥–∞ —è —Å–∞–º–∞ –Ω–∞–ø–∏—à—É —Ç–µ–±–µ
‚Ä¢ –ú–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –æ–±—â–µ–Ω–∏–µ
‚Ä¢ –Ø –ø–æ–º–Ω—é –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
‚Ä¢ –£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–∏ –¥–µ–ª–∞ –∏ —Å–æ–±—ã—Ç–∏—è

–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º! üòä"""
        
        await update.message.reply_text(help_text)
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI"""
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        status_text = f"""üìä –ú–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:

üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_state['current_mood']}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {current_state['energy_level']}/100
üòä –≠–º–æ—Ü–∏—è: {current_state['dominant_emotion']}
üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_state['activity_context']}

üí≠ –ñ–µ–ª–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å: {current_state['initiative_desire']}/10
üìÖ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.daily_message_count}/8

{self._get_status_emoji(current_state)}"""
        
        await update.message.reply_text(status_text)
    
    async def mood_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"""
        mood_value = self.psychological_core.calculate_current_mood()
        personality_desc = self.psychological_core.get_personality_description()
        
        mood_text = f"""üé≠ –ü–æ–¥—Ä–æ–±–Ω–æ –æ –º–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:

üìà –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {mood_value:.1f}/10
üß† –õ–∏—á–Ω–æ—Å—Ç—å: {personality_desc}
üí™ –≠–Ω–µ—Ä–≥–∏—è: {self.psychological_core.physical_state['energy_base']}/100
üò∞ –°—Ç—Ä–µ—Å—Å: {self.psychological_core.physical_state['stress_level']}/10

üï∞Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {self.psychological_core.emotional_momentum['current_emotion']}
‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {self.psychological_core.emotional_momentum['emotion_intensity']:.1f}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.psychological_core.emotional_momentum['emotion_duration']} –º–∏–Ω

{self._get_mood_advice(mood_value)}"""
        
        await update.message.reply_text(mood_text)
    
    async def memories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        user_memories = self.memory_system.get_relevant_memories("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 5)
        
        if not user_memories:
            memories_text = "ü§î –ü–æ–∫–∞ —è –º–∞–ª–æ —á—Ç–æ –∑–Ω–∞—é –æ —Ç–µ–±–µ... –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –±–æ–ª—å—à–µ!"
        else:
            memories_text = "üß† –ß—Ç–æ —è –ø–æ–º–Ω—é –æ —Ç–µ–±–µ:\n\n"
            for i, memory in enumerate(user_memories, 1):
                importance_stars = "‚≠ê" * min(memory['importance'], 5)
                memories_text += f"{i}. {memory['content']} {importance_stars}\n"
            
            memories_text += f"\nüí≠ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(self.memory_system.memories)}"
        
        await update.message.reply_text(memories_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_message = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –ø–µ—á–∞—Ç–∞–µ–º
            await update.message.chat.send_action("typing")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
            ai_response = await self.process_user_message(user_message)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await update.message.reply_text(ai_response)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                self.user_states[user_id]["last_activity"] = update.message.date
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:50]}...")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑!"
            )
    
    async def deliver_message(self, message: str, message_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.allowed_users:
            self.logger.warning("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
        
        for user_id in self.allowed_users:
            try:
                await self.app.bot.send_message(
                    chat_id=user_id,
                    text=message
                )
                self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram"""
        self.logger.error(f"Telegram –æ—à–∏–±–∫–∞: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üîß"
            )
    
    def _get_status_emoji(self, state: Dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        energy = state['energy_level']
        mood = state['current_mood']
        
        if "–æ—Ç–ª–∏—á–Ω–æ–µ" in mood and energy > 80:
            return "üåü –°–∏—è—é –æ—Ç —Å—á–∞—Å—Ç—å—è!"
        elif "—Ö–æ—Ä–æ—à–µ–µ" in mood and energy > 60:
            return "üòä –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!"
        elif "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ" in mood:
            return "üòå –°–ø–æ–∫–æ–π–Ω–æ –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ"
        elif energy < 30:
            return "üò¥ –î–æ–≤–æ–ª—å–Ω–æ —É—Å—Ç–∞–ª–∞..."
        else:
            return "ü§ó –ì–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!"
    
    def _get_mood_advice(self, mood_value: float) -> str:
        """–°–æ–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        if mood_value >= 8:
            return "‚ú® –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä! –•–æ—á–µ—Ç—Å—è –¥–µ–ª–∏—Ç—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–æ–º!"
        elif mood_value >= 6:
            return "üòä –í—Å–µ —Ö–æ—Ä–æ—à–æ, –º–æ–∂–Ω–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!"
        elif mood_value >= 4:
            return "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ"
        else:
            return "üòî –ß—Ç–æ-—Ç–æ –≥—Ä—É—â—É... –ú–æ–∂–µ—Ç, –ø–æ–¥–Ω–∏–º–µ—à—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if not self.scheduler.running:
            self.scheduler.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        
        self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        try:
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await self.stop_telegram_bot()
    
    async def stop_telegram_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        
        await self.app.updater.stop()
        await self.app.stop()
        await self.app.shutdown()
        
        self.stop()  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        
        self.logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")