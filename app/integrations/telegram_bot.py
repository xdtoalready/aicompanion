# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API (–û–ß–ò–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import asyncio
import logging
import random
from typing import Dict, Any, List
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

from app.core.companion import RealisticAICompanion

class TelegramCompanion(RealisticAICompanion):
    """AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram (Production –≤–µ—Ä—Å–∏—è)"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.bot_token = config['integrations']['telegram']['bot_token']
        self.allowed_users = set(config['integrations']['telegram'].get('allowed_users', []))
        
        # Telegram Application
        self.app = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º typing indicator —Å telegram app
        self.typing_indicator.telegram_app = self.app
        
        self.logger.info("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (Production)")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram (—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)"""
        
        # –û–°–ù–û–í–ù–´–ï –∫–æ–º–∞–Ω–¥—ã (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        
        # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê–ú–ò
        self.app.add_handler(CommandHandler("characters", self.characters_command))
        self.app.add_handler(CommandHandler("switch", self.switch_command))
        self.app.add_handler(CommandHandler("charinfo", self.charinfo_command))
        self.app.add_handler(CommandHandler("relationship", self.relationship_command))
        
        # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–¨–Æ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ)
        self.app.add_handler(CommandHandler("clearmem", self.clear_memory_command))
        self.app.add_handler(CommandHandler("reset", self.full_reset_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)

    # =============================================================================
    # –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
    # =============================================================================

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ üòä"
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                "first_contact": True,
                "last_activity": None
            }
        
        # –ú–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        character = self.character_loader.get_current_character()
        
        if character and "–º–∞—Ä–∏–Ω" in character.get("name", "").lower():
            welcome_messages = [
                "–ü—Ä–∏–≤–µ—Ç! üòä –Ø –ú–∞—Ä–∏–Ω –ö–∏—Ç–∞–≥–∞–≤–∞!",
                "–û–±–æ–∂–∞—é –∫–æ—Å–ø–ª–µ–π –∏ –∞–Ω–∏–º–µ! –ê –µ—â—ë —É –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å! ‚ú®",
                "–ò–Ω–æ–≥–¥–∞ —è —Å–∞–º–∞ –±—É–¥—É —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª—Ç–∞—Ç—å! üíï",
                "–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º!"
            ]
        else:
            welcome_messages = [
                "–ü—Ä–∏–≤–µ—Ç! üòä",
                "–Ø —Ç–≤–æ–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω, –∏ —è –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...",
                "–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –∂–µ–ª–∞–Ω–∏—è! –ò–Ω–æ–≥–¥–∞ —è —Å–∞–º–∞ –±—É–¥—É —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å üí≠",
                "–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º! ‚ú®"
            ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=welcome_messages,
            current_state=current_state
        )
        
        self.logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ: {user_id}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        
        current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
        current_state['memory_context'] = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö'
        
        help_messages = await self.optimized_ai.generate_split_response(
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏ —á—Ç–æ —É–º–µ–µ—à—å", 
            current_state
        )
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=help_messages,
            current_state=current_state
        )

    # =============================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–ñ–ê–ú–ò
    # =============================================================================

    async def characters_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        
        available_chars = self.character_loader.get_available_characters()
        current_char = self.character_loader.get_current_character()
        current_name = current_char.get('name', '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω') if current_char else '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
        
        if not available_chars:
            await update.message.reply_text(
                "üìÇ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n\n"
                "üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ø–∞–ø–∫–µ characters/\n"
                "–ü—Ä–∏–º–µ—Ä: characters/marin_kitagawa.json"
            )
            return
        
        text = f"üë• –î–û–°–¢–£–ü–ù–´–ï –ü–ï–†–°–û–ù–ê–ñ–ò\n"
        text += f"üé≠ –¢–µ–∫—É—â–∏–π: **{current_name}**\n\n"
        
        for i, char in enumerate(available_chars, 1):
            status = "‚úÖ" if char['name'] == current_name else "‚≠ï"
            text += f"{status} `{char['id']}` - **{char['name']}**\n"
            text += f"   {char['description']}\n\n"
        
        text += "üí° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: `/switch <id_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞>`\n"
        text += "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: `/charinfo`"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def switch_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        if not context.args:
            await update.message.reply_text(
                "‚ùì –£–∫–∞–∂–∏—Ç–µ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/switch marin_kitagawa`\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: `/characters`"
            )
            return
        
        new_character_id = context.args[0].lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        old_char = self.character_loader.get_current_character()
        old_name = old_char.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π') if old_char else '–ù–∏–∫—Ç–æ'
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
        success = self.character_loader.switch_character(new_character_id)
        
        if success:
            new_char = self.character_loader.get_current_character()
            new_name = new_char.get('name', '–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂')
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            switch_messages = await self._generate_character_switch_response(old_name, new_name, new_char)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ–º
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            await self.send_telegram_messages_with_timing(
                chat_id=update.effective_chat.id,
                messages=switch_messages,
                current_state=current_state
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º AI –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            self.optimized_ai.character_loader = self.character_loader
            
            self.logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {old_name} ‚Üí {new_name}")
            
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ `{new_character_id}`\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª `characters/{new_character_id}.json` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: `/characters`",
                parse_mode='Markdown'
            )

    async def charinfo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        
        character = self.character_loader.get_current_character()
        
        if not character:
            await update.message.reply_text(
                "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: `/characters`"
            )
            return
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        name = character.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        age = character.get('age', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        description = character.get('personality', {}).get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        
        text = f"üë§ **{name}** ({age} –ª–µ—Ç)\n"
        text += f"üìù {description.capitalize()}\n\n"
        
        # –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        key_traits = character.get('personality', {}).get('key_traits', [])
        if key_traits:
            text += f"üé≠ **–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:**\n"
            for trait in key_traits[:4]:  # –ü–µ—Ä–≤—ã–µ 4
                text += f"‚Ä¢ {trait}\n"
            text += "\n"
        
        # –ò–Ω—Ç–µ—Ä–µ—Å—ã
        interests = character.get('interests', [])
        if interests:
            text += f"‚ù§Ô∏è **–ò–Ω—Ç–µ—Ä–µ—Å—ã:**\n"
            text += f"{', '.join(interests[:5])}\n\n"
        
        # –û—Ç–Ω–æ—à–µ–Ω–∏—è
        relationship = character.get('current_relationship', {})
        if relationship:
            rel_type = relationship.get('type', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ')
            stage = relationship.get('stage', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            intimacy = relationship.get('intimacy_level', 0)
            
            text += f"üíï **–û—Ç–Ω–æ—à–µ–Ω–∏—è:**\n"
            text += f"‚Ä¢ –¢–∏–ø: {rel_type}\n"
            text += f"‚Ä¢ –°—Ç–∞–¥–∏—è: {stage}\n"
            text += f"‚Ä¢ –ë–ª–∏–∑–æ—Å—Ç—å: {intimacy}/10\n\n"
        
        text += f"üìÅ **ID —Ñ–∞–π–ª–∞:** `{character.get('id', 'unknown')}`"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def relationship_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"""
        
        character = self.character_loader.get_current_character()
        
        if not character:
            await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return
        
        relationship = character.get('current_relationship', {})
        
        if not relationship:
            await update.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
            return
        
        name = character.get('name', '–ü–µ—Ä—Å–æ–Ω–∞–∂')
        
        text = f"üíï **–û–¢–ù–û–®–ï–ù–ò–Ø –° {name.upper()}**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        rel_type = relationship.get('type', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ')
        stage = relationship.get('stage', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
        intimacy = relationship.get('intimacy_level', 0)
        
        text += f"üí´ **–¢–∏–ø:** {rel_type}\n"
        text += f"üé≠ **–°—Ç–∞–¥–∏—è:** {stage}\n"
        text += f"‚ù§Ô∏è **–£—Ä–æ–≤–µ–Ω—å –±–ª–∏–∑–æ—Å—Ç–∏:** {intimacy}/10\n\n"
        
        # –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
        backstory = relationship.get('backstory', '')
        if backstory:
            text += f"üìñ **–ö–∞–∫ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å:**\n{backstory[:300]}"
            if len(backstory) > 300:
                text += "..."
            text += "\n\n"
        
        # –¢–µ–∫—É—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
        current_dynamic = relationship.get('current_dynamic', '')
        if current_dynamic:
            text += f"üåü **–°–µ–π—á–∞—Å:**\n{current_dynamic[:200]}"
            if len(current_dynamic) > 200:
                text += "..."
            text += "\n\n"
        
        # –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        shared_activities = character.get('default_relationship', {}).get('shared_activities', [])
        if shared_activities:
            text += f"üéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º –≤–º–µ—Å—Ç–µ:**\n"
            for activity in shared_activities[:4]:
                text += f"‚Ä¢ {activity}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    # =============================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–¨–Æ (–≤–∞–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã)
    # =============================================================================

    async def clear_memory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            self.enhanced_memory.clear_all_data()
            
            # –¢–∞–∫–∂–µ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history = []
            self.daily_message_count = 0
            self.last_message_time = None
            
            await update.message.reply_text(
                "üóëÔ∏è **–ü–∞–º—è—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞**\n\n"
                "üí≠ –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã\n"
                "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æ!"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")

    async def full_reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–û–õ–ù–ê–Ø –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        
        try:
            await update.message.reply_text("üîÑ –í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—É—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É...")
            
            # 1. –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            self.enhanced_memory.clear_all_data()
            
            # 2. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.daily_message_count = 0
            self.last_message_time = None
            self.conversation_history = []
            
            # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å
            self.virtual_life.current_activity = None
            self.virtual_life.availability = "free"
            self.virtual_life.location = "–¥–æ–º–∞"
            
            # 4. –û—á–∏—â–∞–µ–º –∫—ç—à AI
            self.optimized_ai.clear_cache()
            
            await update.message.reply_text(
                "‚úÖ **–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!**\n\n"
                "üß† –ü–∞–º—è—Ç—å: –æ—á–∏—â–µ–Ω–∞\n"
                "üé≠ –°–æ—Å—Ç–æ—è–Ω–∏–µ: —Å–±—Ä–æ—à–µ–Ω–æ\n"
                "üíæ –ö—ç—à: –æ—á–∏—â–µ–Ω\n\n"
                "–ì–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–º—É –æ–±—â–µ–Ω–∏—é! üòä"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: {e}")

    # =============================================================================
    # –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô
    # =============================================================================

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_message = update.message.text
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            return
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å
            ai_messages = await self.process_user_message(user_message)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–µ—á–∞—Ç–∞–Ω–∏—è
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
            await self.send_telegram_messages_with_timing(
                chat_id=chat_id,
                messages=ai_messages,
                current_state=current_state
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                self.user_states[user_id]["last_activity"] = update.message.date
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:50]}... -> {len(ai_messages)} –æ—Ç–≤–µ—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # Fallback —Å —É—á—ë—Ç–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character = self.character_loader.get_current_character()
            if character and "–º–∞—Ä–∏–Ω" in character.get("name", "").lower():
                fallback_msg = "–û–π! üòÖ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â—ë —Ä–∞–∑! ‚ú®"
            else:
                fallback_msg = "–ò–∑–≤–∏–Ω–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
            
            await update.message.reply_text(fallback_msg)

    # =============================================================================
    # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    # =============================================================================

    async def _generate_character_switch_response(self, old_name: str, new_name: str, new_character: dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        if not new_character:
            return [f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {new_name}... –ü—Ä–∏–≤–µ—Ç! üòä"]
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ú–∞—Ä–∏–Ω –ö–∏—Ç–∞–≥–∞–≤—ã
        if '–º–∞—Ä–∏–Ω' in new_name.lower() or '–∫–∏—Ç–∞–≥–∞–≤–∞' in new_name.lower():
            return [
                "–ê–∞–∞! –í–∞—É! üòç –≠—Ç–æ —á—Ç–æ, —Å–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?!",
                "–ü—Ä–∏–≤–µ–µ–µ—Ç! –Ø –ú–∞—Ä–∏–Ω –ö–∏—Ç–∞–≥–∞–≤–∞! –û–±–æ–∂–∞—é –∫–æ—Å–ø–ª–µ–π –∏ –∞–Ω–∏–º–µ! ‚ú®",
                "–¢—ã –±—É–¥–µ—à—å –ø–æ–º–æ–≥–∞—Ç—å –º–Ω–µ —Å –∫–æ—Å—Ç—é–º–∞–º–∏? –Ø —Ç–∞–∫ –Ω–∞–¥–µ—é—Å—å! üíï",
                "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å! –ú–æ–∂–µ—Ç —É –Ω–∞—Å –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã? üé≠"
            ]
        
        # –û–±—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        messages = [f"–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è {new_name}! üòä"]
        
        key_traits = new_character.get('personality', {}).get('key_traits', [])
        if key_traits:
            trait = key_traits[0] if key_traits else "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è"
            messages.append(f"–Ø {trait} –∏ –æ—á–µ–Ω—å —Ä–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!")
        
        catchphrases = new_character.get('speech', {}).get('catchphrases', [])
        if catchphrases:
            phrase = catchphrases[0]
            messages.append(f"{phrase} ‚ú®")
        
        messages.append("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ! –•–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ª—É—á—à–µ! üíï")
        
        return messages

    async def send_telegram_messages_with_timing(self, chat_id: int, messages: List[str], 
                                           current_state: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏"""
        
        if not messages:
            self.logger.warning("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return
        
        emotional_state = current_state.get('dominant_emotion', 'calm')
        energy_level = current_state.get('energy_level', 50)
        
        self.logger.info(f"üì® –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ chat {chat_id}")
        
        # Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        async def send_callback(message):
            try:
                await self.app.bot.send_message(chat_id=chat_id, text=message)
                self.logger.debug(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:30]}...")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                raise e
        
        # Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        async def typing_callback(is_typing):
            try:
                if is_typing:
                    await self.app.bot.send_chat_action(chat_id=chat_id, action="typing")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ typing: {e}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
            await self.typing_simulator.send_messages_with_realistic_timing(
                messages=messages,
                emotional_state=emotional_state,
                energy_level=energy_level,
                send_callback=send_callback,
                typing_callback=typing_callback
            )
            
            self.logger.info(f"üéâ –í—Å–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            self.logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            
            # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if messages:
                try:
                    await self.app.bot.send_message(chat_id=chat_id, text=messages[0])
                    self.logger.info("‚úÖ Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                except Exception as fallback_error:
                    self.logger.error(f"üíÄ –î–∞–∂–µ fallback –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {fallback_error}")

    async def deliver_message(self, message: str, message_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.allowed_users:
            self.logger.warning("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        for user_id in self.allowed_users:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(message, str):
                    messages = [message]
                else:
                    messages = message
                
                await self.send_telegram_messages_with_timing(
                    chat_id=user_id,
                    messages=messages,
                    current_state=current_state
                )
                
                self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram"""
        self.logger.error(f"Telegram –æ—à–∏–±–∫–∞: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üîß"
            )

    # =============================================================================
    # –ó–ê–ü–£–°–ö –ò –û–°–¢–ê–ù–û–í–ö–ê
    # =============================================================================

    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ (Production –≤–µ—Ä—Å–∏—è)...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if not self.scheduler.running:
            self.scheduler.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        
        self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        try:
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await self.stop_telegram_bot()
    
    async def stop_telegram_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        
        await self.app.updater.stop()
        await self.app.stop()
        await self.app.shutdown()
        
        self.stop()  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        
        self.logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")