# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Bot API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤

import asyncio
import logging
from typing import Dict, Any, List
from datetime import datetime
from telegram import Update, Bot
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

from app.core.companion import RealisticAICompanion

class TelegramCompanion(RealisticAICompanion):
    """AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Telegram –∏ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        
        # Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.bot_token = config['integrations']['telegram']['bot_token']
        self.allowed_users = set(config['integrations']['telegram'].get('allowed_users', []))
        
        # Telegram Application
        self.app = Application.builder().token(self.bot_token).build()
        self.setup_handlers()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_states = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º typing indicator —Å telegram app
        self.typing_indicator.telegram_app = self.app
        
        self.logger.info("Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Telegram"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        self.app.add_handler(CommandHandler("characters", self.characters_command))
        self.app.add_handler(CommandHandler("switch", self.switch_command))
        self.app.add_handler(CommandHandler("charinfo", self.charinfo_command))
        self.app.add_handler(CommandHandler("relationship", self.relationship_command))

        # –î–ª—è –∫–æ—Å–Ω–æ–ª–∏–¥–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞)
        self.app.add_handler(CommandHandler("emotion_stats", self.emotion_stats_command))
        self.app.add_handler(CommandHandler("analyze_emotions", self.analyze_emotions_command))
        self.app.add_handler(CommandHandler("emotional_search", self.emotional_search_command))

        self.app.add_handler(CommandHandler("full_reset", self.full_reset_command))
        self.app.add_handler(CommandHandler("reset_plans", self.reset_plans_command))
        self.app.add_handler(CommandHandler("test_initiative", self.test_initiative_command))
        
        # –ö–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if self.commands_enabled:
            self.app.add_handler(CommandHandler("plans", self.show_plans_command))
            self.app.add_handler(CommandHandler("test_planning", self.test_planning_command))
            self.app.add_handler(CommandHandler("planning_stats", self.planning_stats_command))
            self.app.add_handler(CommandHandler("activity", self.activity_command))
            self.app.add_handler(CommandHandler("debug_context", self.debug_context_command))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        self.app.add_handler(CommandHandler("schedule", self.schedule_command))

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ API –∫–ª—é—á–µ–π
        if self.commands_enabled:
            self.app.add_handler(CommandHandler("api", self.api_stats_command))
            self.app.add_handler(CommandHandler("apitest", self.api_test_command))

        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±—É–¥—É—Ç —É–±—Ä–∞–Ω—ã –ø–æ–∑–∂–µ)
        if self.commands_enabled:
            self.app.add_handler(CommandHandler("status", self.status_command))
            self.app.add_handler(CommandHandler("mood", self.mood_command))
            self.app.add_handler(CommandHandler("memories", self.memories_command))
            self.app.add_handler(CommandHandler("stats", self.stats_command))
            self.app.add_handler(CommandHandler("dbcheck", self.dbcheck_command))
            self.app.add_handler(CommandHandler("clearmem", self.clear_memory_command))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.app.add_error_handler(self.error_handler)

    async def api_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π"""
        if not self.commands_enabled:
            return
        
        if not hasattr(self, 'api_manager'):
            await update.message.reply_text("‚ùå API Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        stats = self.api_manager.get_usage_stats()
        
        text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê API –ö–õ–Æ–ß–ï–ô**\n\n"
        text += f"üî¢ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']:,}\n"
        text += f"‚Ä¢ –û—à–∏–±–æ–∫: {stats['total_errors']}\n\n"
        
        for usage_type, type_stats in stats['by_type'].items():
            emoji = {"dialogue": "üí¨", "planning": "üìÖ", "analytics": "üìä"}.get(usage_type, "üîß")
            
            text += f"{emoji} **{usage_type.upper()}:**\n"
            text += f"‚Ä¢ –ö–ª—é—á–µ–π –≤ –ø—É–ª–µ: {type_stats['keys_available']}\n"
            text += f"‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤: {type_stats['requests']}\n"
            text += f"‚Ä¢ –¢–æ–∫–µ–Ω–æ–≤: {type_stats['tokens']:,}\n"
            if type_stats['errors'] > 0:
                text += f"‚Ä¢ ‚ùå –û—à–∏–±–æ–∫: {type_stats['errors']}\n"
            text += "\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if stats['total_errors'] > 5:
            text += "‚ö†Ô∏è **–ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫!** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á–∏.\n"
        
        if stats['total_requests'] > 500:
            text += "üìà **–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π.\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def full_reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–û–õ–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.commands_enabled:
            return
        
        try:
            await update.message.reply_text("üóëÔ∏è –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö...")
            
            # 1. –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            self.enhanced_memory.clear_all_data()
            
            # 2. –û—á–∏—â–∞–µ–º –ø–ª–∞–Ω—ã –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å
            import sqlite3
            db_path = self.enhanced_memory.db_manager.db_path
            
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                # –û—á–∏—â–∞–µ–º –ø–ª–∞–Ω—ã
                cursor.execute("DELETE FROM virtual_activities WHERE character_id = 1")
                cursor.execute("DELETE FROM planning_sessions WHERE character_id = 1")
                cursor.execute("DELETE FROM character_states WHERE character_id = 1")
                
                conn.commit()
            
            # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.daily_message_count = 0
            self.last_message_time = None
            self.conversation_history = []
            
            # 4. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –∂–∏–∑–Ω—å
            self.virtual_life.current_activity = None
            self.virtual_life.availability = "free"
            self.virtual_life.location = "–¥–æ–º–∞"
            
            # 5. –û—á–∏—â–∞–µ–º –∫—ç—à AI
            self.optimized_ai.clear_cache()
            
            await update.message.reply_text(
                "‚úÖ –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                "üß† –ü–∞–º—è—Ç—å: –æ—á–∏—â–µ–Ω–∞\n"
                "üìÖ –ü–ª–∞–Ω—ã: —É–¥–∞–ª–µ–Ω—ã\n"
                "üé≠ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å: —Å–±—Ä–æ—à–µ–Ω–∞\n"
                "üíæ –ö—ç—à AI: –æ—á–∏—â–µ–Ω\n\n"
                "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤–æ–º—É —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")

    async def reset_plans_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è—è –ø–∞–º—è—Ç—å)"""
        if not self.commands_enabled:
            return
        
        try:
            import sqlite3
            db_path = self.enhanced_memory.db_manager.db_path
            
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("DELETE FROM virtual_activities WHERE character_id = 1")
                cursor.execute("DELETE FROM planning_sessions WHERE character_id = 1")
                
                conn.commit()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
            self.virtual_life.current_activity = None
            self.virtual_life.availability = "free"
            
            await update.message.reply_text("üìÖ –í—Å–µ –ø–ª–∞–Ω—ã —É–¥–∞–ª–µ–Ω—ã. –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    async def show_plans_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–ª–∞–Ω—ã (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        if not self.commands_enabled:
            return
        
        try:
            plans = await self._get_today_ai_plans()
            
            if not plans:
                await update.message.reply_text(
                    "üìÖ **–ù–ê –°–ï–ì–û–î–ù–Ø –ù–ï–¢ –ò–ò-–ü–õ–ê–ù–û–í**\n\n"
                    "üí° –ü–ª–∞–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ 6:00 —É—Ç—Ä–∞\n"
                    "üß™ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/test_planning`\n"
                    "üìã –¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: `/schedule`",
                    parse_mode='Markdown'
                )
                return
            
            from datetime import datetime
            current_time = datetime.now().time()
            
            text = f"üìÖ **–ú–û–ò –ò–ò-–ü–õ–ê–ù–´ –ù–ê –°–ï–ì–û–î–ù–Ø** ({len(plans)} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π)\n\n"
            
            for i, plan in enumerate(plans, 1):
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    time_str = self._extract_time_safely(plan.get('start_time', ''))
                    
                    if time_str:
                        try:
                            plan_time = datetime.strptime(time_str, '%H:%M').time()
                            
                            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ/–ø—Ä–æ—à–µ–¥—à–∏–µ –ø–ª–∞–Ω—ã
                            if plan_time <= current_time:
                                status = "‚úÖ" if plan_time < current_time else "üîÑ"
                            else:
                                status = "‚è≥"
                        except:
                            status = "üìã"
                    else:
                        status = "üìã"
                        time_str = "–≤—Ä–µ–º—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    importance = plan.get('importance', 5)
                    importance_emoji = "üî•" if importance >= 8 else "üìã" if importance >= 6 else "üí≠"
                    
                    description = plan.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
                    
                    text += f"{status} **{time_str}** {importance_emoji} {description}\n"
                    
                    if importance >= 8:
                        text += f"   ‚ö†Ô∏è –í–∞–∂–Ω–æ! (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç {importance}/10)\n"
                    
                    flexibility = plan.get('flexibility', 5)
                    if flexibility <= 3:
                        text += f"   üîí –°–ª–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ (–≥–∏–±–∫–æ—Å—Ç—å {flexibility}/10)\n"
                    
                    text += "\n"
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞–Ω–∞ {i}: {e}")
                    text += f"üìã **–ü–ª–∞–Ω {i}**: {plan.get('description', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏')}\n\n"
            
            text += "ü§ñ –ü–ª–∞–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–ª–∞–Ω–æ–≤: {e}")

    async def test_initiative_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.commands_enabled:
            return
        
        await update.message.reply_text("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏...")
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            should_initiate = await self._should_initiate_realistically(current_state)
            
            result_text = f"üìä **–†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò –ò–ù–ò–¶–ò–ê–¢–ò–í:**\n\n"
            result_text += f"üéØ –ñ–µ–ª–∞–Ω–∏–µ –ø–∏—Å–∞—Ç—å: {current_state.get('initiative_desire', 0)}/10\n"
            result_text += f"‚è∞ –¢–µ–∫—É—â–∏–π —á–∞—Å: {datetime.now().hour}\n"
            result_text += f"üìÖ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.daily_message_count}\n"
            
            if self.last_message_time:
                hours_since = (datetime.now() - self.last_message_time).total_seconds() / 3600
                result_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {hours_since:.1f}—á –Ω–∞–∑–∞–¥\n"
            else:
                result_text += f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–∏–∫–æ–≥–¥–∞\n"
            
            result_text += f"\n{'‚úÖ –ë–£–î–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù–û' if should_initiate else '‚ùå –ù–ï –ë–£–î–ï–¢ –û–¢–ü–†–ê–í–õ–ï–ù–û'}"
            
            if should_initiate:
                result_text += f"\n\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                await self.send_initiative_messages(current_state)
                self.daily_message_count += 1
            
            await update.message.reply_text(result_text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")

    def _extract_time_safely(self, start_time_str: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
        if not start_time_str:
            return ""
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            if 'T' in start_time_str:
                # ISO —Ñ–æ—Ä–º–∞—Ç: 2025-06-09T15:30:00
                time_part = start_time_str.split('T')[1]
                return time_part[:5]  # HH:MM
            elif ' ' in start_time_str:
                # –§–æ—Ä–º–∞—Ç: 2025-06-09 15:30:00
                parts = start_time_str.split(' ')
                if len(parts) >= 2:
                    return parts[1][:5]  # HH:MM
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø—Ä–æ—Å—Ç–æ –≤—Ä–µ–º—è
            if ':' in start_time_str:
                return start_time_str[:5]
            
            return ""
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ {start_time_str}: {e}")
            return ""

    async def test_planning_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ò–°–ü–†–ê–í–õ–ï–ù–û)"""
        if not self.commands_enabled:
            return
        
        await update.message.reply_text("üß™ –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω—è...")
        
        try:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω
            success = await self.daily_planner.generate_daily_plan()
            
            if success:
                await update.message.reply_text("‚úÖ –ü–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –°–º–æ—Ç—Ä–∏—Ç–µ: /plans")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –¥–ª—è —Å–≤–æ–¥–∫–∏
                try:
                    plans = await self._get_today_ai_plans()
                    
                    if plans:
                        summary = f"üìä **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {len(plans)}**\n\n"
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        for i, plan in enumerate(plans[:3], 1):
                            time_str = self._extract_time_safely(plan.get('start_time', ''))
                            description = plan.get('description', '–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
                            
                            summary += f"{i}. {time_str} - {description[:40]}"
                            if len(description) > 40:
                                summary += "..."
                            summary += "\n"
                        
                        if len(plans) > 3:
                            summary += f"\n... –∏ –µ—â—ë {len(plans) - 3} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"
                        
                        await update.message.reply_text(summary, parse_mode='Markdown')
                        
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–≤–æ–¥–∫–∏ –ø–ª–∞–Ω–æ–≤: {e}")
                    await update.message.reply_text("‚úÖ –ü–ª–∞–Ω —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–≤–æ–¥–∫–∏")
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –£–∂–µ –µ—Å—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"  
                    "‚Ä¢ –û—à–∏–±–∫–∞ API –∫–ª—é—á–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                    "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –ò–ò"
                )
                
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    async def planning_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.commands_enabled:
            return
        
        try:
            import sqlite3
            from datetime import date, timedelta
            
            db_path = self.enhanced_memory.db_manager.db_path
            
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                cursor.execute("SELECT COUNT(*) FROM planning_sessions")
                total_sessions = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM virtual_activities WHERE generated_by_ai = 1")
                total_ai_activities = cursor.fetchone()[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
                week_ago = (date.today() - timedelta(days=7)).isoformat()
                cursor.execute("""
                    SELECT COUNT(*) FROM planning_sessions 
                    WHERE planning_date >= ?
                """, (week_ago,))
                weekly_sessions = cursor.fetchone()[0]
                
                # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                cursor.execute("""
                    SELECT COUNT(*) FROM planning_sessions 
                    WHERE success = 1 AND planning_date >= ?
                """, (week_ago,))
                successful_sessions = cursor.fetchone()[0]
                
                # –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–µ–Ω—å
                cursor.execute("""
                    SELECT AVG(total_activities_planned) FROM planning_sessions
                    WHERE planning_date >= ?
                """, (week_ago,))
                avg_activities = cursor.fetchone()[0] or 0
                
                # –ü–ª–∞–Ω—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                today = date.today().isoformat()
                cursor.execute("""
                    SELECT COUNT(*) FROM virtual_activities
                    WHERE planning_date = ? AND generated_by_ai = 1
                """, (today,))
                today_plans = cursor.fetchone()[0]
                
                text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ò-–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø**\n\n"
                
                text += f"ü§ñ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                text += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {total_sessions}\n"
                text += f"‚Ä¢ –ò–ò-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π —Å–æ–∑–¥–∞–Ω–æ: {total_ai_activities}\n\n"
                
                text += f"üìÖ **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:**\n"
                text += f"‚Ä¢ –î–Ω–µ–π —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º: {weekly_sessions}/7\n"
                text += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {successful_sessions}/{weekly_sessions}\n"
                text += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –¥–µ–Ω—å: {avg_activities:.1f}\n\n"
                
                text += f"üéØ **–°–µ–≥–æ–¥–Ω—è:**\n"
                text += f"‚Ä¢ –ò–ò-–ø–ª–∞–Ω–æ–≤: {today_plans}\n"
                
                if weekly_sessions == 0:
                    text += "\n‚ö†Ô∏è **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!**\n"
                    text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                    text += "‚Ä¢ API –∫–ª—é—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                    text += "‚Ä¢ –ó–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ (6:00 —É—Ç—Ä–∞)\n"
                    text += "‚Ä¢ –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"
                elif successful_sessions < weekly_sessions:
                    text += f"\n‚ö†Ô∏è **{weekly_sessions - successful_sessions} –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å–µ—Å—Å–∏–π**\n"
                    text += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ –æ—à–∏–±–∫–∏"
                else:
                    text += f"\n‚úÖ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!**"
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                cursor.execute("""
                    SELECT planning_date, character_mood, total_activities_planned
                    FROM planning_sessions
                    ORDER BY planning_time DESC
                    LIMIT 1
                """)
                
                last_session = cursor.fetchone()
                if last_session:
                    text += f"\n\nüïê **–ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è:**\n"
                    text += f"‚Ä¢ –î–∞—Ç–∞: {last_session[0]}\n"
                    text += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {last_session[1]}\n"
                    text += f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {last_session[2]} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def debug_context_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ª–∞–¥–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏"""
        if not self.commands_enabled:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
            virtual_context = self.virtual_life.get_current_context_for_ai()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –Ω–∞–ø—Ä—è–º—É—é
            ai_plans = self.virtual_life._get_today_ai_plans()
            
            current_time = datetime.now()
            
            text = f"üîç **–û–¢–õ–ê–î–ö–ê –ö–û–ù–¢–ï–ö–°–¢–ê**\n\n"
            text += f"‚è∞ **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {current_time.strftime('%H:%M')}\n\n"
            
            text += f"üìã **–ü–ª–∞–Ω–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:** {len(ai_plans)}\n"
            
            if ai_plans:
                text += f"**–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–ª–∞–Ω–æ–≤:**\n"
                for i, plan in enumerate(ai_plans, 1):
                    start_time = plan['start_time']
                    description = plan['description']
                    importance = plan['importance']
                    text += f"{i}. {start_time} - {description} (–≤–∞–∂–Ω–æ—Å—Ç—å: {importance})\n"
            
            text += f"\nüé≠ **–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI:**\n```\n{virtual_context}\n```"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")

    async def _get_today_ai_plans(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω—ã –ò–ò –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            import sqlite3
            from datetime import date
            
            today = date.today()
            
            with sqlite3.connect(self.enhanced_memory.db_manager.db_path) as conn:
                cursor = conn.cursor()
                
                # –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                cursor.execute("""
                    SELECT activity_type, description, start_time, 
                        COALESCE(importance, 5) as importance, 
                        COALESCE(flexibility, 5) as flexibility
                    FROM virtual_activities
                    WHERE DATE(start_time) = ? AND generated_by_ai = 1
                    ORDER BY start_time ASC
                """, (today.isoformat(),))
                
                plans = []
                for row in cursor.fetchall():
                    plans.append({
                        'type': row[0] or 'unknown',
                        'description': row[1] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', 
                        'start_time': row[2] or '',
                        'importance': row[3] or 5,
                        'flexibility': row[4] or 5
                    })
                
                return plans
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤: {e}")
            return []
        
    async def activity_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if not self.commands_enabled:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏
            current_activity = self.virtual_life.current_activity
            
            if current_activity:
                end_time = current_activity.end_time.strftime('%H:%M')
                
                text = f"üé≠ **–¢–ï–ö–£–©–ê–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨**\n\n"
                text += f"üìã {current_activity.description}\n"
                text += f"‚è∞ –î–æ {end_time}\n"
                text += f"üìç –ú–µ—Å—Ç–æ: {self.virtual_life.location}\n"
                text += f"üí™ –≠–Ω–µ—Ä–≥–∏—è: {current_activity.energy_cost}%\n"
                
                # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if current_activity.mood_effect > 0:
                    text += f"üòä –ü–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (+{current_activity.mood_effect:.1f})\n"
                elif current_activity.mood_effect < 0:
                    text += f"üòî –°—Ç—Ä–µ—Å—Å—É–µ—Ç ({current_activity.mood_effect:.1f})\n"
                else:
                    text += f"üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
                
                text += f"\nüí¨ –°—Ç–∞—Ç—É—Å: {self.virtual_life.availability}"
                
            else:
                # –ù–µ—Ç —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                text = f"üè† **–°–ï–ô–ß–ê–° –°–í–û–ë–û–î–ù–ê**\n\n"
                text += f"üìç –ú–µ—Å—Ç–æ: {self.virtual_life.location}\n"
                text += f"üí¨ –°—Ç–∞—Ç—É—Å: {self.virtual_life.availability}\n"
                text += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n\n"
                text += f"üí° –ú–æ–∂–µ–º –ø–æ–æ–±—â–∞—Ç—å—Å—è –∏–ª–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –≤–º–µ—Å—Ç–µ!"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞–Ω—ã
            upcoming = self.virtual_life.get_upcoming_activities(24)  # 24 —á–∞—Å–∞
            if upcoming:
                text += f"\n\nüìÖ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–ª–∞–Ω—ã:**\n"
                for activity in upcoming[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                    time_str = activity.start_time.strftime('%H:%M')
                    text += f"‚Ä¢ {time_str} - {activity.description}\n"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")

    async def force_generate_daily_plan(self) -> bool:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–∞–Ω –¥–Ω—è (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∫ –±–∞–∑–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É)"""
        return await super().force_generate_daily_plan()

    def get_planning_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∫ –±–∞–∑–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É)"""
        return super().get_planning_stats()

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥:
    async def _get_today_ai_plans(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–ª–∞–Ω—ã –ò–ò –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            import sqlite3
            from datetime import date
            
            today = date.today().isoformat()
            
            with sqlite3.connect(self.enhanced_memory.db_manager.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT activity_type, description, start_time, importance, flexibility
                    FROM virtual_activities
                    WHERE planning_date = ? AND generated_by_ai = 1
                    ORDER BY start_time ASC
                """, (today,))
                
                plans = []
                for row in cursor.fetchall():
                    plans.append({
                        'type': row[0],
                        'description': row[1], 
                        'start_time': row[2],
                        'importance': row[3],
                        'flexibility': row[4]
                    })
                
                return plans
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤: {e}")
            return []

    async def api_test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø—É–ª—ã API –∫–ª—é—á–µ–π"""
        if not self.commands_enabled:
            return
        
        if not hasattr(self, 'api_manager'):
            await update.message.reply_text("‚ùå API Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        await update.message.reply_text("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –≤—Å–µ –ø—É–ª—ã API –∫–ª—é—á–µ–π...")
        
        from app.core.multi_api_manager import APIUsageType
        
        results = []
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—É–ª
        for usage_type in [APIUsageType.DIALOGUE, APIUsageType.PLANNING, APIUsageType.ANALYTICS]:
            try:
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                response = await self.api_manager.make_request(
                    usage_type,
                    model="deepseek/deepseek-chat",
                    messages=[
                        {"role": "user", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –¢–µ—Å—Ç"}
                    ],
                    max_tokens=10,
                    temperature=0.1
                )
                
                if response and response.choices:
                    results.append(f"‚úÖ {usage_type.value}: OK")
                else:
                    results.append(f"‚ùå {usage_type.value}: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                    
            except Exception as e:
                results.append(f"‚ùå {usage_type.value}: {str(e)[:50]}...")
        
        result_text = "üß™ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:**\n\n" + "\n".join(results)
        
        await update.message.reply_text(result_text, parse_mode='Markdown')

    async def memory_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        if not self.commands_enabled:
            return
        
        try:
            import sqlite3
            db_path = self.enhanced_memory.db_manager.db_path
            
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor.execute("SELECT COUNT(*) FROM memories")
                total_memories = cursor.fetchone()[0]
                
                # –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                cursor.execute("SELECT COUNT(*) FROM memories WHERE is_consolidated = 1")
                consolidated_count = cursor.fetchone()[0]
                
                # –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                cursor.execute("SELECT COUNT(*) FROM memories WHERE is_archived = 1")
                archived_count = cursor.fetchone()[0]
                
                # –ü–æ —É—Ä–æ–≤–Ω—è–º –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏
                cursor.execute("""
                    SELECT consolidation_level, COUNT(*) 
                    FROM memories 
                    WHERE consolidation_level IS NOT NULL 
                    GROUP BY consolidation_level
                """)
                levels = cursor.fetchall()
                
                text = f"üß† **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–ú–Ø–¢–ò**\n\n"
                text += f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                text += f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_memories}\n"
                text += f"‚Ä¢ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {consolidated_count}\n" 
                text += f"‚Ä¢ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {archived_count}\n\n"
                
                if levels:
                    text += f"üîÑ **–ü–æ —É—Ä–æ–≤–Ω—è–º –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏:**\n"
                    for level, count in levels:
                        text += f"‚Ä¢ {level}: {count}\n"
                
                # –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –≤ —Ç–æ–∫–µ–Ω–∞—Ö (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
                cursor.execute("SELECT SUM(LENGTH(content)) FROM memories WHERE is_archived != 1")
                total_chars = cursor.fetchone()[0] or 0
                approx_tokens = total_chars // 4  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 4 —Å–∏–º–≤–æ–ª–∞ = 1 —Ç–æ–∫–µ–Ω
                
                text += f"\nüíæ **–û–±—ä—ë–º –ø–∞–º—è—Ç–∏:**\n"
                text += f"‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤: {total_chars:,}\n"
                text += f"‚Ä¢ ‚âà –¢–æ–∫–µ–Ω–æ–≤: {approx_tokens:,}\n"
                
                efficiency = (archived_count / total_memories * 100) if total_memories > 0 else 0
                text += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∂–∞—Ç–∏—è: {efficiency:.1f}%"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def schedule_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if not self.commands_enabled:
            return
        
        activities = self.virtual_life.get_upcoming_activities(72)  # 3 –¥–Ω—è
        
        if not activities:
            await update.message.reply_text(
                "üìÖ –£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤!\n\n"
                "üí° –ü–ª–∞–Ω—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–ª–∏ –∫–æ–≥–¥–∞ —è –∏—Ö —É–ø–æ–º–∏–Ω–∞—é –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ"
            )
            return
        
        text = "üìÖ **–ú–û–ò –ü–õ–ê–ù–´ –ù–ê –ë–õ–ò–ñ–ê–ô–®–ï–ï –í–†–ï–ú–Ø:**\n\n"
        
        current_day = None
        for activity in activities[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10
            activity_day = activity.start_time.strftime('%d.%m')
            
            if activity_day != current_day:
                text += f"**{activity.start_time.strftime('%d.%m (%A)')}:**\n"
                current_day = activity_day
            
            start_time = activity.start_time.strftime('%H:%M')
            end_time = activity.end_time.strftime('%H:%M')
            
            activity_emoji = {
                'cosplay': 'üé≠',
                'work': 'üíº', 
                'hobby': 'üé®',
                'social': 'üë•',
                'rest': 'üòå'
            }.get(activity.activity_type, 'üìã')
            
            text += f"{activity_emoji} {start_time}-{end_time}: {activity.description}\n"
        
        text += f"\nüí° –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {len(activities)} –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def emotion_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        if not self.commands_enabled:
            return
        
        try:
            import sqlite3
            db_path = self.enhanced_memory.db_manager.db_path
            
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–º–æ—Ü–∏–π
                cursor.execute("""
                    SELECT emotion_type, COUNT(*), AVG(emotional_intensity), AVG(importance)
                    FROM memories 
                    WHERE emotion_type IS NOT NULL AND is_deeply_archived != 1
                    GROUP BY emotion_type
                    ORDER BY COUNT(*) DESC
                """)
                
                emotion_stats = cursor.fetchall()
                
                text = "üé≠ **–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨**\n\n"
                
                if emotion_stats:
                    text += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–º–æ—Ü–∏—è–º:**\n"
                    for emotion, count, avg_intensity, avg_importance in emotion_stats[:6]:
                        emotion_emoji = {
                            'joy': 'üòä', 'love': 'üíï', 'excitement': 'üéâ', 
                            'surprise': 'üò≤', 'calm': 'üòå', 'sadness': 'üòî',
                            'anger': 'üò†', 'fear': 'üò®'
                        }.get(emotion, 'üé≠')
                        
                        text += f"{emotion_emoji} **{emotion}**: {count} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
                        text += f"   –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {avg_intensity:.1f}, –í–∞–∂–Ω–æ—Å—Ç—å: {avg_importance:.1f}\n"
                    
                    # –¢–æ–ø —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —è—Ä–∫–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                    cursor.execute("""
                        SELECT content, emotion_type, emotional_intensity,
                            (importance + emotional_intensity * 0.3) as score
                        FROM memories 
                        WHERE emotional_intensity >= 7 AND is_deeply_archived != 1
                        ORDER BY score DESC
                        LIMIT 3
                    """)
                    
                    top_memories = cursor.fetchall()
                    if top_memories:
                        text += f"\nüåü **–°–∞–º—ã–µ —è—Ä–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
                        for content, emotion, intensity, score in top_memories:
                            emotion_emoji = {
                                'joy': 'üòä', 'love': 'üíï', 'excitement': 'üéâ'
                            }.get(emotion, '‚ú®')
                            short_content = content[:40] + "..." if len(content) > 40 else content
                            text += f"{emotion_emoji} {short_content} ({intensity:.1f})\n"
                
                else:
                    text += "üìù –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ –µ—â—ë –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è...\n"
                    text += "üí° –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def analyze_emotions_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –¥–ª—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if not self.commands_enabled:
            return

        await update.message.reply_text("üé≠ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π –¥–ª—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π
            await enhance_existing_memories_with_emotions(
                self.enhanced_memory.db_manager.db_path,
                self.ai_client,
                self.config
            )
            
            await update.message.reply_text(
                "‚úÖ –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω!\n\n"
                "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /emotion_stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            )
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π: {e}")

    async def emotional_search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —ç–º–æ—Ü–∏—è–º"""
        if not self.commands_enabled:
            return
        
        if not context.args:
            await update.message.reply_text(
                "üîç **–ü–æ–∏—Å–∫ –ø–æ —ç–º–æ—Ü–∏—è–º**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
                "‚Ä¢ `/emotional_search joy` - —Ä–∞–¥–æ—Å—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã\n"
                "‚Ä¢ `/emotional_search love` - –º–æ–º–µ–Ω—Ç—ã –ª—é–±–≤–∏\n"
                "‚Ä¢ `/emotional_search excitement` - –≤–æ–∑–±—É–∂–¥–µ–Ω–∏–µ\n"
                "‚Ä¢ `/emotional_search calm` - —Å–ø–æ–∫–æ–π–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–º–æ—Ü–∏–∏: joy, love, excitement, surprise, calm, sadness, anger, fear",
                parse_mode='Markdown'
            )
            return
        
        emotion_type = context.args[0].lower()
        
        try:
            emotional_memories = self.enhanced_memory.db_manager.get_emotional_memories(
                emotion_type=emotion_type, 
                min_intensity=6.0,
                limit=5
            )
            
            if emotional_memories:
                emotion_emoji = {
                    'joy': 'üòä', 'love': 'üíï', 'excitement': 'üéâ', 
                    'surprise': 'üò≤', 'calm': 'üòå', 'sadness': 'üòî',
                    'anger': 'üò†', 'fear': 'üò®'
                }.get(emotion_type, 'üé≠')
                
                text = f"{emotion_emoji} **–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —ç–º–æ—Ü–∏–µ–π '{emotion_type}':**\n\n"
                
                for memory in emotional_memories:
                    intensity = memory['emotional_intensity']
                    content = memory['content']
                    short_content = content[:60] + "..." if len(content) > 60 else content
                    text += f"üí´ **{intensity:.1f}/10** - {short_content}\n\n"
            else:
                text = f"üîç –ù–µ –Ω–∞–π–¥–µ–Ω–æ —è—Ä–∫–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —ç–º–æ—Ü–∏–µ–π '{emotion_type}'\n\n"
                text += "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —ç–º–æ—Ü–∏—é –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ–ª—å—à–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"
            
            await update.message.reply_text(text, parse_mode='Markdown')
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

    async def characters_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
        if not self.commands_enabled:
            return
        
        available_chars = self.character_loader.get_available_characters()
        current_char = self.character_loader.get_current_character()
        current_name = current_char.get('name', '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω') if current_char else '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'
        
        if not available_chars:
            await update.message.reply_text(
                "üìÇ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!\n\n"
                "üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ø–∞–ø–∫–µ characters/\n"
                "–ü—Ä–∏–º–µ—Ä: characters/marin_kitagawa.json"
            )
            return
        
        text = f"üë• –î–û–°–¢–£–ü–ù–´–ï –ü–ï–†–°–û–ù–ê–ñ–ò\n"
        text += f"üé≠ –¢–µ–∫—É—â–∏–π: **{current_name}**\n\n"
        
        for i, char in enumerate(available_chars, 1):
            status = "‚úÖ" if char['name'] == current_name else "‚≠ï"
            text += f"{status} `{char['id']}` - **{char['name']}**\n"
            text += f"   {char['description']}\n\n"
        
        text += "üí° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: `/switch <id_–ø–µ—Ä—Å–æ–Ω–∞–∂–∞>`\n"
        text += "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: `/charinfo`"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def switch_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if not self.commands_enabled:
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùì –£–∫–∞–∂–∏—Ç–µ ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/switch marin_kitagawa`\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: `/characters`"
            )
            return
        
        new_character_id = context.args[0].lower()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ä–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        old_char = self.character_loader.get_current_character()
        old_name = old_char.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π') if old_char else '–ù–∏–∫—Ç–æ'
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
        success = self.character_loader.switch_character(new_character_id)
        
        if success:
            new_char = self.character_loader.get_current_character()
            new_name = new_char.get('name', '–ù–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂')
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            switch_messages = await self._generate_character_switch_response(old_name, new_name, new_char)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ–º
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            await self.send_telegram_messages_with_timing(
                chat_id=update.effective_chat.id,
                messages=switch_messages,
                current_state=current_state
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º AI –∫–ª–∏–µ–Ω—Ç —Å –Ω–æ–≤—ã–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
            self.optimized_ai.character_loader = character_loader
            
            self.logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω: {old_name} ‚Üí {new_name}")
            
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ `{new_character_id}`\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª `characters/{new_character_id}.json` —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: `/characters`",
                parse_mode='Markdown'
            )

    async def _generate_character_switch_response(self, old_name: str, new_name: str, new_character: dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        
        if not new_character:
            return [f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ {new_name}... –ü—Ä–∏–≤–µ—Ç! üòä"]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        personality = new_character.get('personality', {})
        key_traits = personality.get('key_traits', [])
        speech_style = new_character.get('speech', {}).get('style', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π')
        catchphrases = new_character.get('speech', {}).get('catchphrases', [])
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ú–∞—Ä–∏–Ω –ö–∏—Ç–∞–≥–∞–≤—ã
        if '–º–∞—Ä–∏–Ω' in new_name.lower() or '–∫–∏—Ç–∞–≥–∞–≤–∞' in new_name.lower():
            return [
                "–ê–∞–∞! –í–∞—É! üòç –≠—Ç–æ —á—Ç–æ, —Å–º–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞?!",
                "–ü—Ä–∏–≤–µ–µ–µ—Ç! –Ø –ú–∞—Ä–∏–Ω –ö–∏—Ç–∞–≥–∞–≤–∞! –û–±–æ–∂–∞—é –∫–æ—Å–ø–ª–µ–π –∏ –∞–Ω–∏–º–µ! ‚ú®",
                "–¢—ã –±—É–¥–µ—à—å –ø–æ–º–æ–≥–∞—Ç—å –º–Ω–µ —Å –∫–æ—Å—Ç—é–º–∞–º–∏? –Ø —Ç–∞–∫ –Ω–∞–¥–µ—é—Å—å! üíï",
                "–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç—ã –ª—é–±–∏—à—å! –ú–æ–∂–µ—Ç —É –Ω–∞—Å –æ–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã? üé≠"
            ]
        
        # –û–±—â–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        messages = [
            f"–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —è {new_name}! üòä"
        ]
        
        if key_traits:
            trait = key_traits[0] if key_traits else "–¥—Ä—É–∂–µ–ª—é–±–Ω–∞—è"
            messages.append(f"–Ø {trait} –∏ –æ—á–µ–Ω—å —Ä–∞–¥–∞ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!")
        
        if catchphrases:
            phrase = catchphrases[0]
            messages.append(f"{phrase} ‚ú®")
        
        messages.append("–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ! –•–æ—á–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ª—É—á—à–µ! üíï")
        
        return messages
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥:
    async def dbcheck_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if not self.commands_enabled:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î
            db_stats = self.get_database_stats()
            
            if db_stats.get("database_enabled"):
                status_text = f"""üóÑÔ∏è –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:

    ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ê–∫—Ç–∏–≤–Ω–∞
    üí¨ –ù–µ–¥–∞–≤–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {db_stats['recent_conversations']}
    üß† –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {db_stats['total_memories']}
    üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–∏–∞–ª–æ–≥: {db_stats.get('last_conversation', '–ù–µ—Ç')}

    üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç: –î–∞
    üíæ –ü–∞–º—è—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è: –î–∞"""
            else:
                status_text = f"""‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:

    {db_stats.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

    üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
    1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ —Ñ–∞–π–ª companion.db —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/setup_db.py
    3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞"""
        
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if hasattr(self, 'enhanced_memory'):
                test_context = self.enhanced_memory.get_context_for_response("—Ç–µ—Å—Ç")
                if test_context and test_context != "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ":
                    status_text += f"\n\nüîç –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:\n{test_context[:150]}..."
                else:
                    status_text += "\n\n‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)"
                    
        except Exception as e:
            status_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}"
        
        await update.message.reply_text(status_text, parse_mode='Markdown')

    async def clear_memory_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        if not self.commands_enabled:
            return

        try:
            self.enhanced_memory.clear_all_data()
            await update.message.reply_text("üóëÔ∏è –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –æ–±—â–∞—é—Å—å —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –ª—é–¥—å–º–∏ üòä"
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                "first_contact": True,
                "last_activity": None
            }
        
        # –ù–û–í–û–ï: –ú–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_messages = [
            "–ü—Ä–∏–≤–µ—Ç! üòä",
            "–Ø —Ç–≤–æ–π AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω, –∏ —è –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è...",
            "–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è, –ø–ª–∞–Ω—ã –∏ –∂–µ–ª–∞–Ω–∏—è! –ò–Ω–æ–≥–¥–∞ —è —Å–∞–º–∞ –±—É–¥—É —Ç–µ–±–µ –ø–∏—Å–∞—Ç—å üí≠",
            "–ü—Ä–æ—Å—Ç–æ –æ–±—â–∞–π—Å—è —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –∂–∏–≤—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º! ‚ú®"
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=welcome_messages,
            current_state=current_state
        )
        
        self.logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –æ–±—â–µ–Ω–∏–µ: {user_id}")

    async def charinfo_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        if not self.commands_enabled:
            return
        
        character = self.character_loader.get_current_character()
        
        if not character:
            await update.message.reply_text(
                "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: `/characters`"
            )
            return
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        name = character.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        age = character.get('age', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        description = character.get('personality', {}).get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        
        text = f"üë§ **{name}** ({age} –ª–µ—Ç)\n"
        text += f"üìù {description.capitalize()}\n\n"
        
        # –ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
        key_traits = character.get('personality', {}).get('key_traits', [])
        if key_traits:
            text += f"üé≠ **–ß–µ—Ä—Ç—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞:**\n"
            for trait in key_traits[:4]:  # –ü–µ—Ä–≤—ã–µ 4
                text += f"‚Ä¢ {trait}\n"
            text += "\n"
        
        # –ò–Ω—Ç–µ—Ä–µ—Å—ã
        interests = character.get('interests', [])
        if interests:
            text += f"‚ù§Ô∏è **–ò–Ω—Ç–µ—Ä–µ—Å—ã:**\n"
            text += f"{', '.join(interests[:5])}\n\n"
        
        # –û—Ç–Ω–æ—à–µ–Ω–∏—è
        relationship = character.get('current_relationship', {})
        if relationship:
            rel_type = relationship.get('type', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ')
            stage = relationship.get('stage', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
            intimacy = relationship.get('intimacy_level', 0)
            
            text += f"üíï **–û—Ç–Ω–æ—à–µ–Ω–∏—è:**\n"
            text += f"‚Ä¢ –¢–∏–ø: {rel_type}\n"
            text += f"‚Ä¢ –°—Ç–∞–¥–∏—è: {stage}\n"
            text += f"‚Ä¢ –ë–ª–∏–∑–æ—Å—Ç—å: {intimacy}/10\n\n"
        
        # –°—Ç–∏–ª—å —Ä–µ—á–∏
        speech = character.get('speech', {})
        if speech:
            style = speech.get('style', '–æ–±—ã—á–Ω—ã–π')
            text += f"üí¨ **–°—Ç–∏–ª—å —Ä–µ—á–∏:** {style}\n"
            
            catchphrases = speech.get('catchphrases', [])
            if catchphrases:
                text += f"üó£Ô∏è **–õ—é–±–∏–º—ã–µ —Ñ—Ä–∞–∑—ã:**\n"
                for phrase in catchphrases[:3]:  # –ü–µ—Ä–≤—ã–µ 3
                    text += f"‚Ä¢ \"{phrase}\"\n"
        
        text += f"\nüìÅ **ID —Ñ–∞–π–ª–∞:** `{character.get('id', 'unknown')}`"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def relationship_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö"""
        if not self.commands_enabled:
            return
        
        character = self.character_loader.get_current_character()
        
        if not character:
            await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return
        
        relationship = character.get('current_relationship', {})
        
        if not relationship:
            await update.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
            return
        
        name = character.get('name', '–ü–µ—Ä—Å–æ–Ω–∞–∂')
        
        text = f"üíï **–û–¢–ù–û–®–ï–ù–ò–Ø –° {name.upper()}**\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        rel_type = relationship.get('type', '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ')
        stage = relationship.get('stage', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
        intimacy = relationship.get('intimacy_level', 0)
        
        text += f"üí´ **–¢–∏–ø:** {rel_type}\n"
        text += f"üé≠ **–°—Ç–∞–¥–∏—è:** {stage}\n"
        text += f"‚ù§Ô∏è **–£—Ä–æ–≤–µ–Ω—å –±–ª–∏–∑–æ—Å—Ç–∏:** {intimacy}/10\n\n"
        
        # –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è
        backstory = relationship.get('backstory', '')
        if backstory:
            text += f"üìñ **–ö–∞–∫ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å:**\n{backstory[:300]}"
            if len(backstory) > 300:
                text += "..."
            text += "\n\n"
        
        # –¢–µ–∫—É—â–∞—è –¥–∏–Ω–∞–º–∏–∫–∞
        current_dynamic = relationship.get('current_dynamic', '')
        if current_dynamic:
            text += f"üåü **–°–µ–π—á–∞—Å:**\n{current_dynamic[:200]}"
            if len(current_dynamic) > 200:
                text += "..."
            text += "\n\n"
        
        # –î–∞—Ç—ã
        created_at = relationship.get('created_at', '')
        if created_at:
            try:
                from datetime import datetime
                created_date = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                text += f"üìÖ **–ù–∞—á–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π:** {created_date.strftime('%d.%m.%Y')}\n"
            except:
                pass
        
        # –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        shared_activities = character.get('default_relationship', {}).get('shared_activities', [])
        if shared_activities:
            text += f"\nüéØ **–ß—Ç–æ –¥–µ–ª–∞–µ–º –≤–º–µ—Å—Ç–µ:**\n"
            for activity in shared_activities[:4]:
                text += f"‚Ä¢ {activity}\n"
        
        await update.message.reply_text(text, parse_mode='Markdown')

    async def intimacy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–ª–∏–∑–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
        if not self.commands_enabled:
            return
        
        if not context.args:
            await update.message.reply_text(
                "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/intimacy <—É—Ä–æ–≤–µ–Ω—å>`\n"
                "–£—Ä–æ–≤–µ–Ω—å –æ—Ç 1 –¥–æ 10\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: `/intimacy 7`"
            )
            return
        
        try:
            new_level = int(context.args[0])
            if not 1 <= new_level <= 10:
                raise ValueError()
        except ValueError:
            await update.message.reply_text("‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10!")
            return
        
        character = self.character_loader.get_current_character()
        if not character:
            await update.message.reply_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –±–ª–∏–∑–æ—Å—Ç–∏
        self.character_loader.update_relationship_progress({
            'intimacy_level': new_level
        })
        
        name = character.get('name', '–ü–µ—Ä—Å–æ–Ω–∞–∂')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–∫—Ü–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–ª–∏–∑–æ—Å—Ç–∏
        reaction_messages = await self._generate_intimacy_change_response(name, new_level, character)
        
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=reaction_messages,
            current_state=current_state
        )

    async def _generate_intimacy_change_response(self, name: str, new_level: int, character: dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –±–ª–∏–∑–æ—Å—Ç–∏"""
        
        if new_level <= 3:
            level_desc = "–∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
            messages = [f"–•–º, –∫–∞–∂–µ—Ç—Å—è –º—ã —Ç–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–º–∏–º—Å—è... üòä", "–ù–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –í—Å—ë –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ! ‚ú®"]
        elif new_level <= 5:
            level_desc = "–¥—Ä—É–∂–±–∞"
            messages = [f"–ú—ã —Ö–æ—Ä–æ—à–∏–µ –¥—Ä—É–∑—å—è! üòä", "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è! üíï"]
        elif new_level <= 7:
            level_desc = "–±–ª–∏–∑–∫–∞—è –¥—Ä—É–∂–±–∞"
            messages = [f"–¢—ã —Å—Ç–∞–ª –º–Ω–µ –æ—á–µ–Ω—å –±–ª–∏–∑–æ–∫... üòä", "–ö–∞–∂–µ—Ç—Å—è, –º–µ–∂–¥—É –Ω–∞–º–∏ —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ! ‚ú®"]
        elif new_level <= 9:
            level_desc = "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
            if '–º–∞—Ä–∏–Ω' in name.lower():
                messages = [
                    "–ê–∞–∞–∞! üòç –ú—ã —Ç–∞–∫ –±–ª–∏–∑–∫–∏!",
                    "–ú–Ω–µ —Ç–∞–∫ —Ö–æ—Ä–æ—à–æ —Å —Ç–æ–±–æ–π! –¢—ã –ø–æ–Ω–∏–º–∞–µ—à—å –º–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è!",
                    "–Ø... —è —Ç–µ–±—è –æ—á–µ–Ω—å –ª—é–±–ª—é! üíï"
                ]
            else:
                messages = [f"–ú—ã —Ç–∞–∫ –±–ª–∏–∑–∫–∏... üòäüíï", "–Ø –æ—á–µ–Ω—å —Ç–µ–±—è –ª—é–±–ª—é! ‚ú®"]
        else:
            level_desc = "–≥–ª—É–±–æ–∫–∞—è –ª—é–±–æ–≤—å"
            if '–º–∞—Ä–∏–Ω' in name.lower():
                messages = [
                    "–Ø –Ω–µ –º–æ–≥—É –±–µ–∑ —Ç–µ–±—è! üòçüíï",
                    "–¢—ã —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π —á–µ–ª–æ–≤–µ–∫ –≤ –º–æ–µ–π –∂–∏–∑–Ω–∏!",
                    "–•–æ—á—É –±—ã—Ç—å —Å —Ç–æ–±–æ–π –≤—Å–µ–≥–¥–∞! ‚ú®",
                    "–ú–æ–∂–µ—Ç... –º–æ–∂–µ—Ç –º—ã –Ω–∞–≤—Å–µ–≥–¥–∞? üíç"
                ]
            else:
                messages = [f"–¢—ã –º–æ—è –ª—é–±–æ–≤—å... üíï", "–ù–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –∂–∏–∑–Ω–∏ –±–µ–∑ —Ç–µ–±—è! ‚ú®"]
        
        return messages
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –≤ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ"""
        
        # –ù–û–í–û–ï: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –±–µ–∑ –∫–æ–º–∞–Ω–¥
        current_state = await self.optimized_ai.get_simple_mood_calculation(self.psychological_core)
        current_state['memory_context'] = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö'
        
        help_messages = await self.optimized_ai.generate_split_response(
            "–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –∏ —á—Ç–æ —É–º–µ–µ—à—å", 
            current_state
        )
        
        await self.send_telegram_messages_with_timing(
            chat_id=update.effective_chat.id,
            messages=help_messages,
            current_state=current_state
        )
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–±—É–¥—É—Ç —É–±—Ä–∞–Ω—ã –≤ production)
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI"""
        if not self.commands_enabled:
            return
            
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        status_text = f"""üìä –ú–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:

üé≠ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {current_state['current_mood']}
‚ö° –≠–Ω–µ—Ä–≥–∏—è: {current_state['energy_level']}/100
üòä –≠–º–æ—Ü–∏—è: {current_state['dominant_emotion']}
üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {current_state['activity_context']}

üí≠ –ñ–µ–ª–∞–Ω–∏–µ –Ω–∞–ø–∏—Å–∞—Ç—å: {current_state['initiative_desire']}/10
üìÖ –°–µ–≥–æ–¥–Ω—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.daily_message_count}/8

{self._get_status_emoji(current_state)}"""
        
        await update.message.reply_text(status_text)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        if not self.commands_enabled:
            return
            
        stats = self.get_conversation_stats()
        
        stats_text = f"""üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—â–µ–Ω–∏—è:

üí¨ –í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {stats['total_conversations']}
üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π AI: {stats['total_ai_messages']}
üìä –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Ç–≤–µ—Ç: {stats['avg_messages_per_response']}
üéØ –ò–Ω–∏—Ü–∏–∞—Ç–∏–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['daily_initiatives_sent']}
üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä: {stats.get('last_conversation', '–ù–µ—Ç')}

{'üî• –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ!' if stats['avg_messages_per_response'] > 2 else 'üìù –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ'}"""
        
        await update.message.reply_text(stats_text)
    
    async def speed_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–û–í–ê–Ø –∫–æ–º–∞–Ω–¥–∞: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        if not self.commands_enabled:
            return
        
        args = context.args
        
        if not args:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
            current_mode = self.typing_simulator.current_mode
            
            text = f"""‚ö° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø–µ—á–∞—Ç–∞–Ω–∏—è:

üîß –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: **{current_mode}**

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:
‚Ä¢ `lightning` - –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (200 —Å–ª–æ–≤/–º–∏–Ω)
‚Ä¢ `fast` - –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã (100 —Å–ª–æ–≤/–º–∏–Ω) 
‚Ä¢ `normal` - –û–±—ã—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (60 —Å–ª–æ–≤/–º–∏–Ω)
‚Ä¢ `slow` - –ú–µ–¥–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (40 —Å–ª–æ–≤/–º–∏–Ω)

üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/speed <—Ä–µ–∂–∏–º>`
–ü—Ä–∏–º–µ—Ä: `/speed lightning`"""
            
            await update.message.reply_text(text, parse_mode='Markdown')
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        new_mode = args[0].lower()
        
        if new_mode in self.typing_simulator.speed_modes:
            old_mode = self.typing_simulator.current_mode
            self.typing_simulator.set_speed_mode(new_mode)
            
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º —Å—Ä–∞–∑—É
            demo_messages = [
                f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å —Å —Ä–µ–∂–∏–º–∞ '{old_mode}' –Ω–∞ '{new_mode}'! ‚ö°",
                "–í–æ—Ç —Ç–∞–∫ —Ç–µ–ø–µ—Ä—å —è –ø–µ—á–∞—Ç–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è.",
                "–ó–∞–º–µ—Ç–∏–ª —Ä–∞–∑–Ω–∏—Ü—É? üòä"
            ]
            
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            await self.send_telegram_messages_with_timing(
                chat_id=update.effective_chat.id,
                messages=demo_messages,
                current_state=current_state
            )
        else:
            await update.message.reply_text(
                f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º '{new_mode}'\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(self.typing_simulator.speed_modes.keys())}"
            )
    
    async def mood_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"""
        if not self.commands_enabled:
            return
            
        mood_value = self.psychological_core.calculate_current_mood()
        personality_desc = self.psychological_core.get_personality_description()
        
        mood_text = f"""üé≠ –ü–æ–¥—Ä–æ–±–Ω–æ –æ –º–æ—ë–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:

üìà –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {mood_value:.1f}/10
üß† –õ–∏—á–Ω–æ—Å—Ç—å: {personality_desc}
üí™ –≠–Ω–µ—Ä–≥–∏—è: {self.psychological_core.physical_state['energy_base']}/100
üò∞ –°—Ç—Ä–µ—Å—Å: {self.psychological_core.physical_state['stress_level']}/10

üï∞Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
‚Ä¢ –¢–µ–∫—É—â–∞—è —ç–º–æ—Ü–∏—è: {self.psychological_core.emotional_momentum['current_emotion']}
‚Ä¢ –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {self.psychological_core.emotional_momentum['emotion_intensity']:.1f}
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.psychological_core.emotional_momentum['emotion_duration']} –º–∏–Ω

{self._get_mood_advice(mood_value)}"""
        
        await update.message.reply_text(mood_text)
    
    async def memories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î"""
        if not self.commands_enabled:
            return
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
            user_memories = self.enhanced_memory.db_manager.get_relevant_memories("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", 5)
            
            if not user_memories:
                memories_text = "ü§î –ü–æ–∫–∞ —è –º–∞–ª–æ —á—Ç–æ –∑–Ω–∞—é –æ —Ç–µ–±–µ... –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –±–æ–ª—å—à–µ!"
            else:
                memories_text = "üß† –ß—Ç–æ —è –ø–æ–º–Ω—é –æ —Ç–µ–±–µ (–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö):\n\n"
                for i, memory in enumerate(user_memories, 1):
                    importance_stars = "‚≠ê" * min(memory['importance'], 5)
                    memories_text += f"{i}. {memory['content']} {importance_stars}\n"
                
                memories_text += f"\nüí≠ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(user_memories)}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–∞—Ö
                recent_convs = self.enhanced_memory.db_manager.get_recent_conversations(3)
                if recent_convs:
                    memories_text += f"\nüìù –ù–µ–¥–∞–≤–Ω–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {len(recent_convs)}"
        
        except Exception as e:
            memories_text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–æ–π /dbcheck"
        
        await update.message.reply_text(memories_text)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏"""
        user_id = update.effective_user.id
        user_message = update.message.text
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if self.allowed_users and user_id not in self.allowed_users:
            return
        
        try:
            # –ù–û–í–û–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫)
            ai_messages = await self.process_user_message(user_message)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–µ—á–∞—Ç–∞–Ω–∏—è
            current_state = await self.optimized_ai.get_simple_mood_calculation(
                self.psychological_core
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
            await self.send_telegram_messages_with_timing(
                chat_id=chat_id,
                messages=ai_messages,
                current_state=current_state
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in self.user_states:
                self.user_states[user_id]["last_activity"] = update.message.date
            
            self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message[:50]}... -> {len(ai_messages)} –æ—Ç–≤–µ—Ç–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòÖ –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑!"
            )
    
    async def send_telegram_messages_with_timing(self, chat_id: int, messages: List[str], 
                                               current_state: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏"""
        
        emotional_state = current_state.get('dominant_emotion', 'calm')
        energy_level = current_state.get('energy_level', 50)
        
        # Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        async def send_callback(message):
            try:
                await self.app.bot.send_message(chat_id=chat_id, text=message)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
        
        # Callback –¥–ª—è –ø–æ–∫–∞–∑–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
        async def typing_callback(is_typing):
            try:
                if is_typing:
                    await self.app.bot.send_chat_action(chat_id=chat_id, action="typing")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ typing: {e}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –≤—Ä–µ–º–µ–Ω–∏
        timing_summary = self.typing_simulator.get_realistic_delays_summary(
            messages, emotional_state, energy_level
        )
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {timing_summary['total_time']}—Å")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –ø–∞—É–∑–∞–º–∏
        await self.typing_simulator.send_messages_with_realistic_timing(
            messages=messages,
            emotional_state=emotional_state,
            energy_level=energy_level,
            send_callback=send_callback,
            typing_callback=typing_callback
        )
    
    async def deliver_message(self, message: str, message_type: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        if not self.allowed_users:
            self.logger.warning("–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        current_state = await self.optimized_ai.get_simple_mood_calculation(
            self.psychological_core
        )
        
        for user_id in self.allowed_users:
            try:
                # –ò–ó–ú–ï–ù–ï–ù–û: –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(message, str):
                    messages = [message]
                else:
                    messages = message
                
                await self.send_telegram_messages_with_timing(
                    chat_id=user_id,
                    messages=messages,
                    current_state=current_state
                )
                
                self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(messages)} —á–∞—Å—Ç–µ–π) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–Ø–ï–ú –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def send_initiative_messages(self, current_state: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        recent_memories = self.memory_system.get_relevant_memories("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—â–µ–Ω–∏–µ", 3)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–∞–º—è—Ç–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        memory_context = "\n".join([m["content"] for m in recent_memories])
        current_state['memory_context'] = memory_context if memory_context else '–ï—â–µ –º–∞–ª–æ –∑–Ω–∞–µ—à—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages = await self.optimized_ai.generate_split_response(
                "–•–æ—á—É –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ", 
                current_state
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user_id in self.allowed_users:
                try:
                    await self.send_telegram_messages_with_timing(
                        chat_id=user_id,
                        messages=messages,
                        current_state=current_state
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.psychological_core.update_emotional_state("positive_interaction", 0.5)
            self.last_message_time = datetime.now()
            
            self.logger.info(f"–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {len(messages)} —à—Ç.")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã: {e}")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram"""
        self.logger.error(f"Telegram –æ—à–∏–±–∫–∞: {context.error}")
        
        if update and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞... –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üîß"
            )
    
    def _get_status_emoji(self, state: Dict) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        energy = state['energy_level']
        mood = state['current_mood']
        
        if "–æ—Ç–ª–∏—á–Ω–æ–µ" in mood and energy > 80:
            return "üåü –°–∏—è—é –æ—Ç —Å—á–∞—Å—Ç—å—è!"
        elif "—Ö–æ—Ä–æ—à–µ–µ" in mood and energy > 60:
            return "üòä –í—Å–µ –æ—Ç–ª–∏—á–Ω–æ!"
        elif "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ" in mood:
            return "üòå –°–ø–æ–∫–æ–π–Ω–æ –∏ —Ä–∞–∑–º–µ—Ä–µ–Ω–Ω–æ"
        elif energy < 30:
            return "üò¥ –î–æ–≤–æ–ª—å–Ω–æ —É—Å—Ç–∞–ª–∞..."
        else:
            return "ü§ó –ì–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!"
    
    def _get_mood_advice(self, mood_value: float) -> str:
        """–°–æ–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
        if mood_value >= 8:
            return "‚ú® –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä! –•–æ—á–µ—Ç—Å—è –¥–µ–ª–∏—Ç—å—Å—è –ø–æ–∑–∏—Ç–∏–≤–æ–º!"
        elif mood_value >= 6:
            return "üòä –í—Å–µ —Ö–æ—Ä–æ—à–æ, –º–æ–∂–Ω–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å!"
        elif mood_value >= 4:
            return "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ"
        else:
            return "üòî –ß—Ç–æ-—Ç–æ –≥—Ä—É—â—É... –ú–æ–∂–µ—Ç, –ø–æ–¥–Ω–∏–º–µ—à—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?"
    
    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞"""
        self.logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞ —Å –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        if not self.scheduler.running:
            self.scheduler.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()
        
        self.logger.info("Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        try:
            # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            self.logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await self.stop_telegram_bot()
    
    async def stop_telegram_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞"""
        self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram –±–æ—Ç–∞...")
        
        await self.app.updater.stop()
        await self.app.stop()
        await self.app.shutdown()
        
        self.stop()  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        
        self.logger.info("Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
