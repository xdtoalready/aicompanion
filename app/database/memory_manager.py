# –§–∞–π–ª: app/database/memory_manager.py
# –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–º—è—Ç–∏

import sqlite3
import json
import logging
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from contextlib import contextmanager

class DatabaseMemoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    
    def add_emotional_memory(self, content: str, memory_type: str, importance: int,
                           emotion_type: str = "calm", emotional_intensity: float = 5.0,
                           conversation_id: int = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    INSERT INTO memories 
                    (character_id, memory_type, content, importance, 
                     emotional_intensity, emotion_type, source_conversation_id,
                     created_at, last_accessed, access_count)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    self.character_id, memory_type, content, importance,
                    emotional_intensity, emotion_type, conversation_id,
                    datetime.now().isoformat(), datetime.now().isoformat(), 0
                ))
                
                conn.commit()
                self.logger.info(f"üíï –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {emotion_type}({emotional_intensity:.1f})")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏: {e}")

    def get_emotional_memories(self, emotion_type: str = None, min_intensity: float = 0.0, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                if emotion_type:
                    cursor.execute("""
                        SELECT memory_type, content, importance, emotional_intensity, emotion_type,
                               access_count, created_at,
                               (importance + emotional_intensity * 0.3 + access_count * 0.1) as total_score
                        FROM memories 
                        WHERE character_id = ? 
                        AND emotion_type = ?
                        AND emotional_intensity >= ?
                        AND (is_deeply_archived != 1 OR access_count > 5)
                        ORDER BY total_score DESC, created_at DESC
                        LIMIT ?
                    """, (self.character_id, emotion_type, min_intensity, limit))
                else:
                    cursor.execute("""
                        SELECT memory_type, content, importance, emotional_intensity, emotion_type,
                               access_count, created_at,
                               (importance + emotional_intensity * 0.3 + access_count * 0.1) as total_score
                        FROM memories 
                        WHERE character_id = ? 
                        AND emotional_intensity >= ?
                        AND (is_deeply_archived != 1 OR access_count > 5)
                        ORDER BY total_score DESC, created_at DESC
                        LIMIT ?
                    """, (self.character_id, min_intensity, limit))
                
                results = []
                for row in cursor.fetchall():
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–∞
                    memory_id = row[0] if len(row) > 7 else None
                    if memory_id:
                        cursor.execute("""
                            UPDATE memories 
                            SET access_count = access_count + 1,
                                last_accessed = ?
                            WHERE id = ?
                        """, (datetime.now().isoformat(), memory_id))
                    
                    results.append({
                        "type": row[0],
                        "content": row[1],
                        "importance": row[2],
                        "emotional_intensity": row[3],
                        "emotion_type": row[4],
                        "access_count": row[5],
                        "created_at": row[6],
                        "total_score": row[7]
                    })
                
                conn.commit()
                return results
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []

    def build_context_for_prompt(self, current_message: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            memories = self.get_relevant_memories(current_message, 5)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏
            recent_convs = self.get_recent_conversations(3)
            
            context_parts = []
            
            if memories:
                context_parts.append("–ü–ê–ú–Ø–¢–¨ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:")
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                regular_memories = [m for m in memories if m.get('source') == 'regular']
                consolidated_memories = [m for m in memories if m.get('source') == 'consolidated']
                
                # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å)
                if consolidated_memories:
                    context_parts.append("–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                    for mem in consolidated_memories[:2]:
                        context_parts.append(f"- {mem['content']}")
                
                # –ü–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å)
                if regular_memories:
                    context_parts.append("–ù–µ–¥–∞–≤–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                    for mem in regular_memories[:3]:
                        context_parts.append(f"- {mem['content']}")
            
            if recent_convs:
                context_parts.append("\n–ù–ï–î–ê–í–ù–ò–ï –î–ò–ê–õ–û–ì–ò:")
                for conv in recent_convs[-2:]:
                    context_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['user_message']}")
                    context_parts.append(f"–¢—ã: {conv['ai_response']}")
            
            return "\n".join(context_parts) if context_parts else "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"

class EnhancedMemorySystem:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str = "data/companion.db"):
        self.db_manager = DatabaseMemoryManager(db_path)
        self.logger = logging.getLogger(__name__)
    
    def add_conversation(self, user_message: str, ai_responses: List[str], 
                        mood_before: str, mood_after: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            return self.db_manager.save_conversation(
                user_message, ai_responses, mood_before, mood_after
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None
    
    def get_context_for_response(self, user_message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            return self.db_manager.build_context_for_prompt(user_message)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
    
    def get_conversation_summary(self) -> Dict[str, Any]:
        """–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º"""
        try:
            recent = self.db_manager.get_recent_conversations(10)
            memories = self.db_manager.get_relevant_memories("", 10)
            
            return {
                "recent_conversations": len(recent),
                "total_memories": len(memories),
                "last_conversation": recent[0]['timestamp'] if recent else None
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {
                "recent_conversations": 0,
                "total_memories": 0,
                "last_conversation": None
            }
