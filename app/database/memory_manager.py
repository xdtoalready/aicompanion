# –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–º—è—Ç–∏

import sqlite3
import json
import logging
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from contextlib import contextmanager

class DatabaseMemoryManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, db_path: str = "data/companion.db"):
        self.db_path = db_path
        self.character_id = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å ID 1
        self.logger = logging.getLogger(__name__)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self._ensure_database_exists()
    
    def _ensure_database_exists(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã memories
                cursor.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' AND name='memories'
                """)
                
                if not cursor.fetchone():
                    self.logger.error("–¢–∞–±–ª–∏—Ü–∞ memories –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
                    raise Exception("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ scripts/setup_db.py")
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            raise
    
    @contextmanager
    def get_db_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_path, timeout=30)
            conn.row_factory = sqlite3.Row  # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º
            yield conn
        except Exception as e:
            if conn:
                conn.rollback()
            self.logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
            raise
        finally:
            if conn:
                conn.close()
    
    def save_conversation(self, user_message: str, ai_responses: List[str], 
                         mood_before: str, mood_after: str) -> Optional[int]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                ai_response_text = " || ".join(ai_responses)
                
                cursor.execute("""
                    INSERT INTO conversations 
                    (character_id, user_message, ai_response, mood_before, mood_after, timestamp)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    self.character_id, user_message, ai_response_text, 
                    mood_before, mood_after, datetime.now().isoformat()
                ))
                
                conversation_id = cursor.lastrowid
                conn.commit()
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
                self._extract_memories_from_conversation(
                    user_message, ai_responses, conversation_id
                )
                
                return conversation_id
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None
    
    def _extract_memories_from_conversation(self, user_message: str, 
                                          ai_responses: List[str], conversation_id: int):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å"""
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            facts_to_save = []
            
            user_lower = user_message.lower()
            
            # –§–∞–∫—Ç—ã –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
            preference_keywords = ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–æ–±–æ–∂–∞—é", "–Ω–µ –ª—é–±–ª—é", "–Ω–µ–Ω–∞–≤–∏–∂—É"]
            if any(keyword in user_lower for keyword in preference_keywords):
                facts_to_save.append({
                    "content": f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_message}",
                    "type": "preference", 
                    "importance": 6
                })
            
            # –§–∞–∫—Ç—ã –æ —Ä–∞–±–æ—Ç–µ/—É—á–µ–±–µ
            work_keywords = ["—Ä–∞–±–æ—Ç–∞—é", "—É—á—É—Å—å", "—Ä–∞–±–æ—Ç–∞", "—É—á–µ–±–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è"]
            if any(keyword in user_lower for keyword in work_keywords):
                facts_to_save.append({
                    "content": f"–†–∞–±–æ—Ç–∞/—É—á–µ–±–∞: {user_message}",
                    "type": "life_fact",
                    "importance": 7
                })
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            emotion_keywords = ["–≥—Ä—É—Å—Ç–Ω–æ", "–≤–µ—Å–µ–ª–æ", "—Å—á–∞—Å—Ç–ª–∏–≤", "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω", "–∑–ª–æ–π"]
            if any(keyword in user_lower for keyword in emotion_keywords):
                facts_to_save.append({
                    "content": f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_message}",
                    "type": "emotional_state",
                    "importance": 5
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã
            for fact in facts_to_save:
                self.add_memory(
                    fact["content"], fact["type"], fact["importance"], 
                    conversation_id=conversation_id
                )
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    def add_memory(self, content: str, memory_type: str, importance: int,
                   conversation_id: int = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    INSERT INTO memories 
                    (character_id, memory_type, content, importance, 
                     source_conversation_id, created_at, last_accessed)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    self.character_id, memory_type, content, importance,
                    conversation_id, datetime.now().isoformat(), 
                    datetime.now().isoformat()
                ))
                
                conn.commit()
                self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {memory_type} (–≤–∞–∂–Ω–æ—Å—Ç—å: {importance})")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    def add_emotional_memory(self, content: str, memory_type: str, importance: int,
                           emotion_type: str = "calm", emotional_intensity: float = 5.0,
                           conversation_id: int = None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    INSERT INTO memories 
                    (character_id, memory_type, content, importance, 
                     emotional_intensity, emotion_type, source_conversation_id,
                     created_at, last_accessed, access_count)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, (
                    self.character_id, memory_type, content, importance,
                    emotional_intensity, emotion_type, conversation_id,
                    datetime.now().isoformat(), datetime.now().isoformat(), 0
                ))
                
                conn.commit()
                self.logger.info(f"üíï –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {emotion_type}({emotional_intensity:.1f})")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏: {e}")

    def get_relevant_memories(self, context: str, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É + —É—á–µ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏
                context_words = context.lower().split()
                
                if context_words:
                    # –°–æ–∑–¥–∞–µ–º LIKE –∑–∞–ø—Ä–æ—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
                    like_conditions = []
                    params = []
                    
                    for word in context_words[:3]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞
                        if len(word) > 2:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞
                            like_conditions.append("LOWER(content) LIKE ?")
                            params.append(f"%{word}%")
                    
                    if like_conditions:
                        where_clause = "WHERE (" + " OR ".join(like_conditions) + ")"
                    else:
                        where_clause = ""
                else:
                    where_clause = ""
                    params = []
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —É—Å–ª–æ–≤–∏—è
                if where_clause:
                    where_clause += " AND character_id = ? AND (is_deeply_archived != 1 OR access_count > 5)"
                else:
                    where_clause = "WHERE character_id = ? AND (is_deeply_archived != 1 OR access_count > 5)"
                
                params.append(self.character_id)
                
                query = f"""
                    SELECT memory_type, content, importance, 
                           COALESCE(emotional_intensity, 5.0) as emotional_intensity,
                           COALESCE(emotion_type, 'calm') as emotion_type,
                           COALESCE(access_count, 0) as access_count,
                           created_at,
                           CASE 
                               WHEN is_consolidated = 1 THEN 'consolidated'
                               ELSE 'regular'
                           END as source,
                           (importance + COALESCE(emotional_intensity, 5.0) * 0.3 + COALESCE(access_count, 0) * 0.1) as relevance_score
                    FROM memories 
                    {where_clause}
                    ORDER BY relevance_score DESC, created_at DESC
                    LIMIT ?
                """
                
                params.append(limit)
                cursor.execute(query, params)
                
                results = []
                for row in cursor.fetchall():
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–∞
                    if row['source'] == 'regular':  # –¢–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                        cursor.execute("""
                            UPDATE memories 
                            SET access_count = access_count + 1,
                                last_accessed = ?
                            WHERE content = ? AND character_id = ?
                        """, (datetime.now().isoformat(), row['content'], self.character_id))
                    
                    results.append({
                        "type": row['memory_type'],
                        "content": row['content'], 
                        "importance": row['importance'],
                        "emotional_intensity": row['emotional_intensity'],
                        "emotion_type": row['emotion_type'],
                        "access_count": row['access_count'],
                        "created_at": row['created_at'],
                        "source": row['source'],
                        "relevance_score": row['relevance_score']
                    })
                
                conn.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_count
                return results
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []

    def get_emotional_memories(self, emotion_type: str = None, min_intensity: float = 0.0, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                if emotion_type:
                    cursor.execute("""
                        SELECT memory_type, content, importance, emotional_intensity, emotion_type,
                               access_count, created_at,
                               (importance + emotional_intensity * 0.3 + access_count * 0.1) as total_score
                        FROM memories 
                        WHERE character_id = ? 
                        AND emotion_type = ?
                        AND emotional_intensity >= ?
                        AND (is_deeply_archived != 1 OR access_count > 5)
                        ORDER BY total_score DESC, created_at DESC
                        LIMIT ?
                    """, (self.character_id, emotion_type, min_intensity, limit))
                else:
                    cursor.execute("""
                        SELECT memory_type, content, importance, emotional_intensity, emotion_type,
                               access_count, created_at,
                               (importance + emotional_intensity * 0.3 + access_count * 0.1) as total_score
                        FROM memories 
                        WHERE character_id = ? 
                        AND emotional_intensity >= ?
                        AND (is_deeply_archived != 1 OR access_count > 5)
                        ORDER BY total_score DESC, created_at DESC
                        LIMIT ?
                    """, (self.character_id, min_intensity, limit))
                
                results = []
                for row in cursor.fetchall():
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–∞
                    cursor.execute("""
                        UPDATE memories 
                        SET access_count = access_count + 1,
                            last_accessed = ?
                        WHERE content = ? AND character_id = ?
                    """, (datetime.now().isoformat(), row[1], self.character_id))
                    
                    results.append({
                        "type": row[0],
                        "content": row[1],
                        "importance": row[2],
                        "emotional_intensity": row[3],
                        "emotion_type": row[4],
                        "access_count": row[5],
                        "created_at": row[6],
                        "total_score": row[7]
                    })
                
                conn.commit()
                return results
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
            return []

    def get_recent_conversations(self, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT user_message, ai_response, mood_before, mood_after, timestamp
                    FROM conversations 
                    WHERE character_id = ?
                    ORDER BY timestamp DESC 
                    LIMIT ?
                """, (self.character_id, limit))
                
                results = []
                for row in cursor.fetchall():
                    results.append({
                        "user_message": row[0],
                        "ai_response": row[1],
                        "mood_before": row[2], 
                        "mood_after": row[3],
                        "timestamp": row[4]
                    })
                
                return results
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return []

    def build_context_for_prompt(self, current_message: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            memories = self.get_relevant_memories(current_message, 5)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏
            recent_convs = self.get_recent_conversations(3)
            
            context_parts = []
            
            if memories:
                context_parts.append("–ü–ê–ú–Ø–¢–¨ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:")
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                regular_memories = [m for m in memories if m.get('source') == 'regular']
                consolidated_memories = [m for m in memories if m.get('source') == 'consolidated']
                
                # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å)
                if consolidated_memories:
                    context_parts.append("–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                    for mem in consolidated_memories[:2]:
                        emotion_info = f"({mem['emotion_type']}: {mem['emotional_intensity']:.1f})" if mem.get('emotion_type') else ""
                        context_parts.append(f"- {mem['content']} {emotion_info}")
                
                # –ü–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å)
                if regular_memories:
                    context_parts.append("–ù–µ–¥–∞–≤–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                    for mem in regular_memories[:3]:
                        emotion_info = f"({mem['emotion_type']}: {mem['emotional_intensity']:.1f})" if mem.get('emotion_type') else ""
                        context_parts.append(f"- {mem['content']} {emotion_info}")
            
            if recent_convs:
                context_parts.append("\n–ù–ï–î–ê–í–ù–ò–ï –î–ò–ê–õ–û–ì–ò:")
                for conv in recent_convs[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2
                    context_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['user_message']}")
                    # –ï—Å–ª–∏ —ç—Ç–æ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ
                    ai_response = conv['ai_response'].split('||')[0].strip() if '||' in conv['ai_response'] else conv['ai_response']
                    context_parts.append(f"–¢—ã: {ai_response}")
            
            return "\n".join(context_parts) if context_parts else "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"

class EnhancedMemorySystem:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str = "data/companion.db"):
        self.db_manager = DatabaseMemoryManager(db_path)
        self.logger = logging.getLogger(__name__)
    
    def add_conversation(self, user_message: str, ai_responses: List[str], 
                        mood_before: str, mood_after: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            return self.db_manager.save_conversation(
                user_message, ai_responses, mood_before, mood_after
            )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None
    
    def get_context_for_response(self, user_message: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            return self.db_manager.build_context_for_prompt(user_message)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
    
    def get_conversation_summary(self) -> Dict[str, Any]:
        """–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º"""
        try:
            recent = self.db_manager.get_recent_conversations(10)
            memories = self.db_manager.get_relevant_memories("", 10)
            
            return {
                "recent_conversations": len(recent),
                "total_memories": len(memories),
                "last_conversation": recent[0]['timestamp'] if recent else None
            }
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
            return {
                "recent_conversations": 0,
                "total_memories": 0,
                "last_conversation": None
            }