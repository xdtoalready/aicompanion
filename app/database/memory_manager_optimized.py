# –§–∞–π–ª: app/database/memory_manager_optimized.py
# –°–£–ü–ï–†-–ë–´–°–¢–†–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏

import sqlite3
import json
import logging
import hashlib
import time
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from contextlib import contextmanager

class OptimizedMemoryManager:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏ (–≤ 10x –±—ã—Å—Ç—Ä–µ–µ)"""
    
    def __init__(self, db_path: str = "data/companion.db"):
        self.db_path = db_path
        self.character_id = 1
        self.logger = logging.getLogger(__name__)
        
        # –ö—ç—à –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.memory_cache = {}
        self.cache_size = 100
        self.cache_ttl = 300  # 5 –º–∏–Ω—É—Ç
        
        self._ensure_optimized_database()
    
    def _ensure_optimized_database(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                optimization_sql = """
                -- –ò–Ω–¥–µ–∫—Å—ã
                CREATE INDEX IF NOT EXISTS idx_memories_character_type ON memories(character_id, memory_type);
                CREATE INDEX IF NOT EXISTS idx_memories_importance ON memories(importance DESC);
                CREATE INDEX IF NOT EXISTS idx_memories_created_at ON memories(created_at DESC);
                CREATE INDEX IF NOT EXISTS idx_memories_access_count ON memories(access_count DESC);
                CREATE INDEX IF NOT EXISTS idx_memories_emotional ON memories(emotion_type, emotional_intensity DESC);
                
                -- –ö—ç—à —Ç–∞–±–ª–∏—Ü–∞
                CREATE TABLE IF NOT EXISTS memory_cache (
                    cache_key TEXT PRIMARY KEY,
                    cache_data TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    expires_at DATETIME
                );
                
                -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                PRAGMA journal_mode = WAL;
                PRAGMA synchronous = NORMAL;
                PRAGMA cache_size = 10000;
                PRAGMA temp_store = MEMORY;
                """
                
                cursor.executescript(optimization_sql)
                conn.commit()
                
                self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def _get_cache_key(self, query_type: str, params: tuple) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞"""
        cache_input = f"{query_type}:{params}"
        return hashlib.md5(cache_input.encode()).hexdigest()
    
    def _get_from_cache(self, cache_key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞"""
        if cache_key in self.memory_cache:
            data, timestamp = self.memory_cache[cache_key]
            if time.time() - timestamp < self.cache_ttl:
                return data
            else:
                del self.memory_cache[cache_key]
        return None
    
    def _set_cache(self, cache_key: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à"""
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        if len(self.memory_cache) >= self.cache_size:
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
            oldest_key = min(self.memory_cache.keys(), 
                           key=lambda k: self.memory_cache[k][1])
            del self.memory_cache[oldest_key]
        
        self.memory_cache[cache_key] = (data, time.time())
    
    def get_relevant_memories_fast(self, context: str, limit: int = 5) -> List[Dict]:
        """–°–£–ü–ï–†-–ë–´–°–¢–†–´–ô –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        
        cache_key = self._get_cache_key("relevant_memories", (context, limit))
        cached_result = self._get_from_cache(cache_key)
        if cached_result:
            self.logger.debug("üöÄ –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –∫—ç—à–∞")
            return cached_result
        
        start_time = time.time()
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ì–æ—Ç–æ–≤–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
                context_words = [word.lower().strip() for word in context.split() if len(word) > 2]
                
                if not context_words:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –±–µ—Ä—ë–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    cursor.execute("""
                        SELECT memory_type, content, importance, 
                               COALESCE(emotional_intensity, 5.0) as emotional_intensity,
                               COALESCE(emotion_type, 'calm') as emotion_type,
                               COALESCE(access_count, 0) as access_count,
                               created_at
                        FROM memories 
                        WHERE character_id = ? 
                        AND (is_deeply_archived != 1 OR access_count > 5)
                        ORDER BY importance DESC, emotional_intensity DESC
                        LIMIT ?
                    """, (self.character_id, limit))
                else:
                    # –ë–´–°–¢–†–´–ô –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å
                    like_conditions = []
                    params = []
                    
                    # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–∞–º—ã—Ö –¥–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞
                    top_words = sorted(context_words, key=len, reverse=True)[:2]
                    
                    for word in top_words:
                        like_conditions.append("content LIKE ?")
                        params.append(f"%{word}%")
                    
                    where_clause = f"({' OR '.join(like_conditions)})" if like_conditions else "1=1"
                    params.extend([self.character_id, limit])
                    
                    query = f"""
                        SELECT memory_type, content, importance, 
                               COALESCE(emotional_intensity, 5.0) as emotional_intensity,
                               COALESCE(emotion_type, 'calm') as emotion_type,
                               COALESCE(access_count, 0) as access_count,
                               created_at,
                               (importance + COALESCE(emotional_intensity, 5.0) * 0.3 + COALESCE(access_count, 0) * 0.1) as relevance_score
                        FROM memories 
                        WHERE {where_clause}
                        AND character_id = ? 
                        AND (is_deeply_archived != 1 OR access_count > 5)
                        ORDER BY relevance_score DESC, created_at DESC
                        LIMIT ?
                    """
                    
                    cursor.execute(query, params)
                
                results = []
                ids_to_update = []
                
                for row in cursor.fetchall():
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–µ-–∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
                    if len(row) > 7:  # –ï—Å—Ç—å ID
                        ids_to_update.append(row[0])
                    
                    results.append({
                        "type": row[0],
                        "content": row[1], 
                        "importance": row[2],
                        "emotional_intensity": row[3],
                        "emotion_type": row[4],
                        "access_count": row[5],
                        "created_at": row[6]
                    })
                
                # Batch-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–æ—Å—Ç—É–ø–∞
                if ids_to_update:
                    placeholders = ",".join(["?" for _ in ids_to_update])
                    cursor.execute(f"""
                        UPDATE memories 
                        SET access_count = access_count + 1,
                            last_accessed = ?
                        WHERE memory_type IN ({placeholders}) AND character_id = ?
                    """, [datetime.now().isoformat()] + ids_to_update + [self.character_id])
                
                conn.commit()
                
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                self._set_cache(cache_key, results)
                
                elapsed_time = time.time() - start_time
                self.logger.debug(f"üöÄ –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–∞–º—è—Ç–∏: {elapsed_time:.3f}—Å ({len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
                
                return results
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞–º—è—Ç–∏: {e}")
            return []
    
    def add_memory_batch(self, memories: List[Dict]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                batch_data = []
                for memory in memories:
                    batch_data.append((
                        self.character_id,
                        memory.get("type", "fact"),
                        memory.get("content", ""),
                        memory.get("importance", 5),
                        memory.get("emotional_intensity", 5.0),
                        memory.get("emotion_type", "calm"),
                        datetime.now().isoformat(),
                        datetime.now().isoformat(),
                        0
                    ))
                
                cursor.executemany("""
                    INSERT INTO memories 
                    (character_id, memory_type, content, importance, 
                     emotional_intensity, emotion_type, created_at, 
                     last_accessed, access_count)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                """, batch_data)
                
                conn.commit()
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                self.memory_cache.clear()
                
                self.logger.info(f"üíæ Batch: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    
    def aggressive_cleanup(self, days_threshold: int = 30):
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–≤–∞–∂–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        
        try:
            cutoff_date = (datetime.now() - timedelta(days=days_threshold)).isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –£–¥–∞–ª—è–µ–º (–Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º!) –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –Ω–µ–≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                cursor.execute("""
                    DELETE FROM memories 
                    WHERE created_at <= ? 
                    AND importance < 4
                    AND emotional_intensity < 4 
                    AND access_count < 2
                    AND character_id = ?
                """, (cutoff_date, self.character_id))
                
                deleted_count = cursor.rowcount
                
                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–µ-–≤–∞–∂–Ω—ã–µ —Å—Ç–∞—Ä—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                cursor.execute("""
                    UPDATE memories 
                    SET is_deeply_archived = 1,
                        access_difficulty = 8
                    WHERE created_at <= ? 
                    AND importance < 7
                    AND emotional_intensity < 7 
                    AND access_count < 5
                    AND character_id = ?
                    AND is_deeply_archived != 1
                """, (cutoff_date, self.character_id))
                
                archived_count = cursor.rowcount
                conn.commit()
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à
                self.memory_cache.clear()
                
                self.logger.info(f"üóëÔ∏è –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ {deleted_count}, –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {archived_count}")
                
                return {"deleted": deleted_count, "archived": archived_count}
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            return {"deleted": 0, "archived": 0}
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor.execute("SELECT COUNT(*) FROM memories WHERE character_id = ?", (self.character_id,))
                total_memories = cursor.fetchone()[0]
                
                # –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                cursor.execute("SELECT COUNT(*) FROM memories WHERE character_id = ? AND is_deeply_archived = 1", (self.character_id,))
                archived_count = cursor.fetchone()[0]
                
                # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                cursor.execute("SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()")
                db_size_bytes = cursor.fetchone()[0]
                
                return {
                    "total_memories": total_memories,
                    "active_memories": total_memories - archived_count,
                    "archived_memories": archived_count,
                    "db_size_mb": round(db_size_bytes / 1024 / 1024, 2),
                    "cache_hits": len(self.memory_cache),
                    "cache_size": self.cache_size,
                    "archival_ratio": round(archived_count / total_memories * 100, 1) if total_memories > 0 else 0
                }
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def vacuum_database(self):
        """–î–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                conn.execute("VACUUM")
                conn.execute("ANALYZE")
            
            self.logger.info("üõ†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}")
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def save_conversation(self, user_message: str, ai_responses: List[str], mood_before: str, mood_after: str) -> Optional[int]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                ai_response_text = " || ".join(ai_responses)
                
                cursor.execute("""
                    INSERT INTO conversations 
                    (character_id, user_message, ai_response, mood_before, mood_after, timestamp)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    self.character_id, user_message, ai_response_text, 
                    mood_before, mood_after, datetime.now().isoformat()
                ))
                
                conversation_id = cursor.lastrowid
                conn.commit()
                
                self.logger.info(f"üíæ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {conversation_id}")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
                self._extract_memories_from_conversation(
                    user_message, ai_responses, conversation_id
                )
                
                # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                self.memory_cache.clear()
                
                return conversation_id
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return None
        
    def _extract_memories_from_conversation(self, user_message: str, ai_responses: List[str], conversation_id: int):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–∫—Ç—ã –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å"""
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            facts_to_save = []
            
            user_lower = user_message.lower()
            
            # –§–∞–∫—Ç—ã –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
            preference_keywords = ["–ª—é–±–ª—é", "–Ω—Ä–∞–≤–∏—Ç—Å—è", "–æ–±–æ–∂–∞—é", "–Ω–µ –ª—é–±–ª—é", "–Ω–µ–Ω–∞–≤–∏–∂—É"]
            if any(keyword in user_lower for keyword in preference_keywords):
                facts_to_save.append({
                    "content": f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {user_message}",
                    "type": "preference", 
                    "importance": 6,
                    "emotional_intensity": 6.0,
                    "emotion_type": "preference"
                })
            
            # –§–∞–∫—Ç—ã –æ —Ä–∞–±–æ—Ç–µ/—É—á–µ–±–µ
            work_keywords = ["—Ä–∞–±–æ—Ç–∞—é", "—É—á—É—Å—å", "—Ä–∞–±–æ—Ç–∞", "—É—á–µ–±–∞", "–ø—Ä–æ—Ñ–µ—Å—Å–∏—è"]
            if any(keyword in user_lower for keyword in work_keywords):
                facts_to_save.append({
                    "content": f"–†–∞–±–æ—Ç–∞/—É—á–µ–±–∞: {user_message}",
                    "type": "life_fact",
                    "importance": 7,
                    "emotional_intensity": 5.0,
                    "emotion_type": "factual"
                })
            
            # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            emotion_keywords = ["–≥—Ä—É—Å—Ç–Ω–æ", "–≤–µ—Å–µ–ª–æ", "—Å—á–∞—Å—Ç–ª–∏–≤", "—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω", "–∑–ª–æ–π"]
            if any(keyword in user_lower for keyword in emotion_keywords):
                facts_to_save.append({
                    "content": f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_message}",
                    "type": "emotional_state",
                    "importance": 5,
                    "emotional_intensity": 7.0,
                    "emotion_type": "emotional"
                })
            
            # Batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
            if facts_to_save:
                self.add_memory_batch([{
                    "type": fact["type"],
                    "content": fact["content"],
                    "importance": fact["importance"],
                    "emotional_intensity": fact["emotional_intensity"],
                    "emotion_type": fact["emotion_type"]
                } for fact in facts_to_save])
                
                self.logger.info(f"üß† –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(facts_to_save)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞")
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    @contextmanager
    def get_db_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        conn = None
        try:
            conn = sqlite3.connect(self.db_path, timeout=30)
            conn.row_factory = sqlite3.Row  # –î–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º
            yield conn
        except Exception as e:
            if conn:
                conn.rollback()
            self.logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
            raise
        finally:
            if conn:
                conn.close()
    
    def build_context_for_prompt(self, current_message: str) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ
            memories = self.get_relevant_memories_fast(current_message, 5)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏
            recent_convs = self.get_recent_conversations(3)
            
            context_parts = []
            
            if memories:
                context_parts.append("–ü–ê–ú–Ø–¢–¨ –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:")
                
                # –†–∞–∑–¥–µ–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –∏ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                regular_memories = [m for m in memories if m.get('source') != 'consolidated']
                consolidated_memories = [m for m in memories if m.get('source') == 'consolidated']
                
                # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ (–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å)
                if consolidated_memories:
                    context_parts.append("–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                    for mem in consolidated_memories[:2]:
                        emotion_info = f"({mem['emotion_type']}: {mem['emotional_intensity']:.1f})" if mem.get('emotion_type') else ""
                        context_parts.append(f"- {mem['content']} {emotion_info}")
                
                # –ü–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å)
                if regular_memories:
                    context_parts.append("–ù–µ–¥–∞–≤–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                    for mem in regular_memories[:3]:
                        emotion_info = f"({mem['emotion_type']}: {mem['emotional_intensity']:.1f})" if mem.get('emotion_type') else ""
                        context_parts.append(f"- {mem['content']} {emotion_info}")
            
            if recent_convs:
                context_parts.append("\n–ù–ï–î–ê–í–ù–ò–ï –î–ò–ê–õ–û–ì–ò:")
                for conv in recent_convs[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2
                    context_parts.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conv['user_message']}")
                    # –ï—Å–ª–∏ —ç—Ç–æ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ
                    ai_response = conv['ai_response'].split('||')[0].strip() if '||' in conv['ai_response'] else conv['ai_response']
                    context_parts.append(f"–¢—ã: {ai_response}")
            
            return "\n".join(context_parts) if context_parts else "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "–ù–æ–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ"
        
    def get_recent_conversations(self, limit: int = 5) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏ (–†–ï–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            with self.get_db_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute("""
                    SELECT user_message, ai_response, mood_before, mood_after, timestamp
                    FROM conversations 
                    WHERE character_id = ?
                    ORDER BY timestamp DESC 
                    LIMIT ?
                """, (self.character_id, limit))
                
                results = []
                for row in cursor.fetchall():
                    results.append({
                        "user_message": row[0],
                        "ai_response": row[1],
                        "mood_before": row[2], 
                        "mood_after": row[3],
                        "timestamp": row[4]
                    })
                
                return results

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            return []
    
    def add_conversation(self, user_message: str, ai_responses: List[str], mood_before: str, mood_after: str):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å EnhancedMemorySystem"""
        return self.save_conversation(user_message, ai_responses, mood_before, mood_after)

    def get_context_for_response(self, user_message: str) -> str:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å EnhancedMemorySystem"""
        return self.build_context_for_prompt(user_message)

    def clear_all_data(self):
        """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("DELETE FROM conversations WHERE character_id = ?", (self.character_id,))
                cursor.execute("DELETE FROM memories WHERE character_id = ?", (self.character_id,))
                conn.commit()
            self.memory_cache.clear()  # –û—á–∏—â–∞–µ–º –∫—ç—à
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def get_conversation_summary(self) -> Dict[str, Any]:
        """–°–≤–æ–¥–∫–∞ –ø–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞–º (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        return self.get_memory_stats()