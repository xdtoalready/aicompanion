"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import asyncio
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))

from app.core.companion import RealisticAICompanion
from app.core.typing_simulator import TypingSimulator

async def test_split_responses():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    config = {
        "ai": {
            "openrouter_api_key": "test_key",  # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
            "model": "deepseek/deepseek-chat",
            "max_tokens": 350,
            "temperature": 0.85
        },
        "character": {
            "name": "–ê–ª–∏—Å–∞",
            "personality_traits": {
                "extraversion": 7.0,
                "agreeableness": 8.0,
                "conscientiousness": 6.0,
                "neuroticism": 4.0,
                "openness": 9.0
            }
        },
        "database": {"path": "data/test.db"},
        "behavior": {
            "max_daily_initiatives": 5,
            "min_hours_between_initiatives": 1
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
    companion = RealisticAICompanion(config)
    
    print("üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω:")
    print(f"   –ò–º—è: {config['character']['name']}")
    print(f"   –õ–∏—á–Ω–æ—Å—Ç—å: {companion.psychological_core.get_personality_description()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º TypingSimulator –æ—Ç–¥–µ–ª—å–Ω–æ
    print("\n‚å®Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—á–∞—Ç–∞–Ω–∏—è:")
    
    test_messages = [
        "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
        "–£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä",
        "–•–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —á–µ–º-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º.",
        "–ê —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ?"
    ]
    
    typing_sim = TypingSimulator()
    
    for i, msg in enumerate(test_messages, 1):
        typing_time = typing_sim.calculate_typing_time(msg, "happy", 80)
        print(f"   {i}. '{msg}' ‚Üí {typing_time:.1f}—Å –ø–µ—á–∞—Ç–∞–Ω–∏—è")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    print("\n‚è∏Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:")
    
    for i in range(len(test_messages) - 1):
        pause = typing_sim.calculate_pause_between_messages(
            test_messages[i], test_messages[i + 1], "happy"
        )
        print(f"   –ü–æ—Å–ª–µ '{test_messages[i][:20]}...' ‚Üí –ø–∞—É–∑–∞ {pause:.1f}—Å")
    
    # –ü–æ–ª–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    print("\nüìä –ü–æ–ª–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:")
    
    summary = typing_sim.get_realistic_delays_summary(test_messages, "happy", 80)
    print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {summary['total_time']}—Å")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {summary['average_per_message']}—Å")
    print(f"   –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {summary['emotional_state']}")
    
    for detail in summary['details']:
        print(f"   - '{detail['message']}': –ø–µ—á–∞—Ç—å {detail['typing_time']}—Å + –ø–∞—É–∑–∞ {detail['pause_after']}—Å")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
    print("\nüì§ –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:")
    
    sent_messages = []
    
    async def mock_send_callback(message):
        sent_messages.append(message)
        print(f"   üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
    
    async def mock_typing_callback(is_typing):
        if is_typing:
            print("   ‚å®Ô∏è  [–ø–µ—á–∞—Ç–∞–µ—Ç...]")
        else:
            print("   ‚úÖ [–ø–µ—á–∞—Ç–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ]")
    
    await typing_sim.send_messages_with_realistic_timing(
        messages=test_messages[:2],  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
        emotional_state="happy",
        energy_level=80,
        send_callback=mock_send_callback,
        typing_callback=mock_typing_callback
    )
    
    print(f"\n‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(sent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
    
    emotions = ["excited", "calm", "anxious", "sad", "angry", "tired"]
    test_msg = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —É —Ç–µ–±—è?"
    
    for emotion in emotions:
        time = typing_sim.calculate_typing_time(test_msg, emotion, 50)
        pause = typing_sim.calculate_pause_between_messages(test_msg, "–ê —É –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ!", emotion)
        print(f"   {emotion:8}: –ø–µ—á–∞—Ç—å {time:.1f}—Å, –ø–∞—É–∑–∞ {pause:.1f}—Å")

async def test_fallback_splitting():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è:")
    
    typing_sim = TypingSimulator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    test_texts = [
        "–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç.",
        "–≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π. –û–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. –ò –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.",
        "–¢–µ–∫—Å—Ç! –° –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏—è–º–∏! –ò –≤–æ–ø—Ä–æ—Å–∞–º–∏? –î–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª–∏—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ!",
        "–û—á–µ–Ω—å–î–ª–∏–Ω–Ω–æ–µ–°–ª–æ–≤–æ–ë–µ–∑–ü—Ä–æ–±–µ–ª–æ–≤–ö–æ—Ç–æ—Ä–æ–µ –ù—É–∂–Ω–æ–ö–∞–∫–¢–æ–û–±—Ä–∞–±–æ—Ç–∞—Ç—å",
    ]
    
    for i, text in enumerate(test_texts, 1):
        print(f"\n   –¢–µ—Å—Ç {i}: '{text}'")
        split_result = typing_sim._split_fallback(text)
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç ({len(split_result)} —á–∞—Å—Ç–µ–π):")
        for j, part in enumerate(split_result, 1):
            print(f"     {j}. '{part}'")

def test_complexity_calculation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    print("\nüßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    
    typing_sim = TypingSimulator()
    
    test_cases = [
        "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
        "–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏! üòäüéâ",
        "–°–ª–æ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç: —Å –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, —Ü–∏—Ñ—Ä–∞–º–∏ 123 –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ @#$%",
        "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—é—â–∏–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏",
        "123 + 456 = 789 (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)",
        "üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜüòâüòä"  # –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
    ]
    
    for text in test_cases:
        complexity = typing_sim._calculate_complexity_factor(text)
        base_time = len(text.split()) / 40 * 60  # –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è
        modified_time = base_time * complexity
        
        print(f"   '{text}'")
        print(f"     –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity:.2f}x, –≤—Ä–µ–º—è: {base_time:.1f}—Å ‚Üí {modified_time:.1f}—Å")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    await test_split_responses()
    await test_fallback_splitting()
    test_complexity_calculation()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ TypingSimulator –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è")
    print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ")
    print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ split-–æ—Ç–≤–µ—Ç–æ–≤")
    print("   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main())