#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ v2.0
"""

import sqlite3
import os
import sys
import asyncio
from pathlib import Path
from datetime import datetime

def migrate_to_emotional_memory(db_path: str = "data/companion.db"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—è –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            print("üß†üíï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏...")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è —ç–º–æ—Ü–∏–π
            emotional_migrations = [
                "ALTER TABLE memories ADD COLUMN emotional_intensity REAL DEFAULT 5.0",
                "ALTER TABLE memories ADD COLUMN emotion_type TEXT DEFAULT 'calm'",
                "ALTER TABLE memories ADD COLUMN access_count INTEGER DEFAULT 0",
                "ALTER TABLE memories ADD COLUMN last_accessed DATETIME DEFAULT CURRENT_TIMESTAMP",
                "ALTER TABLE memories ADD COLUMN access_difficulty INTEGER DEFAULT 1",
                "ALTER TABLE memories ADD COLUMN is_deeply_archived BOOLEAN DEFAULT FALSE",
                
                # –ü–æ–ª—è –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã)
                "ALTER TABLE memories ADD COLUMN consolidation_level TEXT DEFAULT NULL",
                "ALTER TABLE memories ADD COLUMN last_consolidated DATETIME DEFAULT NULL",
                "ALTER TABLE memories ADD COLUMN is_consolidated BOOLEAN DEFAULT FALSE", 
                "ALTER TABLE memories ADD COLUMN is_archived BOOLEAN DEFAULT FALSE"
            ]
            
            for migration in emotional_migrations:
                try:
                    cursor.execute(migration)
                    field_name = migration.split('ADD COLUMN')[1].split()[0]
                    print(f"‚úÖ {field_name}")
                except sqlite3.OperationalError as e:
                    if "duplicate column name" in str(e).lower():
                        field_name = migration.split('ADD COLUMN')[1].split()[0]
                        print(f"‚ö†Ô∏è  –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {field_name}")
                    else:
                        raise
            
            # –°–æ–∑–¥–∞—ë–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
            emotional_indexes = [
                """CREATE INDEX IF NOT EXISTS idx_memories_emotional 
                   ON memories(emotion_type, emotional_intensity DESC, importance DESC)""",
                
                """CREATE INDEX IF NOT EXISTS idx_memories_access_pattern 
                   ON memories(access_count DESC, last_accessed DESC)""",
                
                """CREATE INDEX IF NOT EXISTS idx_memories_archival 
                   ON memories(is_deeply_archived, access_difficulty, created_at)""",
                
                """CREATE INDEX IF NOT EXISTS idx_memories_consolidation_emotional
                   ON memories(consolidation_level, emotion_type, emotional_intensity DESC)""",
                
                """CREATE INDEX IF NOT EXISTS idx_memories_retrieval_priority
                   ON memories(is_deeply_archived, access_difficulty, 
                               (importance + emotional_intensity * 0.3) DESC)"""
            ]
            
            print("\nüîç –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...")
            for idx in emotional_indexes:
                cursor.execute(idx)
                idx_name = idx.split("IF NOT EXISTS")[1].split("ON")[0].strip()
                print(f"‚úÖ {idx_name}")
            
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω—ã
            cursor.execute("PRAGMA table_info(memories)")
            columns = [row[1] for row in cursor.fetchall()]
            
            required_emotional_fields = [
                'emotional_intensity', 'emotion_type', 'access_count', 
                'last_accessed', 'access_difficulty', 'is_deeply_archived'
            ]
            
            missing = [field for field in required_emotional_fields if field not in columns]
            
            if missing:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—è: {missing}")
                return False
            
            print("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üíï –î–æ–±–∞–≤–ª–µ–Ω–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π: {len(required_emotional_fields)}")
            print(f"üîç –°–æ–∑–¥–∞–Ω–æ –∏–Ω–¥–µ–∫—Å–æ–≤: {len(emotional_indexes)}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_emotional_memory_system(db_path: str = "data/companion.db"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            test_memory = {
                "character_id": 1,
                "memory_type": "emotional_test",
                "content": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—á–µ–Ω—å –æ–±—Ä–∞–¥–æ–≤–∞–ª—Å—è –∫–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª –º–æ–π –Ω–æ–≤—ã–π –∫–æ—Å–ø–ª–µ–π",
                "importance": 8,
                "emotional_intensity": 9.2,
                "emotion_type": "joy",
                "access_count": 0,
                "access_difficulty": 1
            }
            
            cursor.execute("""
                INSERT INTO memories 
                (character_id, memory_type, content, importance, 
                 emotional_intensity, emotion_type, access_count, access_difficulty)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            """, tuple(test_memory.values()))
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            cursor.execute("""
                SELECT content, emotional_intensity, emotion_type,
                       (importance + emotional_intensity * 0.3) as total_score
                FROM memories 
                WHERE emotion_type = ? AND emotional_intensity >= ?
                ORDER BY total_score DESC
            """, ("joy", 8.0))
            
            results = cursor.fetchall()
            
            if results:
                print("‚úÖ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:")
                for result in results[:2]:
                    content, intensity, emotion, score = result
                    print(f"   - {emotion}({intensity:.1f}): {content[:50]}... (—Å–∫–æ—Ä: {score:.1f})")
                
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute("DELETE FROM memories WHERE memory_type = ?", ("emotional_test",))
                conn.commit()
                
                return True
            else:
                print("‚ùå –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return False
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def enhance_existing_memories_demo(db_path: str = "data/companion.db"):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    
    print("\nüé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –ù–∞—Ö–æ–¥–∏–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–µ—Ç–æ–∫
            cursor.execute("""
                SELECT id, content 
                FROM memories 
                WHERE emotional_intensity IS NULL 
                AND content IS NOT NULL
                AND LENGTH(content) > 20
                LIMIT 5
            """)
            
            memories_without_emotions = cursor.fetchall()
            
            if not memories_without_emotions:
                print("‚úÖ –í—Å–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –∏–º–µ—é—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏")
                return True
            
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(memories_without_emotions)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –±–µ–∑ —ç–º–æ—Ü–∏–π")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - —á–µ—Ä–µ–∑ AI)
            sample_emotions = [
                ("joy", 7.5), ("love", 8.2), ("excitement", 6.8), 
                ("calm", 5.0), ("surprise", 7.0)
            ]
            
            for i, (memory_id, content) in enumerate(memories_without_emotions):
                emotion, intensity = sample_emotions[i % len(sample_emotions)]
                
                cursor.execute("""
                    UPDATE memories 
                    SET emotional_intensity = ?, emotion_type = ?
                    WHERE id = ?
                """, (intensity, emotion, memory_id))
                
                print(f"   ‚úÖ –ü–∞–º—è—Ç—å {memory_id}: {emotion}({intensity:.1f}) - {content[:40]}...")
            
            conn.commit()
            print("üéâ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        return False

def show_emotional_memory_stats(db_path: str = "data/companion.db"):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ô –ü–ê–ú–Ø–¢–ò:")
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT COUNT(*) FROM memories")
            total = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM memories WHERE emotional_intensity IS NOT NULL")
            with_emotions = cursor.fetchone()[0]
            
            print(f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total}")
            print(f"   ‚Ä¢ –° —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏: {with_emotions}")
            print(f"   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ —ç–º–æ—Ü–∏—è–º–∏: {(with_emotions/total*100):.1f}%" if total > 0 else "   ‚Ä¢ –ü–æ–∫—Ä—ã—Ç–∏–µ: 0%")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —ç–º–æ—Ü–∏—è–º
            cursor.execute("""
                SELECT emotion_type, COUNT(*), AVG(emotional_intensity), AVG(importance)
                FROM memories 
                WHERE emotion_type IS NOT NULL 
                GROUP BY emotion_type
                ORDER BY COUNT(*) DESC
            """)
            
            emotion_stats = cursor.fetchall()
            if emotion_stats:
                print(f"\nüé≠ –ü–æ —Ç–∏–ø–∞–º —ç–º–æ—Ü–∏–π:")
                for emotion, count, avg_intensity, avg_importance in emotion_stats:
                    print(f"   ‚Ä¢ {emotion}: {count} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {avg_intensity:.1f}, –≤–∞–∂–Ω–æ—Å—Ç—å: {avg_importance:.1f})")
            
            # –¢–æ–ø —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —è—Ä–∫–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
            cursor.execute("""
                SELECT content, emotion_type, emotional_intensity, importance,
                       (importance + emotional_intensity * 0.3) as total_score
                FROM memories 
                WHERE emotional_intensity IS NOT NULL
                ORDER BY total_score DESC
                LIMIT 3
            """)
            
            top_memories = cursor.fetchall()
            if top_memories:
                print(f"\nüåü –°–∞–º—ã–µ —è—Ä–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
                for content, emotion, intensity, importance, score in top_memories:
                    print(f"   ‚Ä¢ {emotion}({intensity:.1f}): {content[:60]}... (—Å–∫–æ—Ä: {score:.1f})")
            
            # –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
            cursor.execute("SELECT COUNT(*) FROM memories WHERE is_consolidated = 1")
            consolidated = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM memories WHERE is_deeply_archived = 1")
            archived = cursor.fetchone()[0]
            
            print(f"\nüîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏–∏:")
            print(f"   ‚Ä¢ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {consolidated}")
            print(f"   ‚Ä¢ –ì–ª—É–±–æ–∫–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {archived}")
            print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏: {total - archived}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    
    print("üß†üíï –£–°–¢–ê–ù–û–í–ö–ê –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–ê–ú–Ø–¢–ò v2.0")
    print("=" * 60)
    
    db_path = "data/companion.db"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ë–î
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/setup_db.py")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    print("üîÑ –®–∞–≥ 1: –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    if not migrate_to_emotional_memory(db_path):
        print("‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
    print("\nüß™ –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    if not test_emotional_memory_system(db_path):
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å!")
        return
    
    # –£–ª—É—á—à–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    print("\nüé≠ –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è–º...")
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ enhance_existing_memories_with_emotions
        asyncio.run(enhance_existing_memories_demo(db_path))
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...")
    show_emotional_memory_stats(db_path)
    
    print("\nüéâ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ê–ú–Ø–¢–ò v2.0 –ì–û–¢–û–í–ê!")
    print("\nüí° –ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:")
    print("   üß† –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞ –≤—Å–µ—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    print("   üìä –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏")
    print("   üîÑ –£–º–Ω–∞—è –∫–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –ø–æ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞–º")
    print("   üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è")
    print("   üéØ –ß–∞—Å—Ç–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç")
    print("   üíï –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    
    print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏ –Ω–æ–≤—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    print("   ‚Ä¢ –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤")
    print("   ‚Ä¢ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä–æ–≥–∏ –ø–æ–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã")

if __name__ == "__main__":
    main()