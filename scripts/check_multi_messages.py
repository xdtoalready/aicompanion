#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
"""

import asyncio
import json
import sys
import os
from pathlib import Path

# –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(project_root))

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
try:
    from app.core.companion import RealisticAICompanion
    from app.core.typing_simulator import TypingSimulator
    from app.core.character_loader import get_character_loader
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞")
    sys.exit(1)

async def test_split_responses():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 50)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    config = {
        "ai": {
            "openrouter_api_key": "test_key",  # –î–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
            "model": "deepseek/deepseek-chat",
            "max_tokens": 350,
            "temperature": 0.85
        },
        "character": {
            "name": "–ê–ª–∏—Å–∞",
            "personality_traits": {
                "extraversion": 7.0,
                "agreeableness": 8.0,
                "conscientiousness": 6.0,
                "neuroticism": 4.0,
                "openness": 9.0
            }
        },
        "database": {"path": "data/test.db"},
        "behavior": {
            "max_daily_initiatives": 5,
            "min_hours_between_initiatives": 1
        },
        "typing": {
            "mode": "fast",
            "show_typing_indicator": True,
            "natural_pauses": True
        },
        "messaging": {
            "min_messages": 3,
            "max_messages": 7,
            "target_sentences": 3,
            "use_emojis": True,
            "max_emojis": 2
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    os.makedirs("data", exist_ok=True)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
        companion = RealisticAICompanion(config)
        
        print("üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω:")
        print(f"   –ò–º—è: {config['character']['name']}")
        print(f"   –õ–∏—á–Ω–æ—Å—Ç—å: {companion.psychological_core.get_personality_description()}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º TypingSimulator –æ—Ç–¥–µ–ª—å–Ω–æ
        print("\n‚å®Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—á–∞—Ç–∞–Ω–∏—è:")
        
        test_messages = [
            "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "–£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! üòä",
            "–•–æ—á–µ—Ç—Å—è –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ —á–µ–º-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–º.",
            "–ê —á—Ç–æ —É —Ç–µ–±—è –Ω–æ–≤–æ–≥–æ?"
        ]
        
        typing_sim = TypingSimulator()
        
        for i, msg in enumerate(test_messages, 1):
            typing_time = typing_sim.calculate_typing_time(msg, "happy", 80)
            print(f"   {i}. '{msg}' ‚Üí {typing_time:.1f}—Å –ø–µ—á–∞—Ç–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        print("\n‚è∏Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—É–∑—ã –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:")
        
        for i in range(len(test_messages) - 1):
            pause = typing_sim.calculate_pause_between_messages(
                test_messages[i], test_messages[i + 1], "happy"
            )
            print(f"   –ü–æ—Å–ª–µ '{test_messages[i][:20]}...' ‚Üí –ø–∞—É–∑–∞ {pause:.1f}—Å")
        
        # –ü–æ–ª–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        print("\nüìä –ü–æ–ª–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏:")
        
        summary = typing_sim.get_realistic_delays_summary(test_messages, "happy", 80)
        print(f"   –û–±—â–µ–µ –≤—Ä–µ–º—è: {summary['total_time']}—Å")
        print(f"   –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {summary['average_per_message']}—Å")
        print(f"   –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {summary['emotional_state']}")
        
        for detail in summary['details']:
            print(f"   - '{detail['message']}': –ø–µ—á–∞—Ç—å {detail['typing_time']}—Å + –ø–∞—É–∑–∞ {detail['pause_after']}—Å")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏
        print("\nüì§ –ò–º–∏—Ç–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:")
        
        sent_messages = []
        
        async def mock_send_callback(message):
            sent_messages.append(message)
            print(f"   üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message}")
        
        async def mock_typing_callback(is_typing):
            if is_typing:
                print("   ‚å®Ô∏è  [–ø–µ—á–∞—Ç–∞–µ—Ç...]")
            else:
                print("   ‚úÖ [–ø–µ—á–∞—Ç–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ]")
        
        await typing_sim.send_messages_with_realistic_timing(
            messages=test_messages[:2],  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
            emotional_state="happy",
            energy_level=80,
            send_callback=mock_send_callback,
            typing_callback=mock_typing_callback
        )
        
        print(f"\n‚úÖ –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(sent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        print(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

async def test_message_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:")
    
    typing_sim = TypingSimulator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π
    test_pairs = [
        ("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "–ê —É –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ!"),  # —Å–≤—è–∑–∞–Ω–Ω—ã–µ (–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å)
        ("–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞.", "–ò –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–æ–∂–µ —Ö–æ—Ä–æ—à–µ–µ."),  # —Å–≤—è–∑–∞–Ω–Ω—ã–µ (–ò –≤ –Ω–∞—á–∞–ª–µ)
        ("–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º?", "–•–º, —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å..."),  # —Å–≤—è–∑–∞–Ω–Ω—ã–µ (—Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –≤–æ–ø—Ä–æ—Å)
        ("–ü—Ä–∏–≤–µ—Ç!", "–ö—Å—Ç–∞—Ç–∏, —è –≤—á–µ—Ä–∞ —Ñ–∏–ª—å–º —Å–º–æ—Ç—Ä–µ–ª–∞."),  # —Å–≤—è–∑–∞–Ω–Ω—ã–µ (–∫—Å—Ç–∞—Ç–∏)
        ("–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º.", "–ü—Ä–æ–µ–∫—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, –Ω–æ —Å–ª–æ–∂–Ω—ã–π."),  # —Å–≤—è–∑–∞–Ω–Ω—ã–µ (–æ–±—â–µ–µ —Å–ª–æ–≤–æ "–ø—Ä–æ–µ–∫—Ç")
        ("–ò–¥—É –≤ –º–∞–≥–∞–∑–∏–Ω.", "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω–∞—è!"),  # –ù–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ
    ]
    
    for i, (msg1, msg2) in enumerate(test_pairs, 1):
        connected = typing_sim._are_messages_connected(msg1, msg2)
        pause = typing_sim.calculate_pause_between_messages(msg1, msg2, "calm")
        status = "—Å–≤—è–∑–∞–Ω–Ω—ã–µ" if connected else "–Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ"
        
        print(f"   {i}. '{msg1}' ‚Üí '{msg2}'")
        print(f"      –°—Ç–∞—Ç—É—Å: {status}, –ø–∞—É–∑–∞: {pause:.1f}—Å")

def test_complexity_calculation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
    
    print("\nüßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    
    typing_sim = TypingSimulator()
    
    test_cases = [
        "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç",
        "–¢–µ–∫—Å—Ç —Å —ç–º–æ–¥–∑–∏! üòäüéâ",
        "–°–ª–æ–∂–Ω—ã–π —Ç–µ–∫—Å—Ç: —Å –∑–Ω–∞–∫–∞–º–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è, —Ü–∏—Ñ—Ä–∞–º–∏ 123 –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞–º–∏ @#$%",
        "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—é—â–∏–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏",
        "123 + 456 = 789 (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)",
        "üòÄüòÅüòÇü§£üòÉüòÑüòÖüòÜüòâüòä"  # –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
    ]
    
    for text in test_cases:
        complexity = typing_sim._calculate_complexity_factor(text)
        base_time = len(text.split()) / 40 * 60  # –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è
        modified_time = base_time * complexity
        
        print(f"   '{text}'")
        print(f"     –°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity:.2f}x, –≤—Ä–µ–º—è: {base_time:.1f}—Å ‚Üí {modified_time:.1f}—Å")

async def test_character_loader():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    
    print("\nüë§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:")
    
    try:
        loader = get_character_loader()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
        available = loader.get_available_characters()
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: {len(available)}")
        
        for char in available:
            print(f"   - {char['name']} ({char['id']})")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        if available:
            first_char = available[0]
            loaded = loader.load_character(first_char['id'])
            
            if loaded:
                print(f"   ‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –∑–∞–≥—Ä—É–∂–µ–Ω: {loaded['name']}")
                print(f"   –í–æ–∑—Ä–∞—Å—Ç: {loaded.get('age', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
                print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {loaded.get('personality', {}).get('description', '–Ω–µ—Ç')[:50]}...")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {first_char['id']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        context = loader.get_character_context_for_ai()
        print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ù–∞—á–∞–ª–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {context[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è character_loader: {e}")
        import traceback
        print(f"   –î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI-–ö–û–ú–ü–ê–ù–¨–û–ù–ê")
    print("=" * 50)
    
    tests = [
        ("–ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", test_character_loader),
        ("–°–∏—Å—Ç–µ–º–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è", test_split_responses),
        ("–°–≤—è–∑–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π", test_message_connection),
        ("–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞", test_complexity_calculation),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\n{'='*20} {test_name.upper()} {'='*20}")
            
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
                
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            print(f"‚ùå {test_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    
    passed = 0
    failed_tests = []
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
        else:
            failed_tests.append(test_name)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ú–Ω–æ–≥–æ—Å–æ–æ–±—â–µ–Ω—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ config/config.json")
        print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        print("  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º API")
    else:
        print(f"\n‚ö†Ô∏è {len(results) - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {', '.join(failed_tests)}")
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")

if __name__ == "__main__":
    asyncio.run(main())