#!/usr/bin/env python3
"""
–ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sqlite3
import os
import logging
from pathlib import Path

def migrate_planning_database(db_path: str = "data/companion.db"):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            print("üìÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ë–î –¥–ª—è –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π
            migrations = [
                # –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ virtual_activities
                "ALTER TABLE virtual_activities ADD COLUMN planned_by TEXT DEFAULT 'auto'",
                "ALTER TABLE virtual_activities ADD COLUMN flexibility INTEGER DEFAULT 5",
                "ALTER TABLE virtual_activities ADD COLUMN importance INTEGER DEFAULT 5", 
                "ALTER TABLE virtual_activities ADD COLUMN emotional_reason TEXT",
                "ALTER TABLE virtual_activities ADD COLUMN can_reschedule BOOLEAN DEFAULT TRUE",
                "ALTER TABLE virtual_activities ADD COLUMN weather_dependent BOOLEAN DEFAULT FALSE",
                "ALTER TABLE virtual_activities ADD COLUMN planning_date DATE",
                "ALTER TABLE virtual_activities ADD COLUMN generated_by_ai BOOLEAN DEFAULT FALSE",
                
                # –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                """CREATE TABLE IF NOT EXISTS planning_sessions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    character_id INTEGER DEFAULT 1,
                    planning_date DATE NOT NULL,
                    planning_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                    day_of_week TEXT,
                    character_mood TEXT,
                    weather_context TEXT,
                    total_activities_planned INTEGER DEFAULT 0,
                    planning_prompt TEXT,
                    ai_response TEXT,
                    success BOOLEAN DEFAULT TRUE
                )""",
                
                """CREATE TABLE IF NOT EXISTS future_desires (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    character_id INTEGER DEFAULT 1,
                    desire_text TEXT NOT NULL,
                    priority INTEGER DEFAULT 5,
                    category TEXT,
                    deadline DATE,
                    attempts_count INTEGER DEFAULT 0,
                    last_mentioned DATETIME,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    fulfilled BOOLEAN DEFAULT FALSE
                )""",
                
                # –ò–Ω–¥–µ–∫—Å—ã
                "CREATE INDEX IF NOT EXISTS idx_activities_planning_date ON virtual_activities(planning_date, generated_by_ai)",
                "CREATE INDEX IF NOT EXISTS idx_activities_flexibility ON virtual_activities(flexibility, importance)",
                "CREATE INDEX IF NOT EXISTS idx_planning_sessions_date ON planning_sessions(planning_date)",
                "CREATE INDEX IF NOT EXISTS idx_desires_priority ON future_desires(priority DESC, deadline ASC)"
            ]
            
            success_count = 0
            for migration in migrations:
                try:
                    cursor.execute(migration)
                    success_count += 1
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á—Ç–æ –¥–æ–±–∞–≤–ª—è–ª–∏
                    if "ADD COLUMN" in migration:
                        column_name = migration.split("ADD COLUMN")[1].split()[0]
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {column_name}")
                    elif "CREATE TABLE" in migration:
                        table_name = migration.split("CREATE TABLE IF NOT EXISTS")[1].split("(")[0].strip()
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
                    elif "CREATE INDEX" in migration:
                        index_name = migration.split("CREATE INDEX IF NOT EXISTS")[1].split("ON")[0].strip()
                        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: {index_name}")
                        
                except sqlite3.OperationalError as e:
                    if "duplicate column name" in str(e).lower() or "already exists" in str(e).lower():
                        print(f"‚ö†Ô∏è  –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {str(e).split(':')[-1].strip()}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
                        return False
            
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            cursor.execute("PRAGMA table_info(virtual_activities)")
            columns = [row[1] for row in cursor.fetchall()]
            
            required_columns = ['planned_by', 'flexibility', 'importance', 'generated_by_ai']
            missing = [col for col in required_columns if col not in columns]
            
            if missing:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏: {missing}")
                return False
            
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = [row[0] for row in cursor.fetchall()]
            
            required_tables = ['planning_sessions', 'future_desires']
            missing_tables = [table for table in required_tables if table not in tables]
            
            if missing_tables:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                return False
            
            print(f"\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {success_count}")
            print(f"üìã –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {len(required_columns)}")
            print(f"üóÑÔ∏è  –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {len(required_tables)}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_planning_database(db_path: str = "data/companion.db"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ë–î"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ë–î –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
            cursor.execute("""
                INSERT INTO virtual_activities 
                (character_id, activity_type, description, start_time, end_time,
                 planned_by, flexibility, importance, emotional_reason, generated_by_ai)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                1, "test_planning", "–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                "2025-06-10 10:00:00", "2025-06-10 11:00:00", 
                "ai_planner", 7, 6, "—Ç–µ—Å—Ç–∏—Ä—É—é –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É", True
            ))
            
            # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            cursor.execute("""
                INSERT INTO planning_sessions
                (planning_date, day_of_week, character_mood, total_activities_planned)
                VALUES (?, ?, ?, ?)
            """, ("2025-06-10", "monday", "optimistic", 5))
            
            # –¢–µ—Å—Ç 3: –î–æ–±–∞–≤–ª—è–µ–º –∂–µ–ª–∞–Ω–∏–µ
            cursor.execute("""
                INSERT INTO future_desires
                (desire_text, priority, category, deadline)
                VALUES (?, ?, ?, ?)
            """, ("—Ö–æ—á—É –∑–∞–Ω—è—Ç—å—Å—è –Ω–æ–≤—ã–º —Ö–æ–±–±–∏", 7, "hobby", "2025-07-01"))
            
            conn.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
            cursor.execute("SELECT COUNT(*) FROM virtual_activities WHERE generated_by_ai = 1")
            ai_activities = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM planning_sessions")
            sessions = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM future_desires")
            desires = cursor.fetchone()[0]
            
            print(f"‚úÖ –ò–ò-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {ai_activities}")
            print(f"‚úÖ –°–µ—Å—Å–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {sessions}")
            print(f"‚úÖ –ñ–µ–ª–∞–Ω–∏—è: {desires}")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute("DELETE FROM virtual_activities WHERE activity_type = 'test_planning'")
            cursor.execute("DELETE FROM planning_sessions WHERE day_of_week = 'monday'")
            cursor.execute("DELETE FROM future_desires WHERE category = 'hobby'")
            conn.commit()
            
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üìÖ –ú–ò–ì–†–ê–¶–ò–Ø –ë–î –î–õ–Ø –ò–ò-–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if migrate_planning_database():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        if test_planning_database():
            print("\nüéâ –ë–î –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ò–ò-–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   1. –°–æ–∑–¥–∞—Ç—å DailyPlanningSystem")
            print("   2. –î–æ–±–∞–≤–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω–µ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ 6:00")
            print("   3. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º–∏")
        else:
            print("\n‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞, –Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!")