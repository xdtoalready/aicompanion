#!/usr/bin/env python3
"""
–°–†–û–ß–ù–û–ï –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
scripts/fix_planning_database.py
"""

import sqlite3
import os
import logging
from pathlib import Path

def fix_planning_database(db_path: str = "data/companion.db"):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ö–µ–º—É –ë–î –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return False
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –ë–î –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
            
            # 1. –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É planning_sessions –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS planning_sessions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    character_id INTEGER DEFAULT 1,
                    planning_date DATE NOT NULL,
                    planning_time DATETIME DEFAULT CURRENT_TIMESTAMP,
                    day_of_week TEXT,
                    character_mood TEXT,
                    weather_context TEXT,
                    total_activities_planned INTEGER DEFAULT 0,
                    planning_prompt TEXT,
                    ai_response TEXT,
                    success BOOLEAN DEFAULT TRUE
                )
            """)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ planning_sessions —Å–æ–∑–¥–∞–Ω–∞")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ virtual_activities
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS virtual_activities (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    character_id INTEGER DEFAULT 1,
                    activity_type TEXT NOT NULL,
                    description TEXT NOT NULL,
                    start_time DATETIME NOT NULL,
                    end_time DATETIME NOT NULL,
                    status TEXT DEFAULT 'planned',
                    mood_effect REAL DEFAULT 0,
                    energy_cost INTEGER DEFAULT 20,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ virtual_activities —Å–æ–∑–¥–∞–Ω–∞")
            
            # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ virtual_activities
            new_columns = [
                ("planning_date", "DATE"),
                ("generated_by_ai", "BOOLEAN DEFAULT FALSE"),
                ("flexibility", "INTEGER DEFAULT 5"),
                ("importance", "INTEGER DEFAULT 5"),
                ("planned_by", "TEXT DEFAULT 'auto'"),
                ("emotional_reason", "TEXT"),
                ("can_reschedule", "BOOLEAN DEFAULT TRUE"),
                ("weather_dependent", "BOOLEAN DEFAULT FALSE")
            ]
            
            for column_name, column_def in new_columns:
                try:
                    cursor.execute(f"ALTER TABLE virtual_activities ADD COLUMN {column_name} {column_def}")
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {column_name}")
                except sqlite3.OperationalError as e:
                    if "duplicate column name" in str(e).lower():
                        print(f"‚ö†Ô∏è  –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {column_name}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {column_name}: {e}")
                        return False
            
            # 4. –°–æ–∑–¥–∞—ë–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_activities_planning_date ON virtual_activities(planning_date, generated_by_ai)",
                "CREATE INDEX IF NOT EXISTS idx_activities_start_time ON virtual_activities(start_time)",
                "CREATE INDEX IF NOT EXISTS idx_planning_sessions_date ON planning_sessions(planning_date)",
                "CREATE INDEX IF NOT EXISTS idx_activities_character ON virtual_activities(character_id, status)"
            ]
            
            for index_sql in indexes:
                cursor.execute(index_sql)
            
            print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
            cursor.execute("SELECT COUNT(*) FROM virtual_activities")
            activities_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM planning_sessions")
            sessions_count = cursor.fetchone()[0]
            
            conn.commit()
            
            print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –≤ –ë–î: {activities_count}")
            print(f"üìÖ –°–µ—Å—Å–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {sessions_count}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        return False

def test_fixed_database(db_path: str = "data/companion.db"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ë–î"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ë–î...")
    
    try:
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–µ—Å—Ç 1: –í—Å—Ç–∞–≤–ª—è–µ–º –ø–ª–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
            from datetime import date, datetime
            today = date.today()
            
            cursor.execute("""
                INSERT INTO virtual_activities 
                (character_id, activity_type, description, start_time, end_time,
                 planning_date, generated_by_ai, flexibility, importance, planned_by)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                1, "test", "–¢–µ—Å—Ç–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
                f"{today} 10:00:00", f"{today} 11:00:00",
                today.isoformat(), True, 7, 6, "ai_planner"
            ))
            
            # –¢–µ—Å—Ç 2: –í—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            cursor.execute("""
                INSERT INTO planning_sessions
                (planning_date, day_of_week, character_mood, total_activities_planned, success)
                VALUES (?, ?, ?, ?, ?)
            """, (today.isoformat(), "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "—Ö–æ—Ä–æ—à–µ–µ", 1, True))
            
            conn.commit()
            
            # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω—ã
            cursor.execute("""
                SELECT activity_type, description, start_time, importance, flexibility
                FROM virtual_activities
                WHERE DATE(start_time) = ? AND generated_by_ai = 1
            """, (today.isoformat(),))
            
            test_plans = cursor.fetchall()
            
            if test_plans:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(test_plans)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞–Ω–æ–≤")
                for plan in test_plans:
                    print(f"   - {plan[0]}: {plan[1]} –≤ {plan[2]} (–≤–∞–∂–Ω–æ—Å—Ç—å: {plan[3]})")
            else:
                print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("DELETE FROM virtual_activities WHERE activity_type = 'test'")
            cursor.execute("DELETE FROM planning_sessions WHERE day_of_week = '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'")
            conn.commit()
            
            print("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üîß –°–†–û–ß–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–î –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ë–î
    if fix_planning_database():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        if test_fixed_database():
            print("\nüéâ –ë–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ:")
            print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å /test_planning –≤ Telegram")
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å /plans")
            print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /activity")
        else:
            print("\n‚ö†Ô∏è  –ë–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞, –Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ë–î!")