#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–∞–º—è—Ç—å –∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
"""

import asyncio
import sys
import os
import sqlite3
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(str(Path(__file__).parent.parent))

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db_path = "data/companion.db"
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/setup_db.py")
        return False
    
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        time.sleep(0.5)
        
        with sqlite3.connect(db_path, timeout=10) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = [row[0] for row in cursor.fetchall()]
            
            required_tables = ['character_profile', 'character_state', 'conversations', 'memories']
            missing_tables = [table for table in required_tables if table not in tables]
            
            if missing_tables:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {missing_tables}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂
            cursor.execute("SELECT COUNT(*) FROM character_profile")
            char_count = cursor.fetchone()[0]
            
            if char_count == 0:
                print("‚ö†Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ —Å–æ–∑–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º...")
                cursor.execute("""
                    INSERT INTO character_profile 
                    (name, age, gender, personality, background, interests, speech_style)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                """, (
                    "–ê–ª–∏—Å–∞", 25, "female", 
                    '{"extraversion": 7, "agreeableness": 8, "openness": 9}',
                    "–î—Ä—É–∂–µ–ª—é–±–Ω–∞—è AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω",
                    '["–∞–Ω–∏–º–µ", "–º–∞–Ω–≥–∞", "–æ–±—â–µ–Ω–∏–µ", "–∫–Ω–∏–≥–∏"]',
                    "–∂–∏–≤–æ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π"
                ))
                conn.commit()
                print("‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω")
            
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
    except sqlite3.OperationalError as e:
        if "database is locked" in str(e):
            print("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            time.sleep(2)
            try:
                with sqlite3.connect(db_path, timeout=30) as conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT COUNT(*) FROM character_profile")
                    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç (–ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–∞)")
                    return True
            except Exception as e2:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î (–ø–æ–≤—Ç–æ—Ä): {e2}")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return False

async def test_memory_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        sys.path.append(str(Path(__file__).parent.parent / 'app'))
        from database.memory_manager import EnhancedMemorySystem
        
        memory = EnhancedMemorySystem()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
        test_user_msg = "–Ø –ª—é–±–ª—é —á–∏—Ç–∞—Ç—å –º–∞–Ω–≥—É –¢–æ–∫–∏–π—Å–∫–∏–µ –º—Å—Ç–∏—Ç–µ–ª–∏"
        test_ai_responses = ["–û—Ö, –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!", "–û–±–æ–∂–∞—é —ç—Ç—É –º–∞–Ω–≥—É —Ç–æ–∂–µ!"]
        
        conv_id = memory.add_conversation(test_user_msg, test_ai_responses, "calm", "happy")
        
        if conv_id:
            print(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: {conv_id}")
        else:
            print("‚ö†Ô∏è –î–∏–∞–ª–æ–≥ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = memory.get_context_for_response("–º–∞–Ω–≥–∞")
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω: {context[:100]}...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = memory.get_conversation_summary()
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–º—è—Ç–∏: {e}")
        import traceback
        print(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

async def test_message_splitting():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print("\n‚úÇÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π AI –∫–ª–∏–µ–Ω—Ç
        sys.path.append(str(Path(__file__).parent.parent / 'app'))
        from core.ai_client import OptimizedAI
        
        # –ú–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = {
            'ai': {'model': 'test', 'max_tokens': 300, 'temperature': 0.8},
            'character': {'name': '–ê–ª–∏—Å–∞'}
        }
        
        # –°–æ–∑–¥–∞–µ–º AI –∫–ª–∏–µ–Ω—Ç –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API (–¥–ª—è —Ç–µ—Å—Ç–æ–≤)
        ai = OptimizedAI(None, config)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞
        test_responses = [
            "–ü—Ä–∏–≤–µ—Ç! || –ö–∞–∫ –¥–µ–ª–∞? || –£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ!",
            "–û—Ö, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! || –î—É–º–∞—é —á—Ç–æ –º–∞–Ω–≥–∞ –ª—É—á—à–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏. || –í –Ω–µ–π –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π!",
            "–¢–æ–∫–∏–π—Å–∫–∏–µ –º—Å—Ç–∏—Ç–µ–ª–∏ - —Å—É–ø–µ—Ä! | –°—é–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π | –ê –∫–∞–∫–∞—è —Ç–≤–æ—è –ª—é–±–∏–º–∞—è –∞—Ä–∫–∞?",
            "–ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π"
        ]
        
        for i, response in enumerate(test_responses, 1):
            messages = ai._process_raw_response(response)
            print(f"  –¢–µ—Å—Ç {i}: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            for j, msg in enumerate(messages, 1):
                print(f"    {j}. {msg}")
            print()
        
        print("‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è: {e}")
        import traceback
        print(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

async def test_question_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤...")
    
    try:
        sys.path.append(str(Path(__file__).parent.parent / 'app'))
        from core.ai_client import OptimizedAI
        
        config = {
            'ai': {'model': 'test', 'max_tokens': 300, 'temperature': 0.8},
            'character': {'name': '–ê–ª–∏—Å–∞'}
        }
        ai = OptimizedAI(None, config)
        
        test_questions = [
            ("–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ–± –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ vs –º–∞–Ω–≥–∞?", "opinion_question"),
            ("–ö–∞–∫–∞—è –º–∞–Ω–≥–∞ –ª—É—á—à–µ?", "preference_question"),
            ("–¢–æ–∫–∏–π—Å–∫–∏–µ –º—Å—Ç–∏—Ç–µ–ª–∏ –∏–ª–∏ –ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤?", "comparison_question"),
            ("–ö–∞–∫ –¥–µ–ª–∞?", "direct_question"),
            ("–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞", "statement")
        ]
        
        for question, expected_type in test_questions:
            detected_type = ai._analyze_question_type(question)
            status = "‚úÖ" if detected_type == expected_type else "‚ùå"
            print(f"  {status} '{question}' ‚Üí {detected_type} (–æ–∂–∏–¥–∞–ª—Å—è {expected_type})")
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        print(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

async def test_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    config_path = "config/config.json"
    
    if not os.path.exists(config_path):
        print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ config/config.example.json –≤ config/config.json")
        return False
    
    try:
        import json
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è
        checks = [
            ("ai.openrouter_api_key", config.get('ai', {}).get('openrouter_api_key')),
            ("character.name", config.get('character', {}).get('name')),
            ("database.path", config.get('database', {}).get('path')),
        ]
        
        for field, value in checks:
            if not value or value in ["YOUR_OPENROUTER_API_KEY_HERE", "YOUR_TELEGRAM_BOT_TOKEN"]:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {field}")
            else:
                print(f"‚úÖ {field}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

async def test_database_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î —á–µ—Ä–µ–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î...")
    
    try:
        sys.path.append(str(Path(__file__).parent.parent / 'app'))
        from database.memory_manager import DatabaseMemoryManager
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –ë–î
        db_manager = DatabaseMemoryManager()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        conv_id = db_manager.save_conversation(
            "–ö–∞–∫–∞—è –º–∞–Ω–≥–∞ –ª—É—á—à–µ - –¢–æ–∫–∏–π—Å–∫–∏–µ –º—Å—Ç–∏—Ç–µ–ª–∏ –∏–ª–∏ –ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤?",
            ["–û—Ö, —Å–ª–æ–∂–Ω—ã–π –≤—ã–±–æ—Ä!", "–î—É–º–∞—é, –¢–æ–∫–∏–π—Å–∫–∏–µ –º—Å—Ç–∏—Ç–µ–ª–∏ –±–ª–∏–∂–µ –∫ —Å–µ—Ä–¥—Ü—É.", "–ê —Ç–µ–±–µ –∫–∞–∫–∞—è –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?"],
            "calm", "happy"
        )
        
        if conv_id:
            print(f"‚úÖ –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î: {conv_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        memories = db_manager.get_relevant_memories("–º–∞–Ω–≥–∞", 3)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(memories)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = db_manager.build_context_for_prompt("–º–∞–Ω–≥–∞ –∞–Ω–∏–º–µ")
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω: {len(context)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ë–î: {e}")
        import traceback
        print(f"–î–µ—Ç–∞–ª–∏: {traceback.format_exc()}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI-–ö–û–ú–ü–ê–ù–¨–û–ù–ê")
    print("=" * 50)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_config),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database), 
        ("–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏", test_memory_system),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î", test_database_integration),
        ("–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π", test_message_splitting),
        ("–ê–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤", test_question_analysis)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            print(f"\n{'='*20} {test_name.upper()} {'='*20}")
            result = await test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: –£–°–ü–ï–®–ù–û")
            else:
                print(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
                
        except Exception as e:
            print(f"‚ùå {test_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    
    passed = 0
    failed_tests = []
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
        else:
            failed_tests.append(test_name)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –ö–æ–º–ø–∞–Ω—å–æ–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏ –≤ config/config.json")
        print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py")
        print("  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram")
        print("  4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /dbcheck –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î")
    else:
        print(f"\n‚ö†Ô∏è {len(results) - passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: {', '.join(failed_tests)}")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:")
        
        if "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" in failed_tests:
            print("  - –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/setup_db.py")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–ø–∫–µ data/")
        
        if "–°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏" in failed_tests:
            print("  - –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª app/database/memory_manager.py")
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
        
        if "–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π" in failed_tests:
            print("  - –û–±–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª app/core/ai_client.py")
            print("  - –î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –º–µ—Ç–æ–¥—ã")
        
        print("\nüí° –ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main())
