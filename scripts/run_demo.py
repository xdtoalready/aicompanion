"""
–î–µ–º–æ-—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import json

from app.core.companion import RealisticAICompanion

async def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    
    print("üé≠ –î–µ–º–æ AI-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞")
    print("=" * 30)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ
    config = {
        "ai": {
            "openrouter_api_key": "demo_key",
            "model": "deepseek/deepseek-chat"
        },
        "character": {
            "name": "–ê–ª–∏—Å–∞",
            "personality_traits": {
                "extraversion": 7.0,
                "agreeableness": 8.0,
                "conscientiousness": 6.0,
                "neuroticism": 4.0,
                "openness": 9.0
            }
        },
        "database": {"path": "data/demo.db"},
        "behavior": {
            "max_daily_initiatives": 5,
            "min_hours_between_initiatives": 1
        }
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω—å–æ–Ω–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ AI)
    companion = RealisticAICompanion(config)
    
    print("üë§ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω:")
    print(f"   –ò–º—è: {config['character']['name']}")
    print(f"   –õ–∏—á–Ω–æ—Å—Ç—å: {companion.psychological_core.get_personality_description()}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    mood = companion.psychological_core.calculate_current_mood()
    print(f"   –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood:.1f}/10")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏:")
    
    events = [
        ("positive_interaction", 2.0, "–ü–æ–ª—É—á–∏–ª –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç"),
        ("stress", 1.5, "–°–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ"),
        ("rest", 1.0, "–û—Ç–¥–æ—Ö–Ω—É–ª –¥–æ–º–∞")
    ]
    
    for event, intensity, description in events:
        companion.psychological_core.update_emotional_state(event, intensity)
        emotion = companion.psychological_core.emotional_momentum["current_emotion"]
        emotion_intensity = companion.psychological_core.emotional_momentum["emotion_intensity"]
        
        print(f"   {description} ‚Üí {emotion} ({emotion_intensity:.1f})")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏:")
    
    memories = [
        ("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª—é–±–∏—Ç –∫–æ—Ñ–µ", "preference", 6),
        ("–†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º", "fact", 8),
        ("–ì—Ä—É—Å—Ç–∏–ª –≤—á–µ—Ä–∞", "emotion", 4)
    ]
    
    for content, mem_type, importance in memories:
        companion.memory_system.add_memory(content, mem_type, importance)
        print(f"   üí≠ {content}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
    relevant = companion.memory_system.get_relevant_memories("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ä–∞–±–æ—Ç–∞", 2)
    print(f"\nüîç –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ä–∞–±–æ—Ç–∞':")
    for memory in relevant:
        print(f"   - {memory['content']} (–≤–∞–∂–Ω–æ—Å—Ç—å: {memory['importance']})")
    
    print("\n‚ú® –î–µ–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(demo())